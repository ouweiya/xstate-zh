"use strict";(self.webpackChunkstately_docs=self.webpackChunkstately_docs||[]).push([[2528],{86711:(t,e,n)=>{n.r(e),n.d(e,{assets:()=>c,contentTitle:()=>o,default:()=>h,frontMatter:()=>a,metadata:()=>r,toc:()=>l});var s=n(85893),i=n(11151);const a={title:"Testing",description:"How to test state machine and actor logic in XState"},o=void 0,r={id:"testing",title:"Testing",description:"How to test state machine and actor logic in XState",source:"@site/docs/testing.mdx",sourceDirName:".",slug:"/testing",permalink:"/xstate-zh/docs/testing",draft:!1,unlisted:!1,editUrl:"https://github.com/statelyai/docs/tree/main/docs/testing.mdx",tags:[],version:"current",frontMatter:{title:"Testing",description:"How to test state machine and actor logic in XState"},sidebar:"tutorialSidebar",previous:{title:"\u6307\u5357",permalink:"/xstate-zh/docs/category/guides"},next:{title:"Usage with Immer",permalink:"/xstate-zh/docs/immer"}},c={},l=[{value:"Testing logic",id:"testing-logic",level:2},{value:"Testing actors",id:"testing-actors",level:2},{value:"Mocking effects",id:"mocking-effects",level:2},{value:"Using <code>@xstate/test</code>",id:"using-xstatetest",level:2}];function d(t){const e={a:"a",admonition:"admonition",code:"code",em:"em",h2:"h2",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,i.a)(),...t.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(e.h2,{id:"testing-logic",children:"Testing logic"}),"\n",(0,s.jsxs)(e.p,{children:["Testing actor logic is important for ensuring that the logic is correct and that it behaves as expected. You can test your state machines and actors using various testing libraries and tools. You should follow the ",(0,s.jsx)(e.strong,{children:"Arrange, Act, Assert"})," pattern when writing tests for your state machines and actors:"]}),"\n",(0,s.jsxs)(e.ul,{children:["\n",(0,s.jsxs)(e.li,{children:[(0,s.jsx)(e.strong,{children:"Arrange"})," - set up the test by creating the actor logics (such as a state machine) and the actors from the actor logics."]}),"\n",(0,s.jsxs)(e.li,{children:[(0,s.jsx)(e.strong,{children:"Act"})," - send event(s) to the actor(s)."]}),"\n",(0,s.jsxs)(e.li,{children:[(0,s.jsx)(e.strong,{children:"Assert"})," - assert that the actor(s) reached their expected state(s) and/or executed the expected side effects."]}),"\n"]}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-ts",children:"import { setup, createActor } from 'xstate';\nimport { test, expect } from 'vitest';\n\ntest('some actor', async () => {\n  const notifiedMessages: string[] = [];\n\n  // 1. Arrange\n  const machine = setup({\n    actions: {\n      notify: (_, params) => {\n        notifiedMessages.push(params.message);\n      }\n    }\n  }).createMachine({\n    initial: 'inactive',\n    states: {\n      inactive: {\n        on: { toggle: { target: 'active' } }\n      },\n      active: {\n        entry: { type: 'notify', params: { message: 'Active!' } },\n        on: { toggle: { target: 'inactive' } }\n      }\n    }\n  });\n\n  const actor = createActor(machine);\n\n  // 2. Act\n  actor.start();\n  actor.send({ type: 'toggle' }); // => should be in 'active' state\n  actor.send({ type: 'toggle' }); // => should be in 'inactive' state\n  actor.send({ type: 'toggle' }); // => should be in 'active' state\n\n  // 3. Assert\n  expect(actor.getSnapshot().value).toBe('active');\n  expect(notifiedMessages).toEqual(['Active!', 'Active!']);;\n});\n"})}),"\n",(0,s.jsx)(e.admonition,{type:"studio",children:(0,s.jsxs)(e.p,{children:["You can now ",(0,s.jsx)(e.a,{href:"/xstate-zh/docs/generate-test-paths",children:"generate test paths from your state machines in Stately Studio"}),". You can try Stately Studio\u2019s premium plans with a free trial. ",(0,s.jsx)(e.a,{href:"/xstate-zh/docs/studio-pro-plan",children:"Check out the features on our Pro plan"}),", ",(0,s.jsx)(e.a,{href:"/xstate-zh/docs/studio-team-plan",children:"Team plan"}),", ",(0,s.jsx)(e.a,{href:"/xstate-zh/docs/studio-enterprise-plan",children:"Enterprise plan"})," or ",(0,s.jsx)(e.a,{href:"https://stately.ai/registry/billing",children:"upgrade your existing plan"}),"."]})}),"\n",(0,s.jsx)(e.h2,{id:"testing-actors",children:"Testing actors"}),"\n",(0,s.jsx)(e.p,{children:(0,s.jsx)(e.em,{children:"Coming soon"})}),"\n",(0,s.jsx)(e.h2,{id:"mocking-effects",children:"Mocking effects"}),"\n",(0,s.jsx)(e.p,{children:(0,s.jsx)(e.em,{children:"Coming soon"})}),"\n",(0,s.jsxs)(e.h2,{id:"using-xstatetest",children:["Using ",(0,s.jsx)(e.code,{children:"@xstate/test"})]}),"\n",(0,s.jsx)(e.p,{children:(0,s.jsx)(e.em,{children:"Coming soon"})})]})}function h(t={}){const{wrapper:e}={...(0,i.a)(),...t.components};return e?(0,s.jsx)(e,{...t,children:(0,s.jsx)(d,{...t})}):d(t)}},11151:(t,e,n)=>{n.d(e,{Z:()=>r,a:()=>o});var s=n(67294);const i={},a=s.createContext(i);function o(t){const e=s.useContext(a);return s.useMemo((function(){return"function"==typeof t?t(e):{...e,...t}}),[e,t])}function r(t){let e;return e=t.disableParentContext?"function"==typeof t.components?t.components(i):t.components||i:o(t.components),s.createElement(a.Provider,{value:e},t.children)}}}]);