"use strict";(self.webpackChunkstately_docs=self.webpackChunkstately_docs||[]).push([[460],{97365:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>o,contentTitle:()=>i,default:()=>d,frontMatter:()=>l,metadata:()=>r,toc:()=>c});var a=n(85893),s=n(11151);const l={title:"Parallel states"},i=void 0,r={id:"parallel-states",title:"Parallel states",description:"In statecharts, a parallel state is a state that has multiple child states (also known as regions) that are all active at the same time. This is different from a parent state, where only one child state is active at a time.",source:"@site/docs/parallel-states.mdx",sourceDirName:".",slug:"/parallel-states",permalink:"/xstate-zh/docs/parallel-states",draft:!1,unlisted:!1,editUrl:"https://github.com/statelyai/docs/tree/main/docs/parallel-states.mdx",tags:[],version:"current",frontMatter:{title:"Parallel states"},sidebar:"tutorialSidebar",previous:{title:"\u7236\u72b6\u6001",permalink:"/xstate-zh/docs/parent-states"},next:{title:"Final states",permalink:"/xstate-zh/docs/final-states"}},o={},c=[{value:"Parallel state value",id:"parallel-state-value",level:2},{value:"Parallel onDone transition",id:"parallel-ondone-transition",level:2},{value:"Modeling",id:"modeling",level:2},{value:"Parallel states cheatsheet",id:"parallel-states-cheatsheet",level:2},{value:"Cheatsheet: create a parallel state",id:"cheatsheet-create-a-parallel-state",level:3}];function h(e){const t={a:"a",admonition:"admonition",code:"code",em:"em",h2:"h2",h3:"h3",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,s.a)(),...e.components},{EmbedMachine:n}=t;return n||function(e,t){throw new Error("Expected "+(t?"component":"object")+" `"+e+"` to be defined: you likely forgot to import, pass, or provide it.")}("EmbedMachine",!0),(0,a.jsxs)(a.Fragment,{children:[(0,a.jsxs)(t.p,{children:["In statecharts, a parallel state is a state that has multiple child states (also known as ",(0,a.jsx)(t.strong,{children:"regions"}),") that are all active at the same time. This is different from a ",(0,a.jsx)(t.a,{href:"/xstate-zh/docs/parent-states",children:"parent state"}),", where only ",(0,a.jsx)(t.em,{children:"one"})," child state is active at a time."]}),"\n",(0,a.jsx)(t.p,{children:"Parallel states have the following characteristics:"}),"\n",(0,a.jsxs)(t.ul,{children:["\n",(0,a.jsx)(t.li,{children:"Entering a parallel state will also simultaneously enter all of its regions."}),"\n",(0,a.jsx)(t.li,{children:"Exiting a parallel state will also simultaneously exit all of its regions."}),"\n",(0,a.jsx)(t.li,{children:"An event received in a parallel state is simultaneously received & handled by all of its regions."}),"\n"]}),"\n",(0,a.jsx)(t.admonition,{type:"studio",children:(0,a.jsxs)(t.p,{children:["You can easily visualize and simulate parallel states in Stately\u2019s editor. ",(0,a.jsx)(t.a,{href:"/docs/editor-states-and-transitions/#parallel-states",children:"Read more about parallel states in Stately\u2019s editor"}),"."]})}),"\n",(0,a.jsx)(t.p,{children:"Here is a music player example with a parallel state consisting of two regions, one for handling playing the track and one for handling the volume:"}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-ts",children:"import { createMachine, assign } from 'xstate';\n\nconst playerMachine = createMachine({\n  id: 'player',\n  // highlight-next-line\n  type: 'parallel',\n  states: {\n    track: {\n      initial: 'paused',\n      states: {\n        paused: {\n          on: { PLAY: 'playing' },\n        },\n        playing: {\n          on: { STOP: 'paused' },\n        },\n      },\n    },\n    volume: {\n      initial: 'normal',\n      states: {\n        normal: {\n          on: { MUTE: 'muted' },\n        },\n        muted: {\n          on: { UNMUTE: 'normal' },\n        },\n      },\n    },\n  },\n});\n"})}),"\n",(0,a.jsx)(n,{name:"Video player",embedURL:"https://stately.ai/registry/editor/embed/e13bef2b-bb13-4465-96ac-0bc25340688e?machineId=733de338-26cb-40a5-a0b5-b76bfc0405c3"}),"\n",(0,a.jsx)(t.h2,{id:"parallel-state-value",children:"Parallel state value"}),"\n",(0,a.jsxs)(t.p,{children:["The ",(0,a.jsx)(t.a,{href:"/xstate-zh/docs/states#state-value",children:"state value"})," of a parallel state is an object with the state values of each of its regions."]}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-ts",children:"const playerActor = createActor(playerMachine);\nplayerActor.start();\n\nconsole.log(playerActor.getSnapshot().value);\n// logs the object:\n// {\n//   track: 'paused',\n//   volume: 'normal'\n// }\n"})}),"\n",(0,a.jsx)(t.h2,{id:"parallel-ondone-transition",children:"Parallel onDone transition"}),"\n",(0,a.jsxs)(t.p,{children:["When all regions of a parallel state have reached their final states, the ",(0,a.jsx)(t.code,{children:"onDone"})," transition of the parallel state is taken."]}),"\n",(0,a.jsxs)(t.p,{children:["In this example, the ",(0,a.jsx)(t.code,{children:"onDone"})," transition of the parallel state is taken when both regions have reached their final states; that is, when ",(0,a.jsx)(t.code,{children:"'grindingBeans'"})," reaches the ",(0,a.jsx)(t.code,{children:"'grindingBeans.beansGround'"})," state and ",(0,a.jsx)(t.code,{children:"'boilingWater'"})," reaches the ",(0,a.jsx)(t.code,{children:"'boilingWater.waterBoiled'"})," state."]}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-ts",children:'import { createMachine } from "xstate";\n\nexport const machine = createMachine({\n  id: "coffee",\n  initial: "preparing",\n  states: {\n    preparing: {\n      states: {\n        grindBeans: {\n          initial: "grindingBeans",\n          states: {\n            grindingBeans: {\n              on: {\n                BEANS_GROUND: {\n                  target: "beansGround",\n                },\n              },\n            },\n            beansGround: {\n              // highlight-next-line\n              type: "final",\n            },\n          },\n        },\n        boilWater: {\n          initial: "boilingWater",\n          states: {\n            boilingWater: {\n              on: {\n                WATER_BOILED: {\n                  target: "waterBoiled",\n                },\n              },\n            },\n            waterBoiled: {\n              // highlight-next-line\n              type: "final",\n            },\n          },\n        },\n      },\n      type: "parallel",\n      // highlight-start\n      onDone: {\n        target: "makingCoffee",\n      },\n      // highlight-end\n    },\n    makingCoffee: {},\n  },\n});\n'})}),"\n",(0,a.jsx)(n,{embedURL:"https://stately.ai/registry/editor/embed/c447d996-cef1-421d-a422-8be695668764?machineId=187dcde8-efed-4106-bfa7-59afadb2297f&mode=Simulate"}),"\n",(0,a.jsx)(t.h2,{id:"modeling",children:"Modeling"}),"\n",(0,a.jsx)(t.p,{children:(0,a.jsx)(t.em,{children:"Coming soon"})}),"\n",(0,a.jsxs)(t.ul,{children:["\n",(0,a.jsx)(t.li,{children:"Avoid transitions between regions"}),"\n",(0,a.jsxs)(t.li,{children:["Used for separation of concerns that ",(0,a.jsx)(t.em,{children:"may"})," affect each other (i.e. synchronization)"]}),"\n",(0,a.jsxs)(t.li,{children:["If completely separate, prefer ",(0,a.jsx)(t.code,{children:"invoke"})," instead"]}),"\n"]}),"\n",(0,a.jsx)(t.h2,{id:"parallel-states-cheatsheet",children:"Parallel states cheatsheet"}),"\n",(0,a.jsx)(t.h3,{id:"cheatsheet-create-a-parallel-state",children:"Cheatsheet: create a parallel state"}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-ts",children:"import { createMachine } from \"xstate\";\n\nconst machine = createMachine({\n  // ...\n  states: {\n    type: 'parallel',\n    states: {\n      one: {/* ... */},\n      two: {/* ... */},\n      three: {/* ... */}\n    },\n    onDone: {\n      // Taken when all regions have reached their final states\n    }\n  }\n});\n"})})]})}function d(e={}){const{wrapper:t}={...(0,s.a)(),...e.components};return t?(0,a.jsx)(t,{...e,children:(0,a.jsx)(h,{...e})}):h(e)}},11151:(e,t,n)=>{n.d(t,{Z:()=>r,a:()=>i});var a=n(67294);const s={},l=a.createContext(s);function i(e){const t=a.useContext(l);return a.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function r(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:i(e.components),a.createElement(l.Provider,{value:t},e.children)}}}]);