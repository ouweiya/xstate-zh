"use strict";(self.webpackChunkstately_docs=self.webpackChunkstately_docs||[]).push([[5534],{67670:(n,e,t)=>{t.r(e),t.d(e,{assets:()=>i,contentTitle:()=>c,default:()=>d,frontMatter:()=>o,metadata:()=>r,toc:()=>l});var s=t(85893),a=t(11151);const o={title:"\u901f\u67e5\u8868"},c=void 0,r={id:"cheatsheet",title:"\u901f\u67e5\u8868",description:"\u4f7f\u7528\u6b64\u901f\u67e5\u8868\u5feb\u901f\u67e5\u627e XState v5 \u7684\u8bed\u6cd5\u3002",source:"@site/docs/cheatsheet.mdx",sourceDirName:".",slug:"/cheatsheet",permalink:"/xstate-zh/docs/cheatsheet",draft:!1,unlisted:!1,editUrl:"https://github.com/ouweiya/xstate-zh/tree/main/docs/cheatsheet.mdx",tags:[],version:"current",frontMatter:{title:"\u901f\u67e5\u8868"},sidebar:"tutorialSidebar",previous:{title:"\u6a21\u677f",permalink:"/xstate-zh/docs/templates"},next:{title:"TypeScript",permalink:"/xstate-zh/docs/typescript"}},i={},l=[{value:"\u5b89\u88c5 XState",id:"\u5b89\u88c5-xstate",level:2},{value:"\u521b\u5efa\u72b6\u6001\u673a",id:"\u521b\u5efa\u72b6\u6001\u673a",level:2},{value:"\u521b\u5efa Promise \u903b\u8f91",id:"\u521b\u5efa-promise-\u903b\u8f91",level:2},{value:"\u521b\u5efa Transition \u903b\u8f91",id:"\u521b\u5efa-transition-\u903b\u8f91",level:2},{value:"\u521b\u5efa Observable \u903b\u8f91",id:"\u521b\u5efa-observable-\u903b\u8f91",level:2},{value:"\u521b\u5efa\u56de\u8c03\u903b\u8f91",id:"\u521b\u5efa\u56de\u8c03\u903b\u8f91",level:2},{value:"\u7236\u72b6\u6001",id:"\u7236\u72b6\u6001",level:2},{value:"\u52a8\u4f5c",id:"\u52a8\u4f5c",level:2},{value:"\u5b88\u536b",id:"\u5b88\u536b",level:2},{value:"\u8c03\u7528 Actor",id:"\u8c03\u7528-actor",level:2},{value:"\u751f\u6210 Actor",id:"\u751f\u6210-actor",level:2},{value:"\u8f93\u5165\u548c\u8f93\u51fa",id:"\u8f93\u5165\u548c\u8f93\u51fa",level:2},{value:"\u8c03\u7528\u5e26\u6709\u8f93\u5165\u7684 Actor",id:"\u8c03\u7528\u5e26\u6709\u8f93\u5165\u7684-actor",level:2},{value:"\u7c7b\u578b",id:"\u7c7b\u578b",level:2}];function h(n){const e={a:"a",code:"code",h2:"h2",p:"p",pre:"pre",...(0,a.a)(),...n.components},{TabItem:t,Tabs:o}=e;return t||g("TabItem",!0),o||g("Tabs",!0),(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(e.p,{children:"\u4f7f\u7528\u6b64\u901f\u67e5\u8868\u5feb\u901f\u67e5\u627e XState v5 \u7684\u8bed\u6cd5\u3002"}),"\n",(0,s.jsx)(e.h2,{id:"\u5b89\u88c5-xstate",children:"\u5b89\u88c5 XState"}),"\n",(0,s.jsxs)(o,{children:[(0,s.jsx)(t,{value:"npm",label:"npm",children:(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-bash",children:"npm install xstate\n"})})}),(0,s.jsx)(t,{value:"pnpm",label:"pnpm",children:(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-bash",children:"pnpm install xstate\n"})})}),(0,s.jsx)(t,{value:"yarn",label:"yarn",children:(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-bash",children:"yarn add xstate\n"})})})]}),"\n",(0,s.jsxs)(e.p,{children:[(0,s.jsx)(e.a,{href:"/xstate-zh/docs/installation",children:"\u9605\u8bfb\u66f4\u591a\u5173\u4e8e\u5b89\u88c5 XState \u7684\u5185\u5bb9"}),"\u3002"]}),"\n",(0,s.jsx)(e.h2,{id:"\u521b\u5efa\u72b6\u6001\u673a",children:"\u521b\u5efa\u72b6\u6001\u673a"}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-ts",children:"import { setup, createActor, assign } from 'xstate';\n\nconst machine = setup({/* ... */})\n  .createMachine({\n    id: 'toggle',\n    initial: 'active',\n    context: { count: 0 },\n    states: {\n      active: {\n        entry: assign({\n          count: ({ context }) => context.count + 1,\n        }),\n        on: {\n          toggle: { target: 'inactive' },\n        },\n      },\n      inactive: {\n        on: {\n          toggle: { target: 'active' },\n        },\n      },\n    },\n  });\n\nconst actor = createActor(machine);\nactor.subscribe((snapshot) => {\n  console.log(snapshot.value);\n});\n\nactor.start();\n// logs 'active' with context { count: 1 }\n\nactor.send({ type: 'toggle' });\n// logs 'inactive' with context { count: 1 }\nactor.send({ type: 'toggle' });\n// logs 'active' with context { count: 2 }\nactor.send({ type: 'toggle' });\n// logs 'inactive' with context { count: 2 }\n"})}),"\n",(0,s.jsxs)(e.p,{children:[(0,s.jsx)(e.a,{href:"/xstate-zh/docs/actor-model",children:"\u9605\u8bfb\u66f4\u591a\u5173\u4e8e Actor \u6a21\u578b\u7684\u5185\u5bb9"}),"\u3002"]}),"\n",(0,s.jsx)(e.h2,{id:"\u521b\u5efa-promise-\u903b\u8f91",children:"\u521b\u5efa Promise \u903b\u8f91"}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-ts",children:"import { fromPromise, createActor } from 'xstate';\n\nconst promiseLogic = fromPromise(async () => {\n  const response = await fetch('https://dog.ceo/api/breeds/image/random');\n  const dog = await response.json();\n  return dog;\n});\n\nconst actor = createActor(promiseLogic);\n\nactor.subscribe((snapshot) => {\n  console.log(snapshot);\n});\n\nactor.start();\n// logs: {\n//   message: \"https://images.dog.ceo/breeds/kuvasz/n02104029_110.jpg\",\n//   status: \"success\"\n// }\n"})}),"\n",(0,s.jsxs)(e.p,{children:[(0,s.jsx)(e.a,{href:"/docs/actors#actors-as-promises",children:"\u9605\u8bfb\u66f4\u591a\u5173\u4e8e Promise Actor \u903b\u8f91\u7684\u5185\u5bb9"}),"\u3002"]}),"\n",(0,s.jsx)(e.h2,{id:"\u521b\u5efa-transition-\u903b\u8f91",children:"\u521b\u5efa Transition \u903b\u8f91"}),"\n",(0,s.jsx)(e.p,{children:"Transition \u51fd\u6570\u5c31\u50cf\u4e00\u4e2a reducer\u3002"}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-ts",children:"import { fromTransition, createActor } from 'xstate';\n\nconst transitionLogic = fromTransition(\n  (state, event) => {\n    switch (event.type) {\n      case 'inc':\n        return {\n          ...state,\n          count: state.count + 1,\n        };\n      default:\n        return state;\n    }\n  },\n  { count: 0 }, // initial state\n);\n\nconst actor = createActor(transitionLogic);\n\nactor.subscribe((snapshot) => {\n  console.log(snapshot);\n});\n\nactor.start();\n// logs { count: 0 }\n\nactor.send({ type: 'inc' });\n// logs { count: 1 }\nactor.send({ type: 'inc' });\n// logs { count: 2 }\n"})}),"\n",(0,s.jsxs)(e.p,{children:[(0,s.jsx)(e.a,{href:"/docs/actors#fromtransition",children:"\u9605\u8bfb\u66f4\u591a\u5173\u4e8e Transition Actor \u903b\u8f91\u7684\u5185\u5bb9"}),"\u3002"]}),"\n",(0,s.jsx)(e.h2,{id:"\u521b\u5efa-observable-\u903b\u8f91",children:"\u521b\u5efa Observable \u903b\u8f91"}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-ts",children:"import { fromObservable, createActor } from 'xstate';\nimport { interval } from 'rxjs';\n\nconst observableLogic = fromObservable(() => interval(1000));\n\nconst actor = createActor(observableLogic);\n\nactor.subscribe((snapshot) => {\n  console.log(snapshot);\n});\n\nactor.start();\n// logs 0, 1, 2, 3, 4, 5, ...\n// every second\n"})}),"\n",(0,s.jsxs)(e.p,{children:[(0,s.jsx)(e.a,{href:"/docs/actors#fromobservable",children:"\u9605\u8bfb\u66f4\u591a\u5173\u4e8e Observable Actor \u903b\u8f91\u7684\u5185\u5bb9"}),"\u3002"]}),"\n",(0,s.jsx)(e.h2,{id:"\u521b\u5efa\u56de\u8c03\u903b\u8f91",children:"\u521b\u5efa\u56de\u8c03\u903b\u8f91"}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-ts",children:"import { fromCallback, createActor } from 'xstate';\n\nconst callbackLogic = fromCallback(({ sendBack, receive }) => {\n  const i = setTimeout(() => {\n    sendBack({ type: 'timeout' });\n  }, 1000);\n\n  receive((event) => {\n    if (event.type === 'cancel') {\n      console.log('canceled');\n      clearTimeout(i);\n    }\n  });\n\n  return () => {\n    clearTimeout(i);\n  };\n});\n\nconst actor = createActor(callbackLogic);\n\nactor.start();\n\nactor.send({ type: 'cancel' });\n// logs 'canceled'\n"})}),"\n",(0,s.jsxs)(e.p,{children:[(0,s.jsx)(e.a,{href:"/docs/actors#fromcallback",children:"\u9605\u8bfb\u66f4\u591a\u5173\u4e8e\u56de\u8c03 Actor \u7684\u5185\u5bb9"}),"\u3002"]}),"\n",(0,s.jsx)(e.h2,{id:"\u7236\u72b6\u6001",children:"\u7236\u72b6\u6001"}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-ts",children:"import { setup, createActor } from 'xstate';\n\nconst machine = setup({/* ... */})\n  .createMachine({\n    id: 'parent',\n    initial: 'active',\n    states: {\n      active: {\n        initial: 'one',\n        states: {\n          one: {\n            on: {\n              NEXT: { target: 'two' }\n            }\n          },\n          two: {},\n        },\n        on: {\n          NEXT: { target: 'inactive' }\n        }\n      },\n      inactive: {},\n    },\n  });\n\nconst actor = createActor(machine);\n\nactor.subscribe((snapshot) => {\n  console.log(snapshot.value);\n});\n\nactor.start();\n// logs { active: 'one' }\n\nactor.send({ type: 'NEXT' });\n// logs { active: 'two' }\n\nactor.send({ type: 'NEXT' });\n// logs 'inactive'\n"})}),"\n",(0,s.jsxs)(e.p,{children:[(0,s.jsx)(e.a,{href:"/xstate-zh/docs/parent-states",children:"\u9605\u8bfb\u66f4\u591a\u5173\u4e8e\u7236\u72b6\u6001\u7684\u5185\u5bb9"}),"\u3002"]}),"\n",(0,s.jsx)(e.h2,{id:"\u52a8\u4f5c",children:"\u52a8\u4f5c"}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-ts",children:"import { setup, createActor } from 'xstate';\n\nconst machine = setup({\n  actions: {\n    activate: () => {/* ... */},\n    deactivate: () => {/* ... */},\n    notify: (_, params: { message: string }) => {/* ... */},\n  }\n}).createMachine({\n  id: 'toggle',\n  initial: 'active',\n  states: {\n    active: {\n      // highlight-next-line\n      entry: { type: 'activate' },\n      // highlight-next-line\n      exit: { type: 'deactivate' },\n      on: {\n        toggle: {\n          target: 'inactive',\n          // highlight-next-line\n          actions: [{ type: 'notify' }],\n        },\n      },\n    },\n    inactive: {\n      on: {\n        toggle: {\n          target: 'active',\n          // highlight-start\n          actions: [\n            // action with params\n            {\n              type: 'notify',\n              params: {\n                message: 'Some notification',\n              },\n            },\n          ],\n          // highlight-end\n        },\n      },\n    },\n  },\n});\n\nconst actor = createActor(\n  machine.provide({\n    actions: {\n      notify: (_, params) => {\n        console.log(params.message ?? 'Default message');\n      },\n      activate: () => {\n        console.log('Activating');\n      },\n      deactivate: () => {\n        console.log('Deactivating');\n      },\n    },\n  }),\n);\n\nactor.start();\n// logs 'Activating'\n\nactor.send({ type: 'toggle' });\n// logs 'Deactivating'\n// logs 'Default message'\n\nactor.send({ type: 'toggle' });\n// logs 'Some notification'\n// logs 'Activating'\n"})}),"\n",(0,s.jsxs)(e.p,{children:[(0,s.jsx)(e.a,{href:"/xstate-zh/docs/actions",children:"\u9605\u8bfb\u66f4\u591a\u5173\u4e8e\u52a8\u4f5c\u7684\u5185\u5bb9"}),"\u3002"]}),"\n",(0,s.jsx)(e.h2,{id:"\u5b88\u536b",children:"\u5b88\u536b"}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-ts",children:"import { setup, createActor } from 'xstate';\n\nconst machine = setup({\n  // highlight-start\n  guards: {\n    canBeToggled: ({ context }) => context.canActivate,\n    isAfterTime: (_, params) => {\n      const { time } = params;\n      const [hour, minute] = time.split(':');\n      const now = new Date();\n      return now.getHours() > hour && now.getMinutes() > minute;\n    },\n  },\n  // highlight-end\n  actions: {\n    notifyNotAllowed: () => {\n      console.log('Cannot be toggled');\n    },\n  },\n}).createMachine({\n  id: 'toggle',\n  initial: 'active',\n  context: {\n    canActivate: false,\n  },\n  states: {\n    inactive: {\n      on: {\n        toggle: [\n          {\n            target: 'active',\n            // highlight-next-line\n            guard: 'canBeToggled',\n          },\n          {\n            actions: 'notifyNotAllowed',\n          },\n        ],\n      },\n    },\n    active: {\n      on: {\n        toggle: {\n          // Guard with params\n          // highlight-next-line\n          guard: { type: 'isAfterTime', params: { time: '16:00' } },\n          target: 'inactive',\n        },\n      },\n      // ...\n    },\n  },\n});\n\nconst actor = createActor(machine);\n\nactor.start();\n// logs 'Cannot be toggled'\n"})}),"\n",(0,s.jsxs)(e.p,{children:[(0,s.jsx)(e.a,{href:"/xstate-zh/docs/guards",children:"\u9605\u8bfb\u66f4\u591a\u5173\u4e8e\u5b88\u536b\u7684\u5185\u5bb9"}),"\u3002"]}),"\n",(0,s.jsx)(e.h2,{id:"\u8c03\u7528-actor",children:"\u8c03\u7528 Actor"}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-ts",children:"import { setup, fromPromise, createActor, assign } from 'xstate';\n\nconst loadUserLogic = fromPromise(async () => {\n  const response = await fetch('https://jsonplaceholder.typicode.com/users/1');\n  const user = await response.json();\n  return user;\n});\n\nconst machine = setup({\n  // highlight-next-line\n  actors: { loadUserLogic }\n}).createMachine({\n  id: 'toggle',\n  initial: 'loading',\n  context: {\n    user: undefined,\n  },\n  states: {\n    loading: {\n      // highlight-start\n      invoke: {\n        id: 'loadUser',\n        src: 'loadUserLogic',\n        onDone: {\n          target: 'doSomethingWithUser',\n          actions: assign({\n            user: ({ event }) => event.output,\n          }),\n        },\n        onError: {\n          target: 'failure',\n          actions: ({ event }) => {\n            console.log(event.error)\n          }\n        }\n      },\n      // highlight-end\n    },\n    doSomethingWithUser: {\n      // ...\n    },\n    failure: {\n      // ...\n    },\n  },\n});\n\nconst actor = createActor(machine);\n\nactor.subscribe((snapshot) => {\n  console.log(snapshot.context.user);\n});\n\nactor.start();\n// eventually logs:\n// { id: 1, name: 'Leanne Graham', ... }\n"})}),"\n",(0,s.jsxs)(e.p,{children:[(0,s.jsx)(e.a,{href:"/xstate-zh/docs/invoke",children:"\u9605\u8bfb\u66f4\u591a\u5173\u4e8e\u8c03\u7528 Actor \u7684\u5185\u5bb9"}),"\u3002"]}),"\n",(0,s.jsx)(e.h2,{id:"\u751f\u6210-actor",children:"\u751f\u6210 Actor"}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-ts",children:"import { setup, fromPromise, createActor, assign } from 'xstate';\n\nconst loadUserLogic = fromPromise(async () => {\n  const response = await fetch('https://jsonplaceholder.typicode.com/users/1');\n  const user = await response.json();\n  return user;\n});\n\nconst machine = setup({\n  actors: {\n    loadUserLogic\n  }\n}).createMachine({\n  context: {\n    userRef: undefined,\n  },\n  on: {\n    loadUser: {\n      actions: assign({\n        // highlight-start\n        userRef: ({ spawn }) => spawn('loadUserLogic'),\n        // highlight-end\n      }),\n    },\n  },\n});\n\nconst actor = createActor(machine);\nactor.subscribe((snapshot) => {\n  const { userRef } = snapshot.context;\n  console.log(userRef?.getSnapshot());\n});\nactor.start();\n\nactor.send({ type: 'loadUser' });\n// eventually logs:\n// { id: 1, name: 'Leanne Graham', ... }\n"})}),"\n",(0,s.jsxs)(e.p,{children:[(0,s.jsx)(e.a,{href:"/xstate-zh/docs/spawn",children:"\u9605\u8bfb\u66f4\u591a\u5173\u4e8e\u751f\u6210 Actor \u7684\u5185\u5bb9"}),"\u3002"]}),"\n",(0,s.jsx)(e.h2,{id:"\u8f93\u5165\u548c\u8f93\u51fa",children:"\u8f93\u5165\u548c\u8f93\u51fa"}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-ts",children:"import { setup, createActor } from 'xstate';\n\nconst greetMachine = setup({\n  types: {\n    context: {} as { message: string },\n    input: {} as { name: string },\n  }\n}).createMachine({\n  // highlight-start\n  context: ({ input }) => ({\n    message: `Hello, ${input.name}`,\n  }),\n  // highlight-end\n  entry: ({ context }) => {\n    console.log(context.message);\n  },\n});\n\nconst actor = createActor(greetMachine, {\n  // highlight-start\n  input: {\n    name: 'David',\n  },\n  // highlight-end\n});\n\nactor.start();\n// logs 'Hello, David'\n"})}),"\n",(0,s.jsxs)(e.p,{children:[(0,s.jsx)(e.a,{href:"/xstate-zh/docs/input",children:"\u9605\u8bfb\u66f4\u591a\u5173\u4e8e\u8f93\u5165\u7684\u5185\u5bb9"}),"\u3002"]}),"\n",(0,s.jsx)(e.h2,{id:"\u8c03\u7528\u5e26\u6709\u8f93\u5165\u7684-actor",children:"\u8c03\u7528\u5e26\u6709\u8f93\u5165\u7684 Actor"}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-ts",children:"import { setup, createActor, fromPromise } from 'xstate';\n\nconst loadUserLogic = fromPromise(async ({ input }) => {\n  const response = await fetch(\n    `https://jsonplaceholder.typicode.com/users/${input.id}`,\n  );\n  const user = await response.json();\n  return user;\n});\n\nconst machine = setup({\n  actors: {\n    loadUserLogic\n  }\n}).createMachine({\n  initial: 'loading user',\n  states: {\n    'loading user': {\n      invoke: {\n        id: 'loadUser',\n        src: 'loadUserLogic',\n        // highlight-start\n        input: {\n          id: 3,\n        },\n        // highlight-end\n        onDone: {\n          actions: ({ event }) => {\n            console.log(event.output);\n          },\n        },\n      },\n    },\n  },\n});\n\nconst actor = createActor(machine);\n\nactor.start();\n// eventually logs:\n// { id: 3, name: 'Clementine Bauch', ... }\n"})}),"\n",(0,s.jsxs)(e.p,{children:[(0,s.jsx)(e.a,{href:"/xstate-zh/docs/input#invoking-actors-with-input",children:"\u9605\u8bfb\u66f4\u591a\u5173\u4e8e\u5e26\u6709\u8f93\u5165\u7684\u8c03\u7528 Actor \u7684\u5185\u5bb9"}),"\u3002"]}),"\n",(0,s.jsx)(e.h2,{id:"\u7c7b\u578b",children:"\u7c7b\u578b"}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-ts",children:"import { setup, fromPromise } from 'xstate';\n\nconst promiseLogic = fromPromise(async () => {\n  /* ... */\n});\n\nconst machine = setup({\n  types: {\n    context: {} as {\n      count: number;\n    };\n    events: {} as\n      | { type: 'inc'; }\n      | { type: 'dec' }\n      | { type: 'incBy'; amount: number };\n    actions: {} as\n      | { type: 'notify'; params: { message: string } }\n      | { type: 'handleChange' };\n    guards: {} as\n      | { type: 'canBeToggled' }\n      | { type: 'isAfterTime'; params: { time: string } };\n    children: {} as {\n      promise1: 'someSrc';\n      promise2: 'someSrc';\n    };\n    delays: 'shortTimeout' | 'longTimeout';\n    tags: 'tag1' | 'tag2';\n    input: number;\n    output: string;\n  },\n  actors: {\n    promiseLogic\n  }\n}).createMachine({\n  // ...\n});\n"})})]})}function d(n={}){const{wrapper:e}={...(0,a.a)(),...n.components};return e?(0,s.jsx)(e,{...n,children:(0,s.jsx)(h,{...n})}):h(n)}function g(n,e){throw new Error("Expected "+(e?"component":"object")+" `"+n+"` to be defined: you likely forgot to import, pass, or provide it.")}},11151:(n,e,t)=>{t.d(e,{Z:()=>r,a:()=>c});var s=t(67294);const a={},o=s.createContext(a);function c(n){const e=s.useContext(o);return s.useMemo((function(){return"function"==typeof n?n(e):{...e,...n}}),[e,n])}function r(n){let e;return e=n.disableParentContext?"function"==typeof n.components?n.components(a):n.components||a:c(n.components),s.createElement(o.Provider,{value:e},n.children)}}}]);