"use strict";(self.webpackChunkstately_docs=self.webpackChunkstately_docs||[]).push([[9793],{83940:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>r,contentTitle:()=>h,default:()=>d,frontMatter:()=>i,metadata:()=>c,toc:()=>o});var s=n(85893),a=n(11151);const i={title:"@xstate/graph"},h=void 0,c={id:"xstate-graph",title:"@xstate/graph",description:"The @xstate/graph package contains graph algorithms and utilities for XState machines.",source:"@site/docs/xstate-graph.mdx",sourceDirName:".",slug:"/xstate-graph",permalink:"/xstate-zh/docs/xstate-graph",draft:!1,unlisted:!1,editUrl:"https://github.com/statelyai/docs/tree/main/docs/xstate-graph.mdx",tags:[],version:"current",frontMatter:{title:"@xstate/graph"},sidebar:"tutorialSidebar",previous:{title:"@xstate/svelte",permalink:"/xstate-zh/docs/xstate-svelte"},next:{title:"@xstate/test",permalink:"/xstate-zh/docs/xstate-test"}},r={},o=[{value:"Quick start",id:"quick-start",level:2},{value:"API",id:"api",level:2},{value:"<code>getShortestPaths(machine, options?)</code>",id:"getshortestpathsmachine-options",level:3},{value:"Arguments",id:"arguments",level:4},{value:"Example",id:"example",level:4},{value:"<code>getSimplePaths(machine, options?)</code>",id:"getsimplepathsmachine-options",level:3},{value:"Example",id:"example-1",level:4},{value:"<code>getPathFromEvents(machine, events)</code>",id:"getpathfromeventsmachine-events",level:3},{value:"<code>toDirectedGraph(machine)</code>",id:"todirectedgraphmachine",level:3},{value:"Example",id:"example-2",level:4},{value:"Options",id:"options",level:2},{value:"Examples",id:"examples",level:4}];function l(e){const t={a:"a",code:"code",h2:"h2",h3:"h3",h4:"h4",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,a.a)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsxs)(t.p,{children:["The ",(0,s.jsx)(t.a,{href:"https://github.com/statelyai/xstate/tree/main/packages/xstate-graph",children:"@xstate/graph package"})," contains graph algorithms and utilities for XState machines."]}),"\n",(0,s.jsx)(t.h2,{id:"quick-start",children:"Quick start"}),"\n",(0,s.jsxs)(t.ol,{children:["\n",(0,s.jsxs)(t.li,{children:["Install ",(0,s.jsx)(t.code,{children:"xstate"})," and ",(0,s.jsx)(t.code,{children:"@xstate/graph"}),":"]}),"\n"]}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-bash",children:"npm install xstate @xstate/graph\n"})}),"\n",(0,s.jsxs)(t.ol,{start:"2",children:["\n",(0,s.jsx)(t.li,{children:"Import the graph utilities. Example:"}),"\n"]}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-js",children:"import { createMachine } from 'xstate';\nimport { getSimplePaths } from '@xstate/graph';\n\nconst machine = createMachine(/* ... */);\nconst paths = getSimplePaths(machine);\n"})}),"\n",(0,s.jsx)(t.h2,{id:"api",children:"API"}),"\n",(0,s.jsx)(t.h3,{id:"getshortestpathsmachine-options",children:(0,s.jsx)(t.code,{children:"getShortestPaths(machine, options?)"})}),"\n",(0,s.jsx)(t.h4,{id:"arguments",children:"Arguments"}),"\n",(0,s.jsxs)(t.ul,{children:["\n",(0,s.jsxs)(t.li,{children:[(0,s.jsx)(t.code,{children:"machine"})," - the ",(0,s.jsx)(t.a,{href:"https://xstate.js.org/docs/guides/machines.html",children:(0,s.jsx)(t.code,{children:"Machine"})})," to traverse"]}),"\n",(0,s.jsxs)(t.li,{children:[(0,s.jsx)(t.code,{children:"options"})," (optional) - ",(0,s.jsx)(t.a,{href:"/#options",children:"options"})," that customize how the algorithm will traverse the machine"]}),"\n"]}),"\n",(0,s.jsxs)(t.p,{children:["Returns the ",(0,s.jsx)(t.a,{href:"https://en.wikipedia.org/wiki/Dijkstra%27s_algorithm",children:"shortest paths (Dijkstra's algorithm)"})," of a ",(0,s.jsx)(t.a,{href:"https://xstate.js.org/docs/guides/machines.html",children:"machine"})," from the initial state to every other state as a mapped object, where the:"]}),"\n",(0,s.jsxs)(t.ul,{children:["\n",(0,s.jsxs)(t.li,{children:[(0,s.jsx)(t.strong,{children:"key"})," is the stringified state"]}),"\n",(0,s.jsxs)(t.li,{children:[(0,s.jsx)(t.strong,{children:"value"})," is an object with the properties:","\n",(0,s.jsxs)(t.ul,{children:["\n",(0,s.jsxs)(t.li,{children:[(0,s.jsx)(t.code,{children:"state"})," - the target ",(0,s.jsx)(t.a,{href:"https://xstate.js.org/docs/guides/states.html",children:(0,s.jsx)(t.code,{children:"State"})})]}),"\n",(0,s.jsxs)(t.li,{children:[(0,s.jsx)(t.code,{children:"path"})," - the shortest path to get from the initial state to the target state"]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(t.p,{children:["The ",(0,s.jsx)(t.code,{children:"path"})," is an array of segments, where each segment is an object with the properties:"]}),"\n",(0,s.jsxs)(t.ul,{children:["\n",(0,s.jsxs)(t.li,{children:[(0,s.jsx)(t.code,{children:"state"})," - the ",(0,s.jsx)(t.a,{href:"https://xstate.js.org/docs/guides/states.html",children:(0,s.jsx)(t.code,{children:"State"})})," of the segment"]}),"\n",(0,s.jsxs)(t.li,{children:[(0,s.jsx)(t.code,{children:"weight"})," - the total ",(0,s.jsx)(t.a,{href:"https://en.wikipedia.org/wiki/Graph_(discrete_mathematics)#Weighted_graph",children:"weight"})," of the path","\n",(0,s.jsxs)(t.ul,{children:["\n",(0,s.jsx)(t.li,{children:"Currently, each transition from one state to another has a weight of 1. This will be customizable in the future."}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(t.li,{children:[(0,s.jsx)(t.code,{children:"event"})," - the event object that transitions the ",(0,s.jsx)(t.code,{children:"machine"})," from the state to the next state in the path"]}),"\n"]}),"\n",(0,s.jsx)(t.p,{children:"Every path starts with the initial state."}),"\n",(0,s.jsx)(t.p,{children:"The overall object structure looks like this:"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-json5",children:'{\n  "<SERIALIZED STATE>": {\n    "state": State { ... },\n    "path": [\n      {\n        "state": State { ... },\n        "event": { "type": "<event.type>", "<PROP>": "<event.PROP>" }\n      },\n      {\n        "state": State { ... },\n        "event": { "type": "<event.type>", "<PROP>": "<event.PROP>" }\n      },\n      ...\n    ]\n  },\n  ...\n}\n'})}),"\n",(0,s.jsx)(t.h4,{id:"example",children:"Example"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-js",children:"import { createMachine } from 'xstate';\nimport { getShortestPaths } from '@xstate/graph';\n\nconst feedbackMachine = createMachine({\n  id: 'feedback',\n  initial: 'question',\n  states: {\n    question: {\n      on: {\n        CLICK_GOOD: 'thanks',\n        CLICK_BAD: 'form',\n        CLOSE: 'closed',\n        ESC: 'closed',\n      },\n    },\n    form: {\n      on: {\n        SUBMIT: 'thanks',\n        CLOSE: 'closed',\n        ESC: 'closed',\n      },\n    },\n    thanks: {\n      on: {\n        CLOSE: 'closed',\n        ESC: 'closed',\n      },\n    },\n    closed: {\n      type: 'final',\n    },\n  },\n});\n\nconst shortestPaths = getShortestPaths(feedbackMachine);\n\nconsole.log(shortestPaths);\n// => {\n//   '\"question\"': {\n//     state: State { value: 'question', context: undefined },\n//     weight: 0,\n//     path: []\n//   },\n//   '\"thanks\"': {\n//     state: State { value: 'thanks', context: undefined },\n//     weight: 1,\n//     path: [\n//       {\n//         state: State { value: 'question', context: undefined },\n//         event: { type: 'CLICK_GOOD' }\n//       }\n//     ]\n//   },\n//   '\"form\"': {\n//     state: State { value: 'form', context: undefined },\n//     weight: 1,\n//     path: [\n//       {\n//         state: State { value: 'question', context: undefined },\n//         event: { type: 'CLICK_BAD' }\n//       }\n//     ]\n//   },\n//   '\"closed\"': {\n//     state: State { value: 'closed', context: undefined },\n//     weight: 1,\n//     path: [\n//       {\n//         state: State { value: 'question', context: undefined },\n//         event: { type: 'CLOSE' }\n//       }\n//     ]\n//   }\n// };\n"})}),"\n",(0,s.jsx)(t.h3,{id:"getsimplepathsmachine-options",children:(0,s.jsx)(t.code,{children:"getSimplePaths(machine, options?)"})}),"\n",(0,s.jsx)(t.p,{children:"Arguments:"}),"\n",(0,s.jsxs)(t.ul,{children:["\n",(0,s.jsxs)(t.li,{children:[(0,s.jsx)(t.code,{children:"machine"})," - the ",(0,s.jsx)(t.a,{href:"https://xstate.js.org/docs/guides/machines.html",children:(0,s.jsx)(t.code,{children:"Machine"})})," to traverse"]}),"\n",(0,s.jsxs)(t.li,{children:[(0,s.jsx)(t.code,{children:"options"})," (optional) - ",(0,s.jsx)(t.a,{href:"/#options",children:"options"})," that customize how the algorithm will traverse the machine"]}),"\n"]}),"\n",(0,s.jsxs)(t.p,{children:["Returns the ",(0,s.jsx)(t.a,{href:"https://en.wikipedia.org/wiki/Path_(graph_theory)#Definitions",children:"simple paths"})," of a ",(0,s.jsx)(t.a,{href:"https://xstate.js.org/docs/guides/machines.html",children:"machine"})," as a mapped object, where the:"]}),"\n",(0,s.jsxs)(t.ul,{children:["\n",(0,s.jsxs)(t.li,{children:[(0,s.jsx)(t.strong,{children:"key"})," is the stringified state"]}),"\n",(0,s.jsxs)(t.li,{children:[(0,s.jsx)(t.strong,{children:"value"})," is an object with the properties:","\n",(0,s.jsxs)(t.ul,{children:["\n",(0,s.jsxs)(t.li,{children:[(0,s.jsx)(t.code,{children:"state"})," - the target ",(0,s.jsx)(t.a,{href:"https://xstate.js.org/docs/guides/states.html",children:(0,s.jsx)(t.code,{children:"State"})})]}),"\n",(0,s.jsxs)(t.li,{children:[(0,s.jsx)(t.code,{children:"paths"})," - the array of paths to get from the initial state to the target state"]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(t.p,{children:["Each ",(0,s.jsx)(t.code,{children:"path"})," in ",(0,s.jsx)(t.code,{children:"paths"})," is an array of segments, where each segment of the path is an object with the properties:"]}),"\n",(0,s.jsxs)(t.ul,{children:["\n",(0,s.jsxs)(t.li,{children:[(0,s.jsx)(t.code,{children:"state"})," - the ",(0,s.jsx)(t.a,{href:"https://xstate.js.org/docs/guides/states.html",children:(0,s.jsx)(t.code,{children:"State"})})," of the segment"]}),"\n",(0,s.jsxs)(t.li,{children:[(0,s.jsx)(t.code,{children:"event"})," - the event object that transitions the ",(0,s.jsx)(t.code,{children:"machine"})," from the state to the next state in the path"]}),"\n"]}),"\n",(0,s.jsx)(t.p,{children:"Every path starts with the initial state."}),"\n",(0,s.jsx)(t.p,{children:"The overall object structure looks like this:"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-json5",children:'{\n  "<SERIALIZED STATE>": {\n    "state": State { ... },\n    "paths": [\n      [\n        {\n          "state": State { ... },\n          "event": { "type": "<event.type>", "<PROP>": "<event.PROP>" }\n        },\n        {\n          "state": State { ... },\n          "event": { "type": "<event.type>", "<PROP>": "<event.PROP>" }\n        },\n        ...\n      ],\n      ...\n    ]\n  },\n  ...\n}\n'})}),"\n",(0,s.jsx)(t.h4,{id:"example-1",children:"Example"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-js",children:"import { createMachine } from 'xstate';\nimport { getSimplePaths } from '@xstate/graph';\n\nconst feedbackMachine = createMachine({\n  id: 'feedback',\n  initial: 'question',\n  states: {\n    question: {\n      on: {\n        CLICK_GOOD: 'thanks',\n        CLICK_BAD: 'form',\n        CLOSE: 'closed',\n        ESC: 'closed',\n      },\n    },\n    form: {\n      on: {\n        SUBMIT: 'thanks',\n        CLOSE: 'closed',\n        ESC: 'closed',\n      },\n    },\n    thanks: {\n      on: {\n        CLOSE: 'closed',\n        ESC: 'closed',\n      },\n    },\n    closed: {\n      type: 'final',\n    },\n  },\n});\n\nconst simplePaths = getSimplePaths(feedbackMachine);\n\nconsole.log(simplePaths);\n// => {\n//   '\"question\"': {\n//     state: { value: 'question', context: undefined },\n//     paths: [[]]\n//   },\n//   '\"thanks\"': {\n//     state: { value: 'thanks', context: undefined },\n//     paths: [\n//       [\n//         {\n//           state: { value: 'question', context: undefined },\n//           event: { type: 'CLICK_GOOD' }\n//         }\n//       ],\n//       [\n//         {\n//           state: { value: 'question', context: undefined },\n//           event: { type: 'CLICK_BAD' }\n//         },\n//         {\n//           state: { value: 'form', context: undefined },\n//           event: { type: 'SUBMIT' }\n//         }\n//       ]\n//     ]\n//   },\n//   '\"closed\"': {\n//     state: { value: 'closed', context: undefined },\n//     paths: [\n//       [\n//         {\n//           state: { value: 'question', context: undefined },\n//           event: { type: 'CLICK_GOOD' }\n//         },\n//         {\n//           state: { value: 'thanks', context: undefined },\n//           event: { type: 'CLOSE' }\n//         }\n//       ],\n//       [\n//         {\n//           state: { value: 'question', context: undefined },\n//           event: { type: 'CLICK_GOOD' }\n//         },\n//         {\n//           state: { value: 'thanks', context: undefined },\n//           event: { type: 'ESC' }\n//         }\n//       ],\n//       ...\n//     ]\n//   },\n//   ...\n// };\n"})}),"\n",(0,s.jsx)(t.h3,{id:"getpathfromeventsmachine-events",children:(0,s.jsx)(t.code,{children:"getPathFromEvents(machine, events)"})}),"\n",(0,s.jsx)(t.p,{children:"Arguments:"}),"\n",(0,s.jsxs)(t.ul,{children:["\n",(0,s.jsxs)(t.li,{children:[(0,s.jsx)(t.code,{children:"machine"})," - the ",(0,s.jsx)(t.a,{href:"https://xstate.js.org/docs/guides/machines.html",children:(0,s.jsx)(t.code,{children:"Machine"})})," to traverse"]}),"\n",(0,s.jsxs)(t.li,{children:[(0,s.jsx)(t.code,{children:"events"})," - the sequence of events to generate a path from"]}),"\n"]}),"\n",(0,s.jsx)(t.p,{children:"Returns a path object with the following keys:"}),"\n",(0,s.jsxs)(t.ul,{children:["\n",(0,s.jsxs)(t.li,{children:[(0,s.jsx)(t.code,{children:"state"})," - the target ",(0,s.jsx)(t.a,{href:"https://xstate.js.org/docs/guides/states.html",children:(0,s.jsx)(t.code,{children:"State"})})]}),"\n",(0,s.jsxs)(t.li,{children:[(0,s.jsx)(t.code,{children:"segments"})," - an array of objects with the following shape:","\n",(0,s.jsxs)(t.ul,{children:["\n",(0,s.jsxs)(t.li,{children:[(0,s.jsx)(t.code,{children:"state"})," - the ",(0,s.jsx)(t.a,{href:"https://xstate.js.org/docs/guides/states.html",children:(0,s.jsx)(t.code,{children:"State"})})," of the segment"]}),"\n",(0,s.jsxs)(t.li,{children:[(0,s.jsx)(t.code,{children:"event"})," - the event object that transitions the ",(0,s.jsx)(t.code,{children:"machine"})," from the state to the next state in the path"]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-js",children:"import { createMachine } from 'xstate';\nimport { getSimplePaths } from '@xstate/graph';\n\nconst feedbackMachine = createMachine({\n  id: 'feedback',\n  initial: 'question',\n  states: {\n    question: {\n      on: {\n        CLICK_GOOD: 'thanks',\n        CLICK_BAD: 'form',\n        CLOSE: 'closed',\n        ESC: 'closed',\n      },\n    },\n    form: {\n      on: {\n        SUBMIT: 'thanks',\n        CLOSE: 'closed',\n        ESC: 'closed',\n      },\n    },\n    thanks: {\n      on: {\n        CLOSE: 'closed',\n        ESC: 'closed',\n      },\n    },\n    closed: {\n      type: 'final',\n    },\n  },\n});\n\nconst path = getPathFromEvents(feedbackMachine, [\n  { type: 'CLICK_GOOD' },\n  { type: 'SUBMIT' },\n  { type: 'CLOSE' },\n]);\n\nconsole.log(path);\n// => {\n//   state: { value: 'closed' },\n//   segments: [\n//     {\n//       state: { value: 'question' },\n//       event: { type: 'CLICK_GOOD' },\n//     },\n//     {\n//       state: { value: 'form' },\n//       event: { type: 'SUBMIT' },\n//     },\n//     {\n//       state: { value: 'thanks' },\n//       event: { type: 'CLOSE' },\n//     },\n//   ],\n// }\n"})}),"\n",(0,s.jsx)(t.h3,{id:"todirectedgraphmachine",children:(0,s.jsx)(t.code,{children:"toDirectedGraph(machine)"})}),"\n",(0,s.jsxs)(t.p,{children:["Converts a ",(0,s.jsx)(t.code,{children:"machine"})," to a directed graph structure."]}),"\n",(0,s.jsxs)(t.table,{children:[(0,s.jsx)(t.thead,{children:(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.th,{children:"Argument"}),(0,s.jsx)(t.th,{children:"Type"}),(0,s.jsx)(t.th,{children:"Description"})]})}),(0,s.jsx)(t.tbody,{children:(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:(0,s.jsx)(t.code,{children:"machine"})}),(0,s.jsxs)(t.td,{children:["XState Machine created by ",(0,s.jsx)(t.code,{children:"createMachine(...)"})]}),(0,s.jsx)(t.td,{children:"The machine to convert to a directed graph structure"})]})})]}),"\n",(0,s.jsx)(t.h4,{id:"example-2",children:"Example"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-js",children:"import { toDirectedGraph } from '@xstate/graph';\n\nconst machine = createMachine({/* ... */});\n\nconst digraph = toDirectedGraph(machine);\n\n// returns an object with this structure:\n{\n  id: '...',\n  stateNode: /* StateNode */,\n  children: [\n    { id: '...', children: [/* ... */], edges: [/* ... */] },\n    { id: '...', /* ... */ },\n    // ...\n  ],\n  edges: [\n    { source: /* ... */, target: /* ... */, transition: /* ... */ }\n    // ...\n  ]\n}\n"})}),"\n",(0,s.jsx)(t.h2,{id:"options",children:"Options"}),"\n",(0,s.jsxs)(t.p,{children:["Options can be passed into ",(0,s.jsx)(t.code,{children:"getShortestPaths"})," or ",(0,s.jsx)(t.code,{children:"getSimplePaths"})," to customize how the graph represented by the machine should be traversed:"]}),"\n",(0,s.jsxs)(t.ul,{children:["\n",(0,s.jsxs)(t.li,{children:[(0,s.jsx)(t.code,{children:"events"})," - a mapping of event types to an array of event objects to be used for those events"]}),"\n",(0,s.jsxs)(t.li,{children:[(0,s.jsx)(t.code,{children:"filter"})," - a function that determines whether a ",(0,s.jsx)(t.code,{children:"state"})," should be traversed. If ",(0,s.jsx)(t.code,{children:"false"}),', the traversal algorithm(s) will assume the state was "seen" and ignore traversing it.']}),"\n"]}),"\n",(0,s.jsx)(t.h4,{id:"examples",children:"Examples"}),"\n",(0,s.jsxs)(t.p,{children:["In the below example, the ",(0,s.jsx)(t.code,{children:"INC"})," event is expanded to include two possible events, with ",(0,s.jsx)(t.code,{children:"value: 1"})," and ",(0,s.jsx)(t.code,{children:"value: 2"})," as the payload. It also ensures that the ",(0,s.jsx)(t.code,{children:"state.context.count <= 5"}),"; otherwise, this machine would be traversed infinitely."]}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-js",children:"const counterMachine = createMachine({\n  id: 'counter',\n  initial: 'active',\n  context: { count: 0 },\n  states: {\n    active: {\n      on: {\n        INC: {\n          actions: assign({ count: (ctx, e) => ctx.count + e.value }),\n        },\n      },\n    },\n  },\n});\n\nconst shortestPaths = getShortestPaths(counterMachine, {\n  events: {\n    INC: [\n      { type: 'INC', value: 1 },\n      { type: 'INC', value: 2 },\n    ],\n  },\n  filter: (state) => state.context.count <= 5,\n});\n\nconsole.log(shortestPaths);\n// => {\n//   '\"active\" | {\"count\":0}': {\n//     state: { value: 'active', context: { count: 0 } },\n//     weight: 0,\n//     path: []\n//   },\n//   '\"active\" | {\"count\":1}': {\n//     state: { value: 'active', context: { count: 1 } },\n//     weight: 1,\n//     path: [\n//       {\n//         state: { value: 'active', context: { count: 0 } },\n//         event: { type: 'INC', value: 1 }\n//       }\n//     ]\n//   },\n//   '\"active\" | {\"count\":2}': {\n//     state: { value: 'active', context: { count: 2 } },\n//     weight: 1,\n//     path: [\n//       {\n//         state: { value: 'active', context: { count: 0 } },\n//         event: { type: 'INC', value: 2 }\n//       }\n//     ]\n//   },\n//   '\"active\" | {\"count\":3}': {\n//     state: { value: 'active', context: { count: 3 } },\n//     weight: 2,\n//     path: [\n//       {\n//         state: { value: 'active', context: { count: 0 } },\n//         event: { type: 'INC', value: 1 }\n//       },\n//       {\n//         state: { value: 'active', context: { count: 1 } },\n//         event: { type: 'INC', value: 2 }\n//       }\n//     ]\n//   },\n//   ...\n// };\n"})})]})}function d(e={}){const{wrapper:t}={...(0,a.a)(),...e.components};return t?(0,s.jsx)(t,{...e,children:(0,s.jsx)(l,{...e})}):l(e)}},11151:(e,t,n)=>{n.d(t,{Z:()=>c,a:()=>h});var s=n(67294);const a={},i=s.createContext(a);function h(e){const t=s.useContext(i);return s.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function c(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:h(e.components),s.createElement(i.Provider,{value:t},e.children)}}}]);