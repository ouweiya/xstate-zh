"use strict";(self.webpackChunkstately_docs=self.webpackChunkstately_docs||[]).push([[6790],{4324:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>i,contentTitle:()=>o,default:()=>d,frontMatter:()=>a,metadata:()=>r,toc:()=>l});var s=t(85893),c=t(11151);const a={title:"@xstate/react"},o=void 0,r={id:"xstate-react",title:"@xstate/react",description:"The @xstate/react package contains hooks and helper functions for using XState with React.",source:"@site/docs/xstate-react.mdx",sourceDirName:".",slug:"/xstate-react",permalink:"/xstate-zh/docs/xstate-react",draft:!1,unlisted:!1,editUrl:"https://github.com/statelyai/docs/tree/main/docs/xstate-react.mdx",tags:[],version:"current",frontMatter:{title:"@xstate/react"},sidebar:"tutorialSidebar",previous:{title:"@xstate/store",permalink:"/xstate-zh/docs/xstate-store"},next:{title:"@xstate/vue",permalink:"/xstate-zh/docs/xstate-vue"}},i={},l=[{value:"Templates",id:"templates",level:2},{value:"Installation",id:"installation",level:2},{value:"Examples",id:"examples",level:2},{value:"API",id:"api",level:2},{value:"<code>useActor(actorLogic, options?)</code>",id:"useactoractorlogic-options",level:3},{value:"Arguments",id:"arguments",level:4},{value:"Examples",id:"examples-1",level:4},{value:"<code>useMachine(machine, options?)</code>",id:"usemachinemachine-options",level:3},{value:"Arguments",id:"arguments-1",level:4},{value:"Examples",id:"examples-2",level:4},{value:"<code>useActorRef(machine, options?)</code>",id:"useactorrefmachine-options",level:3},{value:"Arguments",id:"arguments-2",level:4},{value:"<code>useSelector(actorRef, selector, compare?, getSnapshot?)</code>",id:"useselectoractorref-selector-compare-getsnapshot",level:3},{value:"Arguments",id:"arguments-3",level:4},{value:"Examples",id:"examples-3",level:4},{value:"<code>createActorContext(logic)</code>",id:"createactorcontextlogic",level:3},{value:"Arguments",id:"arguments-4",level:4},{value:"Shallow comparison",id:"shallow-comparison",level:3},{value:"Configuring machines",id:"configuring-machines",level:2},{value:"Input",id:"input",level:2},{value:"Matching states",id:"matching-states",level:2},{value:"Persisted and rehydrated State",id:"persisted-and-rehydrated-state",level:2},{value:"Actor refs",id:"actor-refs",level:2},{value:"Resources",id:"resources",level:2}];function h(e){const n={a:"a",admonition:"admonition",code:"code",em:"em",h2:"h2",h3:"h3",h4:"h4",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,c.a)(),...e.components},{TabItem:t,Tabs:a}=n;return t||u("TabItem",!0),a||u("Tabs",!0),(0,s.jsxs)(s.Fragment,{children:[(0,s.jsxs)(n.p,{children:["The ",(0,s.jsx)(n.a,{href:"https://github.com/statelyai/xstate/tree/main/packages/xstate-react",children:"@xstate/react package"})," contains hooks and helper functions for using ",(0,s.jsx)(n.a,{href:"https://github.com/statelyai/xstate",children:"XState"})," with ",(0,s.jsx)(n.a,{href:"https://github.com/facebook/react/",children:"React"}),"."]}),"\n",(0,s.jsx)(n.h2,{id:"templates",children:"Templates"}),"\n",(0,s.jsx)(n.p,{children:"Use the following templates to get started quickly with XState and React:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.a,{href:"https://codesandbox.io/p/devbox/github/statelyai/xstate/tree/main/templates/react-ts",children:"XState React template (CodeSandbox)"})}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.a,{href:"https://stackblitz.com/github/statelyai/xstate/tree/main/templates/react-ts?file=%2Fsrc%2FfeedbackMachine.ts",children:"XState React template (StackBlitz)"})}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"installation",children:"Installation"}),"\n",(0,s.jsxs)(n.p,{children:["Install the latest versions of both ",(0,s.jsx)(n.code,{children:"xstate"})," and ",(0,s.jsx)(n.code,{children:"@xstate/react"}),". ",(0,s.jsx)(n.code,{children:"xstate"})," is a peer dependency of ",(0,s.jsx)(n.code,{children:"@xstate/react"}),"."]}),"\n",(0,s.jsxs)(a,{children:[(0,s.jsx)(t,{value:"npm",label:"npm",children:(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"npm install xstate @xstate/react\n"})})}),(0,s.jsx)(t,{value:"pnpm",label:"pnpm",children:(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"pnpm install xstate @xstate/react\n"})})}),(0,s.jsx)(t,{value:"yarn",label:"yarn",children:(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"yarn add xstate @xstate/react\n"})})})]}),"\n",(0,s.jsx)(n.admonition,{type:"studio",children:(0,s.jsxs)(n.p,{children:["Want to get started with React extra fast? Try the ",(0,s.jsx)(n.a,{href:"/xstate-zh/docs/generate-react",children:"generate React app feature in Stately Studio"}),"."]})}),"\n",(0,s.jsx)(n.h2,{id:"examples",children:"Examples"}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.em,{children:"Coming soon"})}),"\n",(0,s.jsx)(n.h2,{id:"api",children:"API"}),"\n",(0,s.jsx)(n.h3,{id:"useactoractorlogic-options",children:(0,s.jsx)(n.code,{children:"useActor(actorLogic, options?)"})}),"\n",(0,s.jsxs)(n.p,{children:["A ",(0,s.jsx)(n.a,{href:"https://reactjs.org/hooks",children:"React hook"})," that creates an actor from the the given ",(0,s.jsx)(n.code,{children:"actorLogic"})," and starts an actor that runs for the lifetime of the component."]}),"\n",(0,s.jsx)(n.h4,{id:"arguments",children:"Arguments"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"actorLogic"})," - The actor logic to create an actor from; e.g. ",(0,s.jsx)(n.code,{children:"createMachine(...)"}),", ",(0,s.jsx)(n.code,{children:"fromPromise(...)"}),", etc."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"options?"})," (optional) - Actor options."]}),"\n"]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Returns"})," a tuple of ",(0,s.jsx)(n.code,{children:"[snapshot, send, actorRef]"}),":"]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"snapshot"})," - Represents the current state of the actor."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"send"})," - A function that sends events to the running actor."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"actorRef"})," - The started actor."]}),"\n"]}),"\n",(0,s.jsx)(n.h4,{id:"examples-1",children:"Examples"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-tsx",children:"import { fromPromise } from 'xstate';\nimport { useActor } from '@xstate/react';\n\nconst promiseLogic = fromPromise(async () => {\n  const data = await getData(/* ... */);\n\n  return data;\n});\n\nfunction Component() {\n  // highlight-next-line  \n  const [state, send] = useActor(promiseLogic);\n\n  if (state.status === 'done') {\n    return <div>{state.output}</div>;\n  }\n\n  if (state.status === 'active') {\n    return <div>Loading...</div>;\n  }\n\n  return null;\n}\n"})}),"\n",(0,s.jsx)(n.h3,{id:"usemachinemachine-options",children:(0,s.jsx)(n.code,{children:"useMachine(machine, options?)"})}),"\n",(0,s.jsxs)(n.p,{children:["A ",(0,s.jsx)(n.a,{href:"https://reactjs.org/hooks",children:"React hook"})," that creates an actor from the given ",(0,s.jsx)(n.code,{children:"machine"})," and starts an actor that runs for the lifetime of the component."]}),"\n",(0,s.jsx)(n.h4,{id:"arguments-1",children:"Arguments"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"machine"})," - An ",(0,s.jsx)(n.a,{href:"/xstate-zh/docs/machines",children:"XState machine"})]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"options?"})," (optional) - Actor options."]}),"\n"]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Returns"})," a tuple of ",(0,s.jsx)(n.code,{children:"[snapshot, send, actorRef]"}),":"]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"snapshot"})," - Represents the current state of the machine."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"send"})," - A function that sends events to the running actor."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"actorRef"})," - The started actor."]}),"\n"]}),"\n",(0,s.jsx)(n.h4,{id:"examples-2",children:"Examples"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-tsx",children:"import { useMachine } from '@xstate/react';\n\nfunction Component() {\n  const [snapshot, send] = useMachine(machine);\n  \n  // Machine with provided implementations\n  // Will keep provided implementations up-to-date\n  const [snapshot, send] = useMachine(\n    machine.provide({\n      actions: {\n        doSomething: ({ context }) => {\n          // ...\n        },\n      },\n    }),\n  );\n}\n"})}),"\n",(0,s.jsx)(n.h3,{id:"useactorrefmachine-options",children:(0,s.jsx)(n.code,{children:"useActorRef(machine, options?)"})}),"\n",(0,s.jsxs)(n.p,{children:["A React hook that returns the ",(0,s.jsx)(n.code,{children:"actorRef"})," created from the ",(0,s.jsx)(n.code,{children:"machine"})," with actor ",(0,s.jsx)(n.code,{children:"options"})," that are passed to ",(0,s.jsx)(n.code,{children:"createActor(logic, options)"}),", if specified. It starts the actor ref and runs it for the lifetime of the component."]}),"\n",(0,s.jsxs)(n.p,{children:["The ",(0,s.jsx)(n.code,{children:"useActorRef(...)"})," hook is useful when you want fine-grained control, e.g. to add logging, or minimize re-renders. In contrast to ",(0,s.jsx)(n.code,{children:"useActor(...)"})," that would flush each update from the machine to the React component, ",(0,s.jsx)(n.code,{children:"useActorRef(...)"})," instead returns a static reference (to just the machine actor) which will not rerender when its state changes."]}),"\n",(0,s.jsxs)(n.p,{children:["You can use the ",(0,s.jsx)(n.code,{children:"useSelector(...)"})," hook to select part of the snapshot from the ",(0,s.jsx)(n.code,{children:"actorRef"})," whenever it updates."]}),"\n",(0,s.jsx)(n.h4,{id:"arguments-2",children:"Arguments"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"actorLogic"}),"- The actor logic to create an actor from; e.g. ",(0,s.jsx)(n.code,{children:"createMachine(...)"}),", ",(0,s.jsx)(n.code,{children:"fromPromise(...)"}),", etc."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"options?"})," (optional) - Actor options."]}),"\n"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",children:"import { useActorRef } from '@xstate/react';\nimport { someMachine } from '../path/to/someMachine';\n\nconst App = () => {\n  const actorRef = useActorRef(someMachine);\n\n  // ...\n};\n"})}),"\n",(0,s.jsx)(n.p,{children:"Providing machine implementations:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",children:"// ...\n\nconst App = () => {\n  const actorRef = useActorRef(\n    someMachine.provide({\n      actions: {\n        // ...\n      },\n    }),\n  );\n\n  // ...\n};\n"})}),"\n",(0,s.jsx)(n.h3,{id:"useselectoractorref-selector-compare-getsnapshot",children:(0,s.jsx)(n.code,{children:"useSelector(actorRef, selector, compare?, getSnapshot?)"})}),"\n",(0,s.jsxs)(n.p,{children:["A React hook that returns the selected value from the snapshot of an ",(0,s.jsx)(n.code,{children:"actorRef"}),", such as a actor ref. This hook will only cause a rerender if the selected value changes, as determined by the optional ",(0,s.jsx)(n.code,{children:"compare"})," function."]}),"\n",(0,s.jsx)(n.h4,{id:"arguments-3",children:"Arguments"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"actorRef"})," - an actor ref"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"selector"})," - a function that takes in an actor\u2019s snapshot as an argument and returns the desired selected value."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"compare"})," (optional) - a function that determines if the current selected value is the same as the previous selected value."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"getSnapshot"})," (optional) - a function that should return the latest emitted value from the ",(0,s.jsx)(n.code,{children:"actor"}),".","\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["Defaults to attempting to get the ",(0,s.jsx)(n.code,{children:"actor.state"}),", or returning ",(0,s.jsx)(n.code,{children:"undefined"})," if that does not exist. Will automatically pull the state from actor refs."]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(n.h4,{id:"examples-3",children:"Examples"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",children:"import { useSelector } from '@xstate/react';\n\n// tip: optimize selectors by defining them externally when possible\nconst selectCount = (snapshot) => snapshot.context.count;\n\nconst App = ({ actorRef }) => {\n  const count = useSelector(actorRef, selectCount);\n\n  // ...\n};\n"})}),"\n",(0,s.jsxs)(n.p,{children:["With ",(0,s.jsx)(n.code,{children:"compare"})," function:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",children:"// ...\n\nconst selectUser = (snapshot) => snapshot.context.user;\nconst compareUser = (prevUser, nextUser) => prevUser.id === nextUser.id;\n\nconst App = ({ actorRef }) => {\n  const user = useSelector(actorRef, selectUser, compareUser);\n\n  // ...\n};\n"})}),"\n",(0,s.jsx)(n.h3,{id:"createactorcontextlogic",children:(0,s.jsx)(n.code,{children:"createActorContext(logic)"})}),"\n",(0,s.jsxs)(n.p,{children:["Returns a ",(0,s.jsx)(n.a,{href:"https://beta.reactjs.org/learn/passing-data-deeply-with-context",children:"React Context object"})," that creates an actor from the provided actor ",(0,s.jsx)(n.code,{children:"logic"})," and makes the actor available through React Context. There are helper methods for accessing state and the actor ref."]}),"\n",(0,s.jsx)(n.h4,{id:"arguments-4",children:"Arguments"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"logic"})," - Actor logic, like an ",(0,s.jsx)(n.a,{href:"/xstate-zh/docs/machines",children:"XState machine"})]}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:"Returns a React Context object that contains the following properties:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"Provider"})," - a React Context Provider component with the following props:","\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"logic"})," - Actor logic, such as an ",(0,s.jsx)(n.a,{href:"/xstate-zh/docs/machines",children:"XState machine"})," ,that must be of the same type as the actor logic passed to ",(0,s.jsx)(n.code,{children:"createActorContext(...)"})]}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"useSelector(selector, compare?)"})," - a React hook that takes in a ",(0,s.jsx)(n.code,{children:"selector"})," function and optional ",(0,s.jsx)(n.code,{children:"compare"})," function and returns the selected value from the actor snapshot"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"useActorRef()"})," - a React hook that returns the actor ref of the actor created from the actor ",(0,s.jsx)(n.code,{children:"logic"})]}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:"Creating a React Context for the actor and providing it in app scope:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",children:"import { createActorContext } from '@xstate/react';\nimport { someMachine } from '../path/to/someMachine';\n\nconst SomeMachineContext = createActorContext(someMachine);\n\nfunction App() {\n  return (\n    <SomeMachineContext.Provider>\n      <SomeComponent />\n    </SomeMachineContext.Provider>\n  );\n}\n"})}),"\n",(0,s.jsx)(n.p,{children:"Consuming the actor in a component:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",children:"import { SomeMachineContext } from '../path/to/SomeMachineContext';\n\nfunction SomeComponent() {\n  const count = SomeMachineContext.useSelector((state) => state.context.count);\n  const someActorRef = SomeMachineContext.useActorRef();\n\n  return (\n    <div>\n      <p>Count: {count}</p>\n      <button onClick={() => someActorRef.send({ type: 'inc' })}>\n        Increment\n      </button>\n    </div>\n  );\n}\n"})}),"\n",(0,s.jsx)(n.p,{children:"Providing a similar machine:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",children:"import { SomeMachineContext } from '../path/to/SomeMachineContext';\nimport { someMachine } from '../path/to/someMachine';\n\nfunction SomeComponent() {\n  return (\n    <SomeMachineContext.Provider\n      logic={someMachine.provide({\n        actions: {\n          someAction: differentImplementation,\n        },\n        // ... More implementations\n      })}\n    >\n      <SomeOtherComponent />\n    </SomeMachineContext.Provider>\n  );\n}\n"})}),"\n",(0,s.jsx)(n.h3,{id:"shallow-comparison",children:"Shallow comparison"}),"\n",(0,s.jsxs)(n.p,{children:["The default comparison is a strict reference comparison (",(0,s.jsx)(n.code,{children:"==="}),"). If your selector returns non-primitive values, such as objects or arrays, you should keep this in mind and either return the same reference, or provide a shallow or deep comparator."]}),"\n",(0,s.jsxs)(n.p,{children:["The ",(0,s.jsx)(n.code,{children:"shallowEqual(...)"})," comparator function is available for shallow comparison:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",children:"import { useSelector, shallowEqual } from '@xstate/react';\n\n// ...\n\nconst selectUser = (state) => state.context.user;\n\nconst App = ({ actorRef }) => {\n  // shallowEqual comparator is needed to compare the object, whose\n  // reference might change despite the shallow object values being equal\n  const user = useSelector(actorRef, selectUser, shallowEqual);\n\n  // ...\n};\n"})}),"\n",(0,s.jsxs)(n.p,{children:["With ",(0,s.jsx)(n.code,{children:"useActorRef(...)"}),":"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",children:"import { useActorRef, useSelector } from '@xstate/react';\nimport { someMachine } from '../path/to/someMachine';\n\nconst selectCount = (state) => state.context.count;\n\nconst App = () => {\n  const actorRef = useActorRef(someMachine);\n  const count = useSelector(actorRef, selectCount);\n\n  // ...\n};\n"})}),"\n",(0,s.jsx)(n.h2,{id:"configuring-machines",children:"Configuring machines"}),"\n",(0,s.jsxs)(n.p,{children:["Existing machines can be customized by providing different implementations in ",(0,s.jsx)(n.code,{children:"machine.provide(implementations)"}),"."]}),"\n",(0,s.jsxs)(n.p,{children:["Example: the ",(0,s.jsx)(n.code,{children:"'fetchData'"})," actor ref and ",(0,s.jsx)(n.code,{children:"'notifySuccess'"})," action are both configurable:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",children:"const fetchMachine = createMachine({\n  id: 'fetch',\n  initial: 'idle',\n  context: {\n    data: undefined,\n    error: undefined,\n  },\n  states: {\n    idle: {\n      on: { FETCH: 'loading' },\n    },\n    loading: {\n      invoke: {\n        src: 'fetchData',\n        onDone: {\n          target: 'success',\n          actions: assign({\n            data: ({ event }) => event.output,\n          }),\n        },\n        onError: {\n          target: 'failure',\n          actions: assign({\n            error: ({ event }) => event.error,\n          }),\n        },\n      },\n    },\n    success: {\n      entry: 'notifySuccess',\n      type: 'final',\n    },\n    failure: {\n      on: {\n        RETRY: 'loading',\n      },\n    },\n  },\n});\n\nconst Fetcher = ({ onResolve }) => {\n  const [state, send] = useMachine(\n    fetchMachine.provide({\n      actions: {\n        notifySuccess: ({ context }) => onResolve(context.data),\n      },\n      actors: {\n        fetchData: fromPromise(() =>\n          fetch(`some/api/${e.query}`).then((res) => res.json()),\n        ),\n      },\n    }),\n  );\n\n  switch (state.value) {\n    case 'idle':\n      return (\n        <button onClick={() => send({ type: 'FETCH', query: 'something' })}>\n          Search for something\n        </button>\n      );\n    case 'loading':\n      return <div>Searching...</div>;\n    case 'success':\n      return <div>Success! Data: {state.context.data}</div>;\n    case 'failure':\n      return (\n        <>\n          <p>{state.context.error.message}</p>\n          <button onClick={() => send({ type: 'RETRY' })}>Retry</button>\n        </>\n      );\n    default:\n      return null;\n  }\n};\n"})}),"\n",(0,s.jsx)(n.h2,{id:"input",children:"Input"}),"\n",(0,s.jsx)(n.p,{children:"You can provide input to actors"}),"\n",(0,s.jsx)(n.h2,{id:"matching-states",children:"Matching states"}),"\n",(0,s.jsxs)(n.p,{children:["When using ",(0,s.jsx)(n.a,{href:"/xstate-zh/docs/parent-states",children:"hierarchical"})," and ",(0,s.jsx)(n.a,{href:"/xstate-zh/docs/parallel-states",children:"parallel"})," machines, the state values will be objects, not strings. In this case, it is best to use ",(0,s.jsx)(n.a,{href:"/xstate-zh/docs/states#statematchesstatevalue",children:(0,s.jsx)(n.code,{children:"state.matches(...)"})}),"."]}),"\n",(0,s.jsxs)(n.p,{children:["We can do this with ",(0,s.jsx)(n.code,{children:"if/else if/else"})," blocks:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",children:"// ...\nif (state.matches('idle')) {\n  return /* ... */;\n} else if (state.matches({ loading: 'user' })) {\n  return /* ... */;\n} else if (state.matches({ loading: 'friends' })) {\n  return /* ... */;\n} else {\n  return null;\n}\n"})}),"\n",(0,s.jsxs)(n.p,{children:["We can also continue to use ",(0,s.jsx)(n.code,{children:"switch"}),", but we must make an adjustment to our approach. By setting the expression of the ",(0,s.jsx)(n.code,{children:"switch"})," to ",(0,s.jsx)(n.code,{children:"true"}),", we can use ",(0,s.jsx)(n.a,{href:"/xstate-zh/docs/states#statematchesstatevalue",children:(0,s.jsx)(n.code,{children:"state.matches(...)"})})," as a predicate in each ",(0,s.jsx)(n.code,{children:"case"}),":"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",children:"switch (true) {\n  case state.matches('idle'):\n    return /* ... */;\n  case state.matches({ loading: 'user' }):\n    return /* ... */;\n  case state.matches({ loading: 'friends' }):\n    return /* ... */;\n  default:\n    return null;\n}\n"})}),"\n",(0,s.jsx)(n.p,{children:"A ternary statement can also be considered, especially within rendered JSX:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-jsx",children:"const Loader = () => {\n  const [state, send] = useMachine(/* ... */);\n\n  return (\n    <div>\n      {state.matches('idle') ? (\n        <Loader.Idle />\n      ) : state.matches({ loading: 'user' }) ? (\n        <Loader.LoadingUser />\n      ) : state.matches({ loading: 'friends' }) ? (\n        <Loader.LoadingFriends />\n      ) : null}\n    </div>\n  );\n};\n"})}),"\n",(0,s.jsx)(n.h2,{id:"persisted-and-rehydrated-state",children:"Persisted and rehydrated State"}),"\n",(0,s.jsxs)(n.p,{children:["You can persist and rehydrate state with ",(0,s.jsx)(n.code,{children:"useMachine(...)"})," via ",(0,s.jsx)(n.code,{children:"options.snapshot"})," in the 2nd argument:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",children:"// ...\n\n// Get the persisted state config object from somewhere, e.g. localStorage\nconst persistedState = JSON.parse(localStorage.getItem('some-persisted-state-key'));\n\nconst App = () => {\n  const [state, send] = useMachine(someMachine, {\n    snapshot: persistedState // provide persisted state config object here\n  });\n\n  // state will initially be that persisted state, not the machine\u2019s initialState\n\n  return (/* ... */)\n}\n"})}),"\n",(0,s.jsx)(n.h2,{id:"actor-refs",children:"Actor refs"}),"\n",(0,s.jsxs)(n.p,{children:["The ",(0,s.jsx)(n.code,{children:"actorRef"})," created in ",(0,s.jsx)(n.code,{children:"useMachine(machine)"})," can be referenced as the third returned value:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",children:"//                  vvvvvvvv\nconst [state, send, actorRef] = useMachine(someMachine);\n"})}),"\n",(0,s.jsxs)(n.p,{children:["You can subscribe to that actor ref's state changes with the ",(0,s.jsxs)(n.a,{href:"https://reactjs.org/docs/hooks-effect.html",children:[(0,s.jsx)(n.code,{children:"useEffect"})," hook"]}),":"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",children:"// ...\n\nuseEffect(() => {\n  const subscription = actorRef.subscribe((snapshot) => {\n    // simple logging\n    console.log(snapshot);\n  });\n\n  return subscription.unsubscribe;\n}, [actorRef]); // note: actor ref should never change\n"})}),"\n",(0,s.jsx)(n.h2,{id:"resources",children:"Resources"}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.em,{children:"Coming soon"})})]})}function d(e={}){const{wrapper:n}={...(0,c.a)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(h,{...e})}):h(e)}function u(e,n){throw new Error("Expected "+(n?"component":"object")+" `"+e+"` to be defined: you likely forgot to import, pass, or provide it.")}},11151:(e,n,t)=>{t.d(n,{Z:()=>r,a:()=>o});var s=t(67294);const c={},a=s.createContext(c);function o(e){const n=s.useContext(a);return s.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function r(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(c):e.components||c:o(e.components),s.createElement(a.Provider,{value:n},e.children)}}}]);