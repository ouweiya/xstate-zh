"use strict";(self.webpackChunkstately_docs=self.webpackChunkstately_docs||[]).push([[9562],{61869:e=>{e.exports=JSON.parse('{"blogPosts":[{"id":"2024-07-29-claw-game-state-machine","metadata":{"permalink":"/xstate-zh/blog/2024-07-29-claw-game-state-machine","editUrl":"https://github.com/statelyai/docs/edit/main/blog/2024-07-29-claw-game-state-machine/index.mdx","source":"@site/blog/2024-07-29-claw-game-state-machine/index.mdx","title":"Viam x Stately - Smart Machines Meet State Machines","description":"Controlling hardware in the real world requires confidence and safety, even when it\'s part of a game!","date":"2024-07-29T00:00:00.000Z","formattedDate":"July 29, 2024","tags":[{"label":"case study","permalink":"/xstate-zh/blog/tags/case-study"},{"label":"study","permalink":"/xstate-zh/blog/tags/study"},{"label":"viam","permalink":"/xstate-zh/blog/tags/viam"},{"label":"xstate","permalink":"/xstate-zh/blog/tags/xstate"},{"label":"state machines","permalink":"/xstate-zh/blog/tags/state-machines"}],"readingTime":14.95,"hasTruncateMarker":true,"authors":[{"name":"Nick Hehr","title":"Viam Dev Advocate","url":"https://github.com/hipsterbrown","imageURL":"https://github.com/HipsterBrown.png","key":"hipsterbrown"}],"frontMatter":{"title":"Viam x Stately - Smart Machines Meet State Machines","description":"Controlling hardware in the real world requires confidence and safety, even when it\'s part of a game!","tags":["case study","study","viam","xstate","state machines"],"authors":["hipsterbrown"],"date":"2024-07-29T00:00:00.000Z","slug":"2024-07-29-claw-game-state-machine"},"unlisted":false,"nextItem":{"title":"\u4ecb\u7ecd XState Store","permalink":"/xstate-zh/blog/2024-04-10-xstate-store"}},"content":"The term \\"robots\\" invokes a fascinating range of ideas, from manually controlled machines to automated software that crawls the web. One of the prime examples in this area is robotic arms, traditionally used to aid and extend the reach of humans in manufacturing, surgery, and space exploration. Each of these use cases require some way of programming and controlling the arm to perform their dedicated task, usually with proprietary software developed by the manufacturer. The UI is tightly coupled to the hardware through a touchscreen device or desktop application physically connected to the arm, which makes it tough to put online securely and using modern technology.\\n\\n[Viam](https://www.viam.com/) provides an open source software stack and set of cloud services that makes managing all types of robots (and other smart machines) accessible to developers without any prior hardware experience. To help demonstrate the types of experience that can be built with Viam, the developer advocacy team [built an arcade claw game](https://docs.viam.com/tutorials/projects/claw-game/) that used an industrial robot arm and arcade claw that could be operated using a single-page web application powered by [TypeScript SDK](https://ts.viam.dev/).\\n\\n{/* truncate */}\\n\\n![a large arcade cabinet full of black, red, and green balls surrounding a robotic arm with an arcade claw attached at tehe top end](./viam-claw-game.jpg)\\n\\nEven for a relatively-constrained experience, managing the various possible actions and states to operate the arm made maintaining the code for the web application quite tough for anyone who wanted to update some feature. It was important to handle any errors related to potential collisions of the arm against any obstacles as it moved, as well as prevent commands from being sent to the arms while it was actively moving or grabbing. Also, as an open source example, we wanted the code to be understood by developers who were learning about Viam without getting lost in the UI-specific logic.\\n\\nGiven this mandate and my past experience using XState, I reached for Stately Studio and XState to make the claw game web app into a more production-ready system!\\n\\n## Understanding the problem\\n\\n![a web page with a 3x3 grid of squares filled with directional arrows around an arcade claw, below the grid is a smiling robot with a speech bubble say \\"Good luck, and have fun!\\"](./web-app-ui.png)\\n\\nAs stated previously, the web application is quite literally a single page experience. It is a set of static assets (`index.html`, `styles.css`, `main.ts`) that are compiled and served by a static file server running on an embedded Linux device (the [NVIDIA Jetson Orin Nano](https://docs.viam.com/get-started/prepare/jetson-nano-setup/) in this case) where the [viam-server Robot Development Kit](https://docs.viam.com/get-started/installation/) is also running. This is purely for convenience rather than necessity since the Viam TypeScript SDK connects to `viam-server` using WebRTC, so the app could run on any device in the world with an Internet connection.\\n\\nBecause the UI itself is fairly simple, there\'s no client-side framework being used; just DOM APIs and the Viam SDK. Let\'s take a look at the `main` function in the `main.ts` file for the project, which pulls together most of the logic for interacting with the UI and robot; we can start to identify opportunities for finite states and actions:\\n\\n```typescript\\nasync function main() {\\n  // Connect to client\\n  let client: Client;\\n  try {\\n    client = await connect();\\n    console.log(\'connected!\');\\n  } catch (error) {\\n    console.log(error);\\n    return;\\n  }\\n  const motionClient = new MotionClient(client, motionClientName);\\n  const boardClient = new BoardClient(client, boardClientName);\\n  const armClient = new ArmClient(client, armClientName);\\n  const gripperClient = new GripperClient(client, gripperClientName);\\n  /// more below\\n```\\n\\nRight off the bat, there\'s some setup logic to connect to the robot that could potentially fail if the machine is offline but not much in the way of error handling. I can identify at least four states from this snippet alone: `initializing`, `connectingToMachine`, `clientErrored`, and `connected`. Once the main client has connected to the robot, we create an instance of each component client that we want to control.\\n\\n```typescript\\nlet isMoving = false;\\n\\nfunction styleMove(state) {\\n  let element = document.getElementById(\'grid-container\');\\n  if (state === \'move\') {\\n    element.classList.remove(\'grid-container-error\', \'grid-container-ready\');\\n    element.classList.add(\'grid-container-moving\');\\n  } else if (state === \'ready\') {\\n    element.classList.remove(\'grid-container-error\', \'grid-container-moving\');\\n    element.classList.add(\'grid-container-ready\');\\n  } else if (state === \'error\') {\\n    element.classList.remove(\'grid-container-moving\', \'grid-container-ready\');\\n    element.classList.add(\'grid-container-error\');\\n  }\\n}\\n```\\n\\nNow we can see an interesting mix of boolean variables (`isMoving`) and explicit states being passed to a function to style the grid of quadrants to which the robot arm can move. This helps inform some additional states to model: `ready` (this could be separate from the `connected` state) and `moving`. Updating the styles based on the current state of the machine could happen as a side-effect within the machine config or by subscribing to the machine state; we can explore that when modeling in Stately Studio.\\n\\n```typescript\\n// Helper functions to define button behavior\\nasync function mouseDown(func: () => Promise<boolean>) {\\n  if (isMoving) return;\\n  styleMove(\'move\');\\n  isMoving = true;\\n  let success = await func();\\n  if (success) {\\n    styleMove(\'ready\');\\n    isMoving = false;\\n  }\\n}\\n\\nfunction setButtonBehavior(\\n  button: HTMLTableCellElement,\\n  func: () => Promise<boolean>,\\n) {\\n  button.addEventListener(\'mousedown\', () => {\\n    mouseDown(func);\\n  });\\n}\\n\\nasync function planarMoveHandler(\\n  button: HTMLTableCellElement,\\n  x: number,\\n  y: number,\\n) {\\n  try {\\n    await inPlaneMove(motionClient, armClient, x, y);\\n  } catch (error) {\\n    console.log(error);\\n    styleMove(\'error\');\\n    setTimeout(() => {\\n      styleMove(\'ready\');\\n      isMoving = false;\\n    }, moveTimeout);\\n    return false;\\n  }\\n  return true;\\n}\\n\\nsetButtonBehavior(forwardbutton, () =>\\n  planarMoveHandler(forwardbutton, -moveDistance, 0),\\n);\\nsetButtonBehavior(backbutton, () =>\\n  planarMoveHandler(backbutton, moveDistance, 0),\\n);\\nsetButtonBehavior(rightbutton, () =>\\n  planarMoveHandler(rightbutton, 0, moveDistance),\\n);\\nsetButtonBehavior(leftbutton, () =>\\n  planarMoveHandler(leftbutton, 0, -moveDistance),\\n);\\n```\\n\\nNow we\'re getting into the real action. The `mouseDown` helper function is doing a few things to orchestrate the UI while sending commands to the arm: guarding when the arm is moving, updating the styles and global variable before calling the wrapped async command, checking the result of the command before updating the styles and global variable again if it was successful. There\'s no error handling within the `mouseDown` handler, instead it has been included in the `planarMoveHandler` which also calls the `styleMove` helper along with a timer to reset the UI to the `ready` state again (the `inPlaneMove` function being called moves the arm a short distance in its existing position, rather than to a new quadrant as we\'ll see later). Keeping the general error handling in the `mouseDown` would help organize that logic together, but that doesn\'t necessarily mean it would be easy to follow the individual states that become active during this interaction.\\n\\n```typescript\\n// Define buttons for movement between quadrants\\nasync function moveHandler(func: Promise<void>) {\\n  try {\\n    await func;\\n  } catch (error) {\\n    console.log(error);\\n    styleMove(\'error\');\\n    setTimeout(() => {\\n      styleMove(\'ready\');\\n      isMoving = false;\\n    }, moveTimeout);\\n    return false;\\n  }\\n  return true;\\n}\\n\\nsetButtonBehavior(gridBackLeft, () =>\\n  moveHandler(moveToQuadrant(motionClient, armClient, -1, -1)),\\n);\\nsetButtonBehavior(gridBack, () =>\\n  moveHandler(moveToQuadrant(motionClient, armClient, -1, 0)),\\n);\\nsetButtonBehavior(gridBackRight, () =>\\n  moveHandler(moveToQuadrant(motionClient, armClient, -1, 1)),\\n);\\nsetButtonBehavior(gridLeft, () =>\\n  moveHandler(moveToQuadrant(motionClient, armClient, 0, -1)),\\n);\\nsetButtonBehavior(gridHome, () => moveHandler(home(motionClient, armClient)));\\nsetButtonBehavior(gridRight, () =>\\n  moveHandler(moveToQuadrant(motionClient, armClient, 0, 1)),\\n);\\nsetButtonBehavior(gridFrontLeft, () =>\\n  moveHandler(moveToQuadrant(motionClient, armClient, 1, -1)),\\n);\\nsetButtonBehavior(gridFrontRight, () =>\\n  moveHandler(moveToQuadrant(motionClient, armClient, 1, 1)),\\n);\\n```\\n\\nThis is familiar to the `inPlanarMove` set up we just explored, so there\'s already some potential for combining those efforts into a single `moveHandler` with the same caveats of mixing side-effects with state changes. This current `moveHandler` most likely doesn\'t include the `moving` style updates and global variable change because the `moveToQuadrant` includes a guard using the [`armClient.isMoving()`](https://docs.viam.com/components/arm/#ismoving) method instead, but that\'s tough to know without exploring the implementation of that function.\\n\\n```typescript\\n// Define button to grab and return object\\nasync function dropHandler() {\\n  try {\\n    await zMove(motionClient, armClient, 240);\\n    await grab(boardClient, gripperClient);\\n    await delay(1000);\\n    await zMove(motionClient, armClient, moveHeight);\\n    await home(motionClient, armClient);\\n    await delay(1000);\\n    await release(boardClient, gripperClient);\\n  } catch (error) {\\n    console.log(error);\\n    styleMove(\'error\');\\n    setTimeout(() => {\\n      styleMove(\'ready\');\\n      isMoving = false;\\n    }, 2000);\\n    return false;\\n  }\\n  return true;\\n}\\n\\nsetButtonBehavior(dropbutton, () => dropHandler());\\n```\\n\\nIn the final snippet we can see the third iteration of the common move handler orchestration with even more commands and asynchronous behavior. The `dropHandler` takes care of grabbing a ball from the bottom of the game and moving it over to the drop chute to release it (if it was able to grab one). This is a pretty distinct action from the other move handlers, even with the overlap in error handling logic.\\n\\nWith our initial analysis of the game code done, let\'s try modeling it all in Stately Studio!\\n\\n## Modeling in Stately Studio\\n\\nThe completed state machine:\\n\\n<EmbedMachine\\n  name=\\"A state machine demonstrating the logic for a robotic claw game that can move around and pick up balls.\\"\\n  embedURL=\\"https://stately.ai/registry/editor/embed/40eef216-51c5-4c58-aa9a-22b5ed25ee68?mode=design&machineId=72280163-4dde-4e85-a2a1-b30f49c7f27f\\"\\n/>\\n\\nWhile we dig into the Stately model, I\'ll include \\"enhanced\\" views using MermaidJS diagrams to focus on certain parts.\\n\\n![state diagram visualizing the starting states for the claw game state machine](./mermaid-diagram-starting-states.svg)\\n\\nAs mentioned when first exploring the main TypeScript logic, we have a fairly classic `initializing` starting state that transitions into the `connectingToMachine` state upon the `connect` action. This allows us to control when we want to start connecting or attempt to reconnect if something happens; we could also call this `disconnected` for clarity in the future. In the `connectingToMachine` state, we invoke a `createRobotClient` actor that replicates the `connect` helper function and assigns the client to the machine context upon success. As the first improvement from original logic, we\'ve added an explicit error handler for this actor to transition into the `clientErrored` state and allow a retry action to transition back to `initializing`. The `connected` state will immediately transition to the `ready` state after assigning the necessary component clients to the machine context upon entry.\\n\\n![state diagram visualizing the moving states for the claw game state machine](./mermaid-diagram-moving-states.svg)\\n\\nFrom the `ready` state, the first action to look at is `move`. This will transition into the `moving` state (no more separate boolean variable to update \ud83c\udf89) and invoke the `armMover` actor with a set of inputs to specify the `x` and `y` arguments along with the movement type: `planar` or `quadrant`; this allows for a consolidated workflow to handle those two similar interactions. Upon success, the machine transitions immediately back to `ready`. The error case is one of my favorite parts about this modeling; besides the explicit `displayingMoveError` state, we can see the automatic transition after the set period of time in one place.\\n\\n![state diagram visualizing the picking states for the claw game state machine](./mermaid-diagram-picking-states.svg)\\n\\nThe final action will look nearly identical to the previous one: we execute the `dropAndHome` action to transition into the `picking` state to invoke the `dropHandler` actor. Rather than include `picking` as an option in the `armMover` inputs, we keep this more complex workflow separate to leave opportunity to optimize later.\\n\\nEven before including the generated state machine configuration in the codebase, this high level view of the robot\'s control logic is a fantastic tool for including in the documentation and teaching other members of the team how it should work.\\n\\n## Refactoring the code\\n\\nTo kick off the implementation of this state machine, I took the generated TypeScript code for XState v5 from Stately Studio and added it to the `main.ts` for the claw game app to start filling in the actions and actors.\\n\\n```typescript\\nconst clawMachine = setup({\\n  types: {\\n    context: {} as ClawMachineContext, // abstracted to explict types for readability\\n    events: {} as ClawMachineEvent, // abstracted to explict types for readability\\n  },\\n  actions: {\\n    assignClients: assign({\\n      motionClient: ({ context }, params: ClientNameParams) =>\\n        new MotionClient(context.machineClient, params.motionClientName),\\n\\n      boardClient: ({ context }, params: ClientNameParams) =>\\n        new BoardClient(context.machineClient, params.boardClientName),\\n\\n      armClient: ({ context }, params: ClientNameParams) =>\\n        new ArmClient(context.machineClient, params.armClientName),\\n\\n      gripperClient: ({ context }, params: ClientNameParams) =>\\n        new GripperClient(context.machineClient, params.gripperClientName),\\n    }),\\n    assignError: assign({\\n      error: (_, params: { error: Error }) => params.error,\\n    }),\\n    assignRobotClient: assign({\\n      machineClient: (_, params: { client: Client }) => {\\n        return params.client;\\n      },\\n    }),\\n    clearError: assign({ error: null }),\\n    styleMove: (_, _params: { state: \'moving\' | \'ready\' | \'error\' }) => {},\\n    logError: (_, params: { error: Error }) => {\\n      console.error(params.error);\\n    },\\n  },\\n  actors: {\\n    createRobotClient: fromPromise<\\n      Client,\\n      { apiKey: string; apiKeyId: string; locationAddress: string }\\n    >(async ({ input }) => {\\n      const credential = {\\n        type: \'api-key\',\\n        payload: input.apiKey,\\n      };\\n\\n      //This is the host address of the main part of your robot.\\n      const host = input.locationAddress;\\n\\n      return createRobotClient({\\n        host,\\n        credential,\\n        authEntity: input.apiKeyId,\\n        signalingAddress: \'https://app.viam.com:443\',\\n      });\\n    }),\\n    moveHandler: fromPromise<void, MoveInput>(async ({ input }) => {\\n      if (input.target == \'quadrant\') {\\n        await moveToQuadrant(\\n          input.motionClient,\\n          input.armClient,\\n          input.x,\\n          input.y,\\n        );\\n      }\\n      if (input.target == \'planar\') {\\n        await inPlaneMove(\\n          input.motionClient,\\n          input.armClient,\\n          input.x,\\n          input.y,\\n        );\\n      }\\n    }),\\n    dropHandler: fromPromise<void, ClawMachineContext & { moveHeight: number }>(\\n      async ({ input }) => {\\n        await zMove(input.motionClient, input.armClient, 240);\\n        await grab(input.boardClient, input.gripperClient);\\n        await delay(1000);\\n        await zMove(input.motionClient, input.armClient, input.moveHeight);\\n        await home(input.motionClient, input.armClient);\\n        await delay(1000);\\n        await release(input.boardClient, input.gripperClient);\\n      },\\n    ),\\n  },\\n}).createMachine({\\n  context: { error: null } as ClawMachineContext,\\n  id: \'Claw Machine\',\\n  initial: \'initializing\',\\n  states: {\\n    initializing: {\\n      on: {\\n        connect: {\\n          target: \'connectingToMachine\',\\n        },\\n      },\\n    },\\n    connectingToMachine: {\\n      invoke: {\\n        id: \'clientConnection\',\\n        input: {\\n          apiKey: robotAPIKey,\\n          apiKeyId: robotAPIKeyID,\\n          locationAddress: robotLocation,\\n        },\\n        onDone: {\\n          target: \'connected\',\\n          actions: {\\n            type: \'assignRobotClient\',\\n            params: ({ event }) => ({ client: event.output }),\\n          },\\n        },\\n        onError: {\\n          target: \'clientErrored\',\\n          actions: [\\n            {\\n              type: \'assignError\',\\n              params: ({ event }) => ({ error: event.error as Error }),\\n            },\\n            {\\n              type: \'logError\',\\n              params: ({ event }) => ({ error: event.error as Error }),\\n            },\\n          ],\\n        },\\n        src: \'createRobotClient\',\\n      },\\n    },\\n    connected: {\\n      always: {\\n        target: \'ready\',\\n      },\\n      entry: {\\n        type: \'assignClients\',\\n        params: {\\n          motionClientName,\\n          boardClientName,\\n          armClientName,\\n          gripperClientName,\\n        },\\n      },\\n    },\\n    clientErrored: {\\n      entry: { type: \'styleMove\', params: { state: \'error\' } },\\n      on: {\\n        retry: {\\n          target: \'initializing\',\\n          actions: { type: \'clearError\' },\\n        },\\n      },\\n    },\\n    ready: {\\n      entry: { type: \'styleMove\', params: { state: \'ready\' } },\\n      on: {\\n        move: {\\n          target: \'moving\',\\n        },\\n        dropAndHome: {\\n          target: \'picking\',\\n        },\\n      },\\n    },\\n    moving: {\\n      entry: { type: \'styleMove\', params: { state: \'moving\' } },\\n      invoke: {\\n        id: \'armMover\',\\n        input: ({ context, event }) => {\\n          assertEvent(event, \'move\');\\n\\n          if (event.target == \'home\') {\\n            return { ...context, target: event.target };\\n          }\\n\\n          return {\\n            ...context,\\n            target: event.target,\\n            x: event.x,\\n            y: event.y,\\n          };\\n        },\\n        onDone: {\\n          target: \'ready\',\\n        },\\n        onError: {\\n          target: \'displayingMoveError\',\\n          actions: [\\n            {\\n              type: \'assignError\',\\n              params: ({ event }) => ({ error: event.error as Error }),\\n            },\\n            {\\n              type: \'logError\',\\n              params: ({ event }) => ({ error: event.error as Error }),\\n            },\\n          ],\\n        },\\n        src: \'moveHandler\',\\n      },\\n    },\\n    picking: {\\n      entry: { type: \'styleMove\', params: { state: \'moving\' } },\\n      invoke: {\\n        id: \'picker\',\\n        input: ({ context }) => ({ ...context, moveHeight }),\\n        onDone: {\\n          target: \'ready\',\\n        },\\n        onError: {\\n          target: \'displayingPickerError\',\\n          actions: [\\n            {\\n              type: \'assignError\',\\n              params: ({ event }) => ({ error: event.error as Error }),\\n            },\\n            {\\n              type: \'logError\',\\n              params: ({ event }) => ({ error: event.error as Error }),\\n            },\\n          ],\\n        },\\n        src: \'dropHandler\',\\n      },\\n    },\\n    displayingMoveError: {\\n      entry: { type: \'styleMove\', params: { state: \'error\' } },\\n      after: {\\n        \'3000\': {\\n          target: \'ready\',\\n          actions: { type: \'clearError\' },\\n        },\\n      },\\n    },\\n    displayingPickerError: {\\n      entry: { type: \'styleMove\', params: { state: \'error\' } },\\n      after: {\\n        \'2000\': {\\n          target: \'ready\',\\n          actions: { type: \'clearError\' },\\n        },\\n      },\\n    },\\n  },\\n});\\n```\\n\\nIf we compare the `moveHandler` and `dropHandler` actors to the original code, they are essentially the same as before but with the success and error handling lifted up to the state machine level.\\n\\nYou might also notice the `styleMove` helper being used as an explicit entry action for the necessary states and making it more consistent than before.\\n\\nWith this `clawMachine` configured, the body of the `main` function has been dramatically reduced:\\n\\n```typescript\\nfunction main() {\\n  const clawMachineActor = createActor(\\n    clawMachine.provide({\\n      actions: { styleMove },\\n    }),\\n  );\\n\\n  document.body.addEventListener(\'pointerdown\', (event) => {\\n    if (\\n      event.target instanceof HTMLElement &&\\n      \'event\' in event.target.dataset\\n    ) {\\n      const {\\n        event: machineEvent,\\n        target,\\n        x = \'0\',\\n        y = \'0\',\\n      } = event.target.dataset;\\n\\n      if (machineEvent === \'move\') {\\n        if (target === \'planar\' || target === \'quadrant\') {\\n          clawMachineActor.send({\\n            type: machineEvent,\\n            target,\\n            x: parseInt(x, 10),\\n            y: parseInt(y, 10),\\n          });\\n        }\\n      }\\n      if (machineEvent === \'dropAndHome\')\\n        clawMachineActor.send({ type: machineEvent });\\n    }\\n  });\\n\\n  clawMachineActor.start();\\n  clawMachineActor.send({ type: \'connect\' });\\n}\\n```\\n\\nThe `styleMove` action is configured here rather than including it by default in the `clawMachine` configuration as a personal preference to keep DOM logic separate. While I was working on this, I decided to simplify `styleMove` as well since it just needed the current state reflected in the HTML to conditionally style the grid (it could be a one-liner without the safety check):\\n\\n```typescript\\nfunction styleMove(_, params: { state: \'moving\' | \'ready\' | \'error\' }) {\\n  const container = document.getElementById(\'grid-container\');\\n  if (container == null) return;\\n\\n  container.dataset.state = params.state;\\n}\\n```\\n\\nThe updated CSS:\\n\\n```css\\n.grid-container[data-state=\'ready\'] {\\n  background-color: #6ded8a;\\n}\\n\\n.grid-container[data-state=\'moving\'] {\\n  background-color: #ffee99;\\n}\\n\\n.grid-container[data-state=\'error\'] {\\n  background-color: #aa0000;\\n}\\n```\\n\\nThe event handler for the claw game buttons was also refactored a bit to reduce the amount of redundant TypeScript code by specifying the action inputs as data attributes on the static HTML:\\n\\n```html\\n<button\\n  id=\\"forward-button\\"\\n  class=\\"grid-arrow grid-arrow-up\\"\\n  data-event=\\"move\\"\\n  data-target=\\"planar\\"\\n  data-x=\\"-20\\"\\n  data-y=\\"0\\"\\n>\\n  Forward\\n</button>\\n```\\n\\nNow it is just a single, delegated event handler to send events to the `clawMachine` with all the guards and error handling guaranteed!\\n\\nOnce the modeling was complete, the process of refactoring the code to use `xstate` took less than an hour thanks to my familiarity with the library and the clearer understanding of how Viam API interactions would slot into the state machine configuration.\\n\\nYou can view the full refactor PR here: https://github.com/viam-labs/claw-game/pull/17\\n\\n## Reflecting\\n\\nView it in action:\\n\\n<iframe\\n  width=\\"300\\"\\n  height=\\"500\\"\\n  src=\\"https://www.youtube.com/embed/_bJADuMUDq8\\"\\n  title=\\"Robot Arcade Claw Game in Action!\\"\\n  frameborder=\\"0\\"\\n  allow=\\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share\\"\\n  referrerpolicy=\\"strict-origin-when-cross-origin\\"\\n  allowfullscreen\\n></iframe>\\n\\nOverall, I found the whole process from visualizing the logic to plugging the generated code into my web app incredibly fruitful. I\'ve already identified ways to extend and improve the machine as needed, like adding error capturing in place of the default `logError` action and breaking out the `dropHandler` Promise actor into an explicit state machine actor. I hope folks on my team and in the [Viam community](https://discord.gg/viam) will understand this application better with this refactor in place.\\n\\nHappy Building!"},{"id":"2024-04-10-xstate-store","metadata":{"permalink":"/xstate-zh/blog/2024-04-10-xstate-store","editUrl":"https://github.com/statelyai/docs/edit/main/blog/2024-04-10-xstate-store/index.mdx","source":"@site/blog/2024-04-10-xstate-store/index.mdx","title":"\u4ecb\u7ecd XState Store","description":"\u4e00\u4e2a\u53d7 XState \u542f\u53d1\u7684\u7b80\u5355\u4e14\u5c0f\u5de7\u7684\u72b6\u6001\u7ba1\u7406\u5e93","date":"2024-04-10T00:00:00.000Z","formattedDate":"April 10, 2024","tags":[{"label":"xstate","permalink":"/xstate-zh/blog/tags/xstate"},{"label":"state","permalink":"/xstate-zh/blog/tags/state"},{"label":"store","permalink":"/xstate-zh/blog/tags/store"},{"label":"state management","permalink":"/xstate-zh/blog/tags/state-management"}],"readingTime":9.52,"hasTruncateMarker":true,"authors":[{"name":"David Khourshid","title":"Stately Team","url":"https://github.com/davidkpiano","imageURL":"https://ascelcgzufjyvdzuplwo.supabase.co/storage/v1/object/public/avatars/david.png","key":"david"}],"frontMatter":{"title":"\u4ecb\u7ecd XState Store","description":"\u4e00\u4e2a\u53d7 XState \u542f\u53d1\u7684\u7b80\u5355\u4e14\u5c0f\u5de7\u7684\u72b6\u6001\u7ba1\u7406\u5e93","tags":["xstate","state","store","state management"],"authors":["david"],"date":"2024-04-10T00:00:00.000Z","slug":"2024-04-10-xstate-store"},"unlisted":false,"prevItem":{"title":"Viam x Stately - Smart Machines Meet State Machines","permalink":"/xstate-zh/blog/2024-07-29-claw-game-state-machine"},"nextItem":{"title":"Changelog Week 7 2024","permalink":"/xstate-zh/blog/2024-02-16-changelog"}},"content":"\u4e16\u754c\u9700\u8981\u53e6\u4e00\u4e2a\u72b6\u6001\u7ba1\u7406\u5e93\u5417\uff1f\u53ef\u80fd\u4e0d\u9700\u8981\uff0c\u4f46\u5982\u679c\u4f60\u5bf9 XState \u611f\u5174\u8da3\uff0c\u4f60\u4e00\u5b9a\u8981\u770b\u770b\u8fd9\u4e2a\u3002\\n\\nXState Store \u662f\u4e00\u4e2a\u53d7 XState \u542f\u53d1\u7684\u7b80\u5355\u4e14\u5c0f\u5de7\u7684\u72b6\u6001\u7ba1\u7406\u5e93\u3002\u5982\u679c\u4f60\u53ea\u9700\u8981\u4e00\u79cd\u65b9\u6cd5\u6765\u66f4\u65b0\u5b58\u50a8\u4e2d\u7684\u6570\u636e\u5e76\u8ba2\u9605\u5b58\u50a8\u4e2d\u7684\u66f4\u6539\uff0cXState Store \u9002\u5408\u4f60\u3002\u5b83\u662f\uff1a\\n\\n- **\u6781\u5176\u7b80\u5355**\u3002\u63d0\u4f9b\u521d\u59cb\u4e0a\u4e0b\u6587\u548c\u8fc7\u6e21\u51fd\u6570\u7ed9 `createStore(\u2026)` \u51fd\u6570\uff0c\u4f60\u5c31\u53ef\u4ee5\u5f00\u59cb\u4e86\u3002\\n- **\u6781\u5176\u5c0f\u5de7**\u3002\u538b\u7f29\u540e\u5c0f\u4e8e 1kb\u3002\\n- **\u4e0e XState \u517c\u5bb9**\u3002\u5171\u4eab\u4e0e XState \u76f8\u540c\u7684 actor API\uff0c\u4f7f\u5f97\u5728\u9700\u8981\u5904\u7406\u66f4\u591a\u590d\u6742\u6027\u65f6\uff0c\u96c6\u6210/\u8fc1\u79fb\u53d8\u5f97\u5bb9\u6613\u3002\\n- **\u989d\u5916\u7684\u7c7b\u578b\u5b89\u5168**\u3002\u7528 TypeScript \u7f16\u5199\uff0c\u81ea\u52a8\u4ece\u4f60\u7684\u4e0a\u4e0b\u6587\u548c\u8fc7\u6e21\u4e2d\u63a8\u65ad\u51fa\u5f3a\u7c7b\u578b\u7684\u4e8b\u4ef6\u548c\u5feb\u7167\u3002\\n- **\u57fa\u4e8e\u4e8b\u4ef6**\u3002\u4e0e XState \u4e00\u6837\u5de5\u4f5c\uff1b\u53d1\u9001\u4e8b\u4ef6\u4ee5\u89e6\u53d1\u8fc7\u6e21\u3002\\n- **\u652f\u6301 Immer**\u3002\u901a\u8fc7 `createStoreWithProducer(producer, \u2026)` \u8f7b\u677e\u6dfb\u52a0 [Immer](https://github.com/immerjs/immer) \u4ee5\u8fdb\u884c\u201c\u53ef\u53d8\u201d\u4e0a\u4e0b\u6587\u66f4\u65b0\u3002\\n\\n{/* truncate */}\\n\\n:::info\\n\\n\u9605\u8bfb [`@xstate/store` \u6587\u6863](/docs/xstate-store) \u4e86\u89e3\u66f4\u591a\u4fe1\u606f\u3002\\n\\n:::\\n\\n\u901a\u8fc7 [npm](https://www.npmjs.com/package/@xstate/store) \u5b89\u88c5\uff1a\\n\\n```bash\\nnpm install @xstate/store\\n```\\n\\n\u521b\u5efa\u4f60\u7684\u5b58\u50a8\u5e76\u5728\u4efb\u4f55\u5730\u65b9\u4f7f\u7528\u5b83\uff1a\\n\\n```ts\\nimport { createStore } from \'@xstate/store\';\\n\\nconst store = createStore({\\n  count: 0\\n}, {\\n  inc: {\\n    count: (context, event: { by: number }) => context.count + event.by\\n  }\\n});\\n\\nstore.subscribe((snapshot) => {\\n  console.log(snapshot.context);\\n});\\n\\nstore.send({ type: \'inc\', by: 1 });\\n// logs { count: 1 }\\nstore.send({ type: \'inc\', by: 2 });\\n// logs { count: 3 }\\n```\\n\\n\u5373\u4f7f\u5728 React \u4e2d\uff1a\\n\\n```tsx\\n// highlight-next-line\\nimport { useSelector } from \'@xstate/store/react\';\\nimport { store } from \'./store\';\\n\\nfunction Counter() {\\n  // highlight-next-line\\n  const count = useSelector(store, (state) => state.context.count);\\n\\n  // highlight-next-line\\n  return <button onClick={() => store.send({ type: \'inc\', by: 1 })}>\\n    {count}\\n  </button>;\\n}\\n```\\n\\n## \u52a8\u673a\\n\\n\u5e02\u9762\u4e0a\u6709\u5f88\u591a\u72b6\u6001\u7ba1\u7406\u5e93\uff0c\u5982 XState\u3001Redux\u3001MobX\u3001Zustand\u3001Pinia \u7b49\u3002\u5b83\u4eec\u901a\u5e38\u5206\u4e3a\u4e24\u7c7b\uff1a**\u76f4\u63a5**\u548c**\u95f4\u63a5**\u72b6\u6001\u64cd\u4f5c\u3002\\n\\n- \u76f4\u63a5\u72b6\u6001\u64cd\u4f5c\u6700\u7b80\u5355\uff0c\u56e0\u4e3a\u4f60\u53ef\u4ee5\u5728\u5e94\u7528\u7a0b\u5e8f\u4e2d\u7684\u4efb\u4f55\u5730\u65b9\u3001\u4efb\u4f55\u65f6\u95f4\u76f4\u63a5\u66f4\u65b0\u72b6\u6001\u3002\u7136\u800c\uff0c\u8fd9\u53ef\u80fd\u4f1a\u5bfc\u81f4\u9519\u8bef\u548c\u4e0d\u53ef\u9884\u6d4b\u7684\u884c\u4e3a\uff0c\u56e0\u4e3a\u903b\u8f91\u6ca1\u6709\u96c6\u4e2d\uff0c\u9700\u8981\u5927\u91cf\u7684\u9632\u5fa1\u6027\u7f16\u7a0b\u3002\\n- \u95f4\u63a5\u72b6\u6001\u64cd\u4f5c\u6700\u7b80\u5355\uff0c\u56e0\u4e3a\u4f60\u53ef\u4ee5\u5c06\u6240\u6709\u72b6\u6001\u64cd\u4f5c\u96c6\u4e2d\u5728\u4e00\u4e2a\u5730\u65b9\u3002\u8fd9\u53ef\u80fd\u4f1a\u6709\u70b9\u5197\u957f\uff0c\u56e0\u4e3a\u4f60\u9700\u8981\u53d1\u9001/\u6d3e\u53d1\u4e8b\u4ef6\uff08\u6216\u5728 Redux \u672f\u8bed\u4e2d\u79f0\u4e3a\u201c\u52a8\u4f5c\u201d\uff09\u5230\u4e00\u4e2a\u96c6\u4e2d\u4f4d\u7f6e\uff0c\u4f46\u8fd9\u610f\u5473\u7740\u4f60\u6709\u4e00\u4e2a\u5e94\u7528\u903b\u8f91\u7684\u5355\u4e00\u4e8b\u5b9e\u6765\u6e90\u3002\u8fd9\u79cd\u96c6\u4e2d\u6765\u6e90\u4f7f\u5f97\u6d4b\u8bd5\u3001\u68c0\u67e5\u3001\u8c03\u8bd5\u548c\u91cd\u7528\u53d8\u5f97\u66f4\u52a0\u5bb9\u6613\u3002\\n\\n[XState](https://stately.ai/docs/xstate) \u9009\u62e9\u4e86\u4e00\u6761\u5c11\u6709\u4eba\u8d70\u7684\u8def\uff0c\u5f3a\u70c8\u63a8\u5d07\u95f4\u63a5\u72b6\u6001\u64cd\u4f5c\uff0c\u56e0\u4e3a\u5b83\u53ef\u4ee5\u66f4\u597d\u5730\u6269\u5c55\u66f4\u590d\u6742\u7684\u5e94\u7528\u903b\u8f91\u3002\u7136\u800c\uff0cXState \u6709\u4e00\u4e2a\u76f8\u5f53\u5927\u7684\u5b66\u4e60\u66f2\u7ebf\uff0c\u56e0\u4e3a\u5b83\u8fd8\u5b9e\u73b0\u4e86\u72b6\u6001\u673a\u3001\u72b6\u6001\u56fe\u548c actor \u6a21\u578b\u2014\u2014\u6240\u6709\u8fd9\u4e9b\u5bf9\u4e8e\u8bb8\u591a\u5f00\u53d1\u8005\u6765\u8bf4\u90fd\u662f\u65b0\u7684\uff08\u4e14\u91cd\u8981\u7684\uff01\uff09\u6982\u5ff5\u3002\u6b64\u5916\uff0c\u6211\u4eec\u770b\u5230\u56e2\u961f\u4e0d\u4ec5\u4f7f\u7528 XState \u8fdb\u884c\u590d\u6742\u7684\u72b6\u6001\u7ba1\u7406\uff0c\u8fd8\u7528\u4e8e\u7b80\u5355\u7684\u6570\u636e\u66f4\u65b0\uff0c\u800c\u4f7f\u7528\u5b8c\u6574\u7684\u72b6\u6001\u673a\u53ef\u80fd\u6709\u4e9b\u8fc7\u5934\u3002\\n\\n\u4e3a\u4e86\u4e0d\u8ba9\u5f00\u53d1\u8005\u5728\u7b80\u5355\u72b6\u6001\u7ba1\u7406\u65f6\u79bb\u5f00 XState \u751f\u6001\u7cfb\u7edf\uff0c\u6211\u4eec\u521b\u5efa\u4e86 `@xstate/store`\uff0c\u5b83\u4e0e XState \u5171\u4eab\u76f8\u540c\u7684\u539f\u5219\uff0c\u5177\u6709\u76f8\u540c\u7684 API\uff0c\u4f46\u66f4\u7b80\u5355\u6613\u7528\u3002\u5982\u679c\u4f60\u9700\u8981\u6269\u5c55\u5230\u66f4\u590d\u6742\u7684\u72b6\u6001\u7ba1\u7406\uff0c\u4f60\u53ef\u4ee5\u8f7b\u677e\u8fc1\u79fb\u5230 XState\u3002\\n\\n\u603b\u4e4b\uff0c\u5982\u679c\u4f60\u53ea\u9700\u8981\u4e00\u79cd\u65b9\u6cd5\u6765\u66f4\u65b0\u5b58\u50a8\u4e2d\u7684\u6570\u636e\u5e76\u8ba2\u9605\u5b58\u50a8\u4e2d\u7684\u66f4\u6539\uff0c\u5e76\u4e0e\u5e94\u7528\u7a0b\u5e8f\u7684\u5176\u4ed6\u90e8\u5206\u5171\u4eab\u8fd9\u4e9b\u6570\u636e\uff0c\u8bf7\u4f7f\u7528 `@xstate/store`\u3002\u5982\u679c\u4f60\u9700\u8981\u66f4\u590d\u6742\u7684\u72b6\u6001\u7ba1\u7406\uff0c\u5305\u62ec\u6709\u9650\u72b6\u6001\u3001\u6548\u679c\uff08\u52a8\u4f5c\u3001\u8c03\u7528/\u751f\u6210\u7684 actor\uff09\uff0c\u8bf7\u4f7f\u7528 XState\u3002\\n\\n| \u529f\u80fd | `@xstate/store` | `xstate` |\\n| --- | --- | --- |\\n| \u6709\u9650\u72b6\u6001 | \u274c | \u2705 |\\n| \u4e0a\u4e0b\u6587 | \u2705 | \u2705 |\\n| \u4e8b\u4ef6 | \u2705 | \u2705 |\\n| \u8fc7\u6e21 | \u2705 | \u2705 |\\n| \u5b88\u536b | \u274c | \u2705 |\\n| \u6548\u679c | \u274c | \u2705 |\\n| Actor \u6a21\u578b | \u274c | \u2705 |\\n\\n## \u8d85\u7b80\u5355\u793a\u4f8b\\n\\n\u8fd9\u662f\u4e00\u4e2a\u4eba\u4e3a\u7684\u793a\u4f8b\uff0c\u7528\u4e8e\u6f14\u793a API\u3002\\n\\n```ts\\nimport { createStore } from \'@xstate/store\';\\n\\n// 1. \u521b\u5efa\u4e00\u4e2a\u5b58\u50a8\\nexport const donutStore = createStore(\\n  // \u521d\u59cb\u4e0a\u4e0b\u6587\u6570\u636e\\n  { donuts: 0, favoriteFlavor: \'chocolate\' },\\n\\n  // \u8fc7\u6e21\\n  {\\n    addDonut: {\\n      donuts: (context) => context.donuts + 1\\n    },\\n    changeFlavor: {\\n      favoriteFlavor: (context, event: { flavor: string }) => event.flavor\\n    },\\n    eatAllDonuts: {\\n      donuts: 0\\n    }\\n  }\\n);\\n\\nconsole.log(store.getSnapshot());\\n// {\\n//   status: \'active\',\\n//   context: {\\n//     donuts: 0,\\n//     favoriteFlavor: \'chocolate\'\\n//   }\\n// }\\n\\n// 2. \u8ba2\u9605\u5b58\u50a8\\nstore.subscribe((snapshot) => {\\n  console.log(snapshot.context);\\n});\\n\\n// 3. \u53d1\u9001\u4e8b\u4ef6\\nstore.send({ type: \'addDonut\' });\\n// logs { donuts: 1, favoriteFlavor: \'chocolate\' }\\n\\nstore.send({\\n  type: \'changeFlavor\',\\n  flavor: \'strawberry\' // Strongly-typed!\\n});\\n// logs { donuts; 1, favoriteFlavor: \'strawberry\' }\\n```\\n\\n\u603b\u4f53\u800c\u8a00\uff0cAPI \u662f\uff1a\\n\\n1. \u4f7f\u7528 `createStore(initialContext, transitions)` \u521b\u5efa\u4e00\u4e2a\u5b58\u50a8\u3002\\n2. \u4f7f\u7528 `store.subscribe(callback)` \u8ba2\u9605\u8be5\u5b58\u50a8\u7684\u66f4\u65b0\u3002\\n3. \u4f7f\u7528 `store.send(event)` \u53d1\u9001\u4e8b\u4ef6\u4ee5\u89e6\u53d1\u8fc7\u6e21\u3002\\n4. \uff08\u53ef\u9009\uff09\u4f7f\u7528 `store.getSnapshot()` \u83b7\u53d6\u5b58\u50a8\u7684\u5f53\u524d\u5feb\u7167\u3002\\n\\n:::info\\n\\n\u9605\u8bfb [`@xstate/store` \u6587\u6863](/docs/xstate-store) \u4e86\u89e3\u66f4\u591a\u4fe1\u606f\u3002\\n\\n:::\\n\\n## \u8d85\u80fd\u529b\\n\\n\u6211\u4eec\u5728 `@xstate/store` \u4e2d\u52a0\u5165\u4e86\u4e00\u4e9b\u4e0d\u9519\u7684\u529f\u80fd\uff0c\u4f7f\u72b6\u6001\u7ba1\u7406\u5c3d\u53ef\u80fd\u987a\u5229\u3002\u26f5\ufe0f\\n\\n\u9996\u5148\uff0c\u4f60\u53ef\u4ee5\u5f00\u7bb1\u5373\u7528\u5730\u83b7\u5f97**\u5f3a\u7c7b\u578b**\uff0c\u9002\u7528\u4e8e\u72b6\u6001\u4e0a\u4e0b\u6587\u548c\u4e8b\u4ef6\uff0c\u800c\u65e0\u9700\u7f16\u5199\u4efb\u4f55\u5c34\u5c2c\u7684\u6cdb\u578b\u7c7b\u578b\u53c2\u6570\u3002\u5f53\u7136\uff0cintellisense \u5bf9 `store.send({ \u2026 })` \u4e2d\u7684\u4e8b\u4ef6\u4e5f\u80fd\u5f88\u597d\u5730\u5de5\u4f5c\u3002\u8bf7\u6ce8\u610f\uff0c\u8981\u4f7f\u8fd9\u79cd\u9b54\u6cd5\u751f\u6548\uff0c\u9700\u8981 TypeScript \u7248\u672c 5.4 \u6216\u66f4\u9ad8\u7248\u672c\u3002\\n\\n```ts\\nimport { createStore } from \'@xstate/store\';\\n\\nconst store = createStore({\\n  count: 0\\n}, {\\n  inc: {\\n    count: (context, event: { by: number }) => context.count + event.by\\n  }\\n});\\n\\nstore.send({\\n  type: \'inc\', // \u5f3a\u7c7b\u578b\uff01\\n  by: 1 // \u4e5f\u662f\u5f3a\u7c7b\u578b\uff01\\n});\\n\\n// @ts-expect-error\\nstore.send({ type: \'unknownEvent\' });\\n```\\n\\n\u5176\u6b21\uff0c\u6709\u4e00\u4e9b\u65b9\u4fbf\u7684\u65b9\u6cd5\u53ef\u4ee5\u5728\u8fc7\u6e21\u4e2d\u66f4\u65b0 `context`\uff0c\u7c7b\u4f3c\u4e8e\u5728 XState \u4e2d\u4f7f\u7528 `assign(\u2026)`\u3002\u4f60\u53ef\u4ee5\uff1a\\n\\n- \u4f7f\u7528\u5bf9\u8c61\u6765\u66f4\u65b0\u7279\u5b9a\u7684 `context` \u5c5e\u6027\uff1a\\n  ```ts\\n  const store = createStore({\\n    count: 0\\n  }, {\\n    inc: {\\n      count: (context, event: { by: number }) => context.count + event.by\\n    }\\n  });\\n  ```\\n- \u4f7f\u7528\u5bf9\u8c61\u5c06 `context` \u5c5e\u6027\u66f4\u65b0\u4e3a\u9759\u6001\u503c\uff1a\\n  ```ts\\n  const store = createStore({\\n    count: 0\\n  }, {\\n    reset: {\\n      count: 0 // \u4e0d\u9700\u8981\u51fd\u6570\\n    }\\n  });\\n  ```\\n- \u4f7f\u7528\u51fd\u6570\u66f4\u65b0\u6574\u4e2a `context`\uff08\u53ef\u4ee5\u662f\u90e8\u5206\u6216\u5168\u90e8\u66f4\u65b0\uff09\uff1a\\n  ```ts\\n  const store = createStore({\\n    count: 0,\\n    greeting: \'Hello\'\\n  }, {\\n    adios: (context) => ({ greeting: \'Goodbye\' }) // \u4e0e { count } \u5408\u5e76\\n  });\\n  ```\\n\\n\u4f46\u662f\uff0c\u5982\u679c\u4f60\u60f3\u8ba9\u590d\u6742\u7684 `context` \u66f4\u65b0\u53d8\u5f97\u66f4\u5bb9\u6613\uff0c\u4f60\u53ef\u4ee5\u901a\u8fc7\u5c06 [Immer](https://immerjs.github.io/immer/docs/introduction) \u7684 `producer` \u51fd\u6570\u63d2\u5165\u5230 `createStoreWithProducer(producer, \u2026)` \u4e2d\u6765\u8f7b\u677e\u4f7f\u7528 Immer\uff1a\\n\\n```ts\\nimport { createStoreWithProducer } from \'@xstate/store\';\\n// highlight-next-line\\nimport { produce } from \'immer\';\\n\\nconst store = createStoreWithProducer(\\n  // highlight-next-line\\n  produce,\\n  {\\n    todos: []\\n  }, {\\n    addTodo: (context, event: { todo: string }) => {\\n      // highlight-next-line\\n      context.todos.push(event.todo);\\n    }\\n  });\\n```\\n\\n## \u63a5\u4e0b\u6765\u662f\u4ec0\u4e48\\n\\n`@xstate/store` \u4e0d\u8ba1\u5212\u6dfb\u52a0\u65b0\u529f\u80fd\uff0c\u56e0\u4e3a\u5b83\u65e8\u5728\u4fdd\u6301\u5c0f\u5de7\u3001\u7b80\u5355\u548c\u4e13\u6ce8\u3002\u7136\u800c\uff0c\u6211\u4eec\u5e0c\u671b\u6dfb\u52a0\u4e0e\u5176\u4ed6\u6846\u67b6\uff08\u5982 Vue\u3001Angular\u3001Svelte\u3001Solid \u7b49\uff09\u7684\u96c6\u6210\uff0c\u5e76\u975e\u5e38\u611f\u8c22\u793e\u533a\u5bf9\u6b64\u7684\u8d21\u732e\u3002\u6211\u4eec\u4e5f\u4e0d\u4f1a\u5fd8\u8bb0\u793a\u4f8b\uff1b\u8bf7\u5173\u6ce8 XState \u4ed3\u5e93\u7684 `/examples` \u76ee\u5f55\u4e2d\u7684\u793a\u4f8b\uff0c\u4f8b\u5982[\u8fd9\u4e2a\u5c0f\u578b React \u8ba1\u6570\u5668\u793a\u4f8b](https://github.com/statelyai/xstate/tree/main/examples/store-counter-react)\u3002\\n\\n\u9664\u6b64\u4e4b\u5916\uff0c\u63a5\u4e0b\u6765\u4f60\u8981\u505a\u7684\u5c31\u662f\u8bd5\u7528\u5b83\uff01\u5982\u679c\u4f60\u4f7f\u7528\u8fc7 Zustand\u3001Redux\u3001Pinia \u6216 XState\uff0c\u4f60\u4f1a\u53d1\u73b0 `@xstate/store` \u975e\u5e38\u719f\u6089\u3002\u8bf7\u8bb0\u4f4f\uff0c\u4f60\u5e94\u8be5\u9009\u62e9\u6700\u9002\u5408\u4f60\u9700\u6c42\u548c\u56e2\u961f\u504f\u597d\u7684\u72b6\u6001\u7ba1\u7406\u5e93\u3002\u7136\u800c\uff0c\u5982\u679c\u9700\u8981\uff0c\u8fc1\u79fb\u5230\uff08\u6216\u4ece\uff09`@xstate/store` \u5230 Redux\u3001Zustand\u3001Pinia\u3001XState \u6216\u5176\u4ed6\u72b6\u6001\u7ba1\u7406\u5e93\u662f\u5f88\u7b80\u5355\u7684\u3002\\n\\n\u6211\u4eec\u5bf9 `@xstate/store` \u7684\u76ee\u6807\u662f\u63d0\u4f9b\u4e00\u4e2a\u7b80\u5355\u4f46\u5f3a\u5927\u7684_\u57fa\u4e8e\u4e8b\u4ef6_\u7684\u72b6\u6001\u7ba1\u7406\u89e3\u51b3\u65b9\u6848\uff0c\u5e76\u4e14\u662f\u7c7b\u578b\u5b89\u5168\u7684\u3002\u6211\u4eec\u76f8\u4fe1\uff0c\u95f4\u63a5\uff08\u57fa\u4e8e\u4e8b\u4ef6\uff09\u7684\u72b6\u6001\u7ba1\u7406\u53ef\u4ee5\u66f4\u597d\u5730\u7ec4\u7ec7\u5e94\u7528\u903b\u8f91\uff0c\u7279\u522b\u662f\u5f53\u5b83\u53d8\u5f97\u590d\u6742\u65f6\uff0c\u800c `@xstate/store` \u662f\u8fd9\u79cd\u65b9\u6cd5\u7684\u4e00\u4e2a\u5f88\u597d\u7684\u8d77\u70b9\u3002\\n\\n\u8bd5\u8bd5\u770b\u5427\uff0c\u5982\u679c\u6709\u4efb\u4f55\u95ee\u9898\uff0c\u8bf7\u968f\u65f6\u5728[\u6211\u4eec\u7684 Discord](https://discord.gg/xstate) \u4e2d\u63d0\u95ee\uff0c\u6216\u5728 [XState GitHub \u4ed3\u5e93](https://github.com/statelyai/xstate/issues) \u4e2d\u62a5\u544a\u9519\u8bef\u3002\u6211\u4eec\u4e00\u76f4\u5728\u5bfb\u627e\u6539\u8fdb\u4f53\u9a8c\u7684\u53cd\u9988\uff01"},{"id":"2024-02-16-changelog","metadata":{"permalink":"/xstate-zh/blog/2024-02-16-changelog","editUrl":"https://github.com/statelyai/docs/edit/main/blog/2024-02-16-changelog-week-7/index.mdx","source":"@site/blog/2024-02-16-changelog-week-7/index.mdx","title":"Changelog Week 7 2024","description":"In the last few weeks, we\u2019ve released single-file GitHub pull requests, machine sorting, and many other improvements and bug fixes.","date":"2024-02-16T00:00:00.000Z","formattedDate":"February 16, 2024","tags":[{"label":"changelog","permalink":"/xstate-zh/blog/tags/changelog"},{"label":"new","permalink":"/xstate-zh/blog/tags/new"},{"label":"github","permalink":"/xstate-zh/blog/tags/github"},{"label":"pr","permalink":"/xstate-zh/blog/tags/pr"},{"label":"import","permalink":"/xstate-zh/blog/tags/import"},{"label":"improvements","permalink":"/xstate-zh/blog/tags/improvements"}],"readingTime":1.92,"hasTruncateMarker":true,"authors":[{"name":"Laura Kalbag","title":"Stately Team","url":"https://github.com/laurakalbag","imageURL":"https://ascelcgzufjyvdzuplwo.supabase.co/storage/v1/object/public/avatars/laura.png","key":"laura"}],"frontMatter":{"title":"Changelog Week 7 2024","description":"In the last few weeks, we\u2019ve released single-file GitHub pull requests, machine sorting, and many other improvements and bug fixes.","authors":["laura"],"tags":["changelog","new","github","pr","import","improvements"],"date":"2024-02-16T00:00:00.000Z","slug":"2024-02-16-changelog","image":"/blog/2024-02-16-changelog.png"},"unlisted":false,"prevItem":{"title":"\u4ecb\u7ecd XState Store","permalink":"/xstate-zh/blog/2024-04-10-xstate-store"},"nextItem":{"title":"Stately Office Hours 80","permalink":"/xstate-zh/blog/2024-02-16-office-hours"}},"content":"In the last few weeks, we\u2019ve released single-file GitHub pull requests, machine sorting, and many other improvements and bug fixes.{/* truncate */}\\n\\n## Make GitHub pull requests for single files from inside Stately Studio\\n\\nLast week, we released our single file pull request update to our GitHub integration. You can now quickly visualize a state machine from its GitHub file using [our handy bookmarklet](/docs/import-from-github/#bookmarklet) and then quickly make a pull request for any changes you make back to GitHub. All without leaving the browser. [Read more about this feature in our recent blog post](/blog/2024-02-07-single-file-prs).\\n\\n![Using a bookmarklet to import a state machine from GitHub to Stately Studio](single-file-import.gif)\\n\\n## Sort your machines\\n\\nYou can now sort your machines in the machines list by name and last updated date. Sorting your machines makes it easier to find the machine you\u2019re looking for, especially if you have a lot of machines in your project.\\n\\n<p>\\n  <ThemedImage\\n    alt=\\"The machines list panel showing a list of machines ordered alphabetically, the sort button is pressed and a menu is showing the options for Name A-Z, Name Z-A, Last updated and first updated. The Name A-Z option is selected.\\"\\n    sources={{\\n      light: \'/blog/2024-02-16-changelog/sort.png\',\\n      dark: \'/blog/2024-02-16-changelog/sort-dm.png\',\\n    }}\\n  />\\n</p>\\n\\n## Improvements\\n\\n- Community plan users can now get a preview of our premium features when they click on them. So you can find out what you\u2019re missing out on and how to upgrade!\\n- You can now choose which kind of machine to create when you create a new project. Choose from the Blank template, the Starter machine, importing code or generating a machine with AI.\\n- We added more helpful messages when a user hits the GitHub rate limits.\\n- We simplified the search in the Discover area.\\n\\n## Bug fixes\\n\\n- We fixed a bug where the Code panel would not close when you deleted the last machine in a project.\\n- We fixed a bug where renaming a machine to a name, including a `.` (period), caused it to lose all its transitions.\\n- We fixed a bug where the Projects panel was always open on refresh.\\n\\n## We love your feedback!\\n\\nDo you have a feature request you want to share with us? [Submit and upvote feature requests on our dedicated GitHub feedback repo](https://github.com/statelyai/feedback). Or [join our Discord server](https://discord.stately.ai)."},{"id":"2024-02-16-office-hours","metadata":{"permalink":"/xstate-zh/blog/2024-02-16-office-hours","editUrl":"https://github.com/statelyai/docs/edit/main/blog/2024-02-16-office-hours/index.mdx","source":"@site/blog/2024-02-16-office-hours/index.mdx","title":"Stately Office Hours 80","description":"Watch our latest office hours live stream where we cover single file GitHub pull requests, sorting machines, Stately Agent, updates to XState and more.","date":"2024-02-16T00:00:00.000Z","formattedDate":"February 16, 2024","tags":[{"label":"stately","permalink":"/xstate-zh/blog/tags/stately"},{"label":"studio","permalink":"/xstate-zh/blog/tags/studio"},{"label":"office hours","permalink":"/xstate-zh/blog/tags/office-hours"},{"label":"xstate","permalink":"/xstate-zh/blog/tags/xstate"},{"label":"github sync","permalink":"/xstate-zh/blog/tags/github-sync"},{"label":"pull request","permalink":"/xstate-zh/blog/tags/pull-request"},{"label":"bookmarklet","permalink":"/xstate-zh/blog/tags/bookmarklet"},{"label":"stately agent","permalink":"/xstate-zh/blog/tags/stately-agent"}],"readingTime":1.225,"hasTruncateMarker":true,"authors":[{"name":"Laura Kalbag","title":"Stately Team","url":"https://github.com/laurakalbag","imageURL":"https://ascelcgzufjyvdzuplwo.supabase.co/storage/v1/object/public/avatars/laura.png","key":"laura"}],"frontMatter":{"title":"Stately Office Hours 80","description":"Watch our latest office hours live stream where we cover single file GitHub pull requests, sorting machines, Stately Agent, updates to XState and more.","tags":["stately","studio","office hours","xstate","github sync","pull request","bookmarklet","stately agent"],"authors":["laura"],"date":"2024-02-16T00:00:00.000Z","slug":"2024-02-16-office-hours","image":"/blog/2024-02-16-office-hours.png"},"unlisted":false,"prevItem":{"title":"Changelog Week 7 2024","permalink":"/xstate-zh/blog/2024-02-16-changelog"},"nextItem":{"title":"\u4f7f\u7528 XState \u548c React \u7ba1\u7406\u5168\u5c40\u72b6\u6001","permalink":"/xstate-zh/blog/2024-02-12-xstate-react-global-state"}},"content":"Watch our latest office hours live stream where we cover single file GitHub pull requests, sorting machines, Stately Agent, updates to XState and more.\\n\\n{/* truncate */}\\n\\n<YouTube id=\\"q0S4_QfCBJk\\" />\\n\\n## Chapters\\n\\nWatch the video to find out about our new features. Use the links below to jump straight to that chapter in the video:\\n\\n- [0:00 Intro](https://youtube.com/watch?v=q0S4_QfCBJk&amp;t=0s)\\n- [01:57 Single-file GitHub pull requests](https://youtube.com/watch?v=q0S4_QfCBJk&amp;t=117s)\\n- [05:52 Order machines](https://youtube.com/watch?v=q0S4_QfCBJk&amp;t=352s)\\n- [07:54 Importing a GitHub file using createActorContext to Stately Studio](https://youtube.com/watch?v=q0S4_QfCBJk&amp;t=474s)\\n- [09:37 Services (actors) and createActorContext for improved type inference](https://youtube.com/watch?v=q0S4_QfCBJk&amp;t=577s)\\n- [11:37 Are there any best practices and guidelines around XState and TypeScript?](https://youtube.com/watch?v=q0S4_QfCBJk&amp;t=697s)\\n- [13:36 Stately Inspect: createSkyInspector](https://youtube.com/watch?v=q0S4_QfCBJk&amp;t=816s)\\n- [16:20 XState updates](https://youtube.com/watch?v=q0S4_QfCBJk&amp;t=980s)\\n- [18:30 useSelector in XState](https://youtube.com/watch?v=q0S4_QfCBJk&amp;t=1110s)\\n- [19:43 Stately Agent](https://youtube.com/watch?v=q0S4_QfCBJk&amp;t=1183s)\\n- [21:58 Stately Agent docs and API](https://youtube.com/watch?v=q0S4_QfCBJk&amp;t=1318s)\\n- [25:25 Will useSelector still work if the actor becomes available on render?](https://youtube.com/watch?v=q0S4_QfCBJk&amp;t=1525s)\\n- [26:32 Effect Days in Austria next week](https://youtube.com/watch?v=q0S4_QfCBJk&amp;t=1592s)\\n- [28:04 More on Stately Agent](https://youtube.com/watch?v=q0S4_QfCBJk&amp;t=1684s)\\n- [31:30 Wrap up](https://youtube.com/watch?v=q0S4_QfCBJk&amp;t=1890s)\\n\\n## Links from this week\u2019s office hours\\n\\n- [Kevin\u2019s blog post on Migrating machines to XState V5](/blog/2024-02-02-migrating-machines-to-xstate-v5)\\n- [XState and TypeScript](/docs/typescript)\\n- [XState V5 webinar](https://www.youtube.com/watch?v=TRVjeil-y74)\\n- [Stately Agent](https://stately.ai/agent)\\n- [Stately AI Agents docs](/docs/agents)\\n- [Effect Days](https://effect.website/events/effect-days)\\n\\nGot any questions for the team? Want to share how you\u2019re using Stately or XState? Join us live, or share your questions in our [Discord\u2019s office-hours channel](https://discord.stately.ai).\\n\\nBe the first to find out about our next office hours by subscribing to [our YouTube channel](https://www.youtube.com/@Statelyai), [Twitch channel](https://www.twitch.tv/statelyai), or [following us on LinkedIn](https://www.linkedin.com/company/statelyai/)."},{"id":"2024-02-12-xstate-react-global-state","metadata":{"permalink":"/xstate-zh/blog/2024-02-12-xstate-react-global-state","editUrl":"https://github.com/statelyai/docs/edit/main/blog/2024-02-12-xstate-react-global-state/index.mdx","source":"@site/blog/2024-02-12-xstate-react-global-state/index.mdx","title":"\u4f7f\u7528 XState \u548c React \u7ba1\u7406\u5168\u5c40\u72b6\u6001","description":"\u5982\u4f55\u4f7f\u7528 XState \u5728 React \u4e2d\u7ba1\u7406\u5168\u5c40\u72b6\u6001","date":"2024-02-12T00:00:00.000Z","formattedDate":"February 12, 2024","tags":[{"label":"xstate","permalink":"/xstate-zh/blog/tags/xstate"},{"label":"react","permalink":"/xstate-zh/blog/tags/react"}],"readingTime":5.995,"hasTruncateMarker":true,"authors":[{"name":"David Khourshid","title":"Stately Team","url":"https://github.com/davidkpiano","imageURL":"https://ascelcgzufjyvdzuplwo.supabase.co/storage/v1/object/public/avatars/david.png","key":"david"}],"frontMatter":{"title":"\u4f7f\u7528 XState \u548c React \u7ba1\u7406\u5168\u5c40\u72b6\u6001","description":"\u5982\u4f55\u4f7f\u7528 XState \u5728 React \u4e2d\u7ba1\u7406\u5168\u5c40\u72b6\u6001","tags":["xstate","react"],"authors":["david"],"date":"2024-02-12T00:00:00.000Z","slug":"2024-02-12-xstate-react-global-state","image":"/blog/2024-02-12-xstate-react-global-state.png"},"unlisted":false,"prevItem":{"title":"Stately Office Hours 80","permalink":"/xstate-zh/blog/2024-02-16-office-hours"},"nextItem":{"title":"Edit a state machine from GitHub without touching any code","permalink":"/xstate-zh/blog/2024-02-07-single-file-pr"}},"content":"XState \u662f\u4e00\u4e2a\u591a\u529f\u80fd\u7684\u72b6\u6001\u7ba1\u7406\u548c\u7f16\u6392\u5e93\uff0c\u53ef\u4ee5\u4e0e\u4efb\u4f55\u6846\u67b6\u4e00\u8d77\u4f7f\u7528\uff0c\u5305\u62ec\u4e0e [`@xstate/react`](/docs/xstate-react) \u5305\u4e00\u8d77\u4f7f\u7528\u7684 React\u3002\u5bf9\u4e8e\u8bb8\u591a\u5e94\u7528\u7a0b\u5e8f\u6765\u8bf4\uff0c\u7ba1\u7406\u5168\u5c40\u72b6\u6001\u662f\u4e00\u4e2a\u8981\u6c42\uff0c\u6709\u5f88\u591a\u9009\u9879\u53ef\u4ee5\u5728 React \u4e2d\u5171\u4eab\u5168\u5c40\u72b6\u6001\uff0c\u6bd4\u5982\u4f7f\u7528 [React Context](https://react.dev/learn/passing-data-deeply-with-context) \u6216\u8005\u50cf [Redux](https://redux.js.org/)\u3001[MobX](https://mobx.js.org/) \u548c [Zustand](https://github.com/pmndrs/zustand) \u8fd9\u6837\u7684\u5e93\u3002\\n\\n`@xstate/react` \u5305\u4f7f\u5f97\u4f7f\u7528 `useMachine()` \u548c `useActor()` \u8fd9\u6837\u7684\u94a9\u5b50\u6765\u7ba1\u7406\u7ec4\u4ef6\u7ea7\u72b6\u6001\u53d8\u5f97\u7b80\u5355\uff0c\u4f46\u5b83\u540c\u6837\u9002\u7528\u4e8e\u7ba1\u7406\u5168\u5c40\u72b6\u6001 \ud83c\udf0e\\n\\n{/* truncate */}\\n\\n## \u5feb\u901f\u5f00\u59cb\\n\\n1. **\u521b\u5efa\u5168\u5c40\u903b\u8f91**\u3002\u8fd9\u53ef\u4ee5\u662f\u4e00\u4e2a\u7b80\u5355\u7684 promise \u6216\u51fd\u6570\uff0c\u6216\u8005\u662f\u4e00\u4e2a\u590d\u6742\u7684\u72b6\u6001\u673a\u6216\u72b6\u6001\u56fe\u3002\\n1. **\u4ece\u8be5\u903b\u8f91\u521b\u5efa\u4e00\u4e2a actor \u5e76\u5bfc\u51fa\u5b83**\u3002\\n1. **\u4ece\u4efb\u4f55\u7ec4\u4ef6\u4e2d\u5bfc\u5165\u8be5 actor** \u5e76\uff1a\\n    - \u4f7f\u7528 `useSelector(\u2026)` \u94a9\u5b50\u8bfb\u53d6 actor \u7684\u5feb\u7167\\n    - \u8c03\u7528 `actorRef.send(\u2026)` \u53d1\u9001\u4e8b\u4ef6\u7ed9\u5b83\u3002\\n\\n\u5c31\u662f\u8fd9\u6837\uff01\\n\\n```tsx\\nimport { setup, createActor } from \'xstate\';\\nimport { useSelector } from \'@xstate/react\';\\n\\n// \u5168\u5c40\u5e94\u7528\u903b\u8f91\\nimport { globalLogic } from \'./globalLogic\';\\n\\n// highlight-start\\n// \u521b\u5efa actor\\nexport const globalActor = createActor(globalLogic);\\n// \u542f\u52a8 actor\\nglobalActor.start();\\n// highlight-end\\n\\nexport function App() {\\n  // highlight-start\\n  // \u8bfb\u53d6 actor \u7684\u5feb\u7167\\n  const user = useSelector(globalActor, (snapshot) => snapshot.context.user);\\n  // highlight-end\\n\\n  return (\\n    <div>\\n      <h1>\u4f60\u597d, {user.name}!</h1>\\n      // highlight-start\\n      // \u53d1\u9001\u4e8b\u4ef6\u7ed9 actor\\n      <button onClick={() => globalActor.send({ type: \'logout\' })}>\\n      // highlight-end\\n      \u767b\u51fa\\n      </button>\\n    </div>\\n  );\\n}\\n```\\n\\n## \u5168\u5c40\u72b6\u6001\\n\\n\u7ba1\u7406\u5168\u5c40\u72b6\u6001\u7684\u6700\u7b80\u5355\u65b9\u6cd5\u662f\u5171\u4eab\u4e00\u4e2a[actor](/docs/actors)\u5b9e\u4f8b\u3002\u53ef\u4ee5\u5c06 actor \u89c6\u4e3a\u4e00\u4e2a\u201c\u5b58\u50a8\u201d\u2014\u2014\u4f60\u53ef\u4ee5\u8ba2\u9605\u5b83\u7684\u72b6\u6001\u66f4\u65b0\uff08\u201c\u5feb\u7167\u201d\uff09\u5e76\u5411\u5b83\u53d1\u9001\u4e8b\u4ef6\u3002\\n\\n\u4f60\u53ef\u4ee5\u901a\u8fc7\u5c06 actor \u4f5c\u4e3a prop \u4f20\u9012\u6216\u76f4\u63a5\u4ece\u6a21\u5757\u8303\u56f4\u5f15\u7528\u6765\u5728\u4efb\u4f55\u7ec4\u4ef6\u4e2d\u4f7f\u7528\u5b83\u3002\\n\\n```tsx\\nimport { setup, createActor } from \'xstate\';\\nimport { useSelector } from \'@xstate/react\';\\n\\n// \u5168\u5c40\u5e94\u7528\u903b\u8f91\\nconst countMachine = createMachine({\\n  context: { count: 0 },\\n  on: {\\n    inc: {\\n      actions: assign({ count: ({ context }) => context.count + 1 })\\n    }\\n  }\\n});\\n\\n// highlight-start\\n// \u5168\u5c40 actor - \u5e94\u7528\u903b\u8f91\u7684\u4e00\u4e2a\u5b9e\u4f8b\\nexport const countActor = createActor(countMachine);\\ncountActor.start(); // \u7acb\u5373\u542f\u52a8 actor\\n// highlight-end\\n\\nexport function App() {\\n  // highlight-start\\n  // \u8bfb\u53d6 actor \u7684\u5feb\u7167\\n  const count = useSelector(countActor, (state) => state.context.count);\\n  // highlight-end\\n\\n  return (\\n    // highlight-start\\n    // \u53d1\u9001\u4e8b\u4ef6\u7ed9 actor\\n    <button onClick={() => countActor.send({ type: \'inc\' })}>\\n    // highlight-end\\n      Count: {count}\\n    </button>\\n  );\\n}\\n```\\n\\n\u4f60\u53ef\u4ee5\u4ece\u4efb\u4f55\u7ec4\u4ef6\u4e2d\u8bfb\u53d6\u8fd9\u4e2a\u5168\u5c40 actor\uff08\u201c\u5b58\u50a8\u201d\uff09\u5e76\u5411\u5b83\u53d1\u9001\u4e8b\u4ef6\uff1a\\n\\n```tsx\\n// highlight-next-line\\nimport { countActor } from \'./countActor\';\\n\\nexport function Counter() {\\n  // highlight-next-line\\n  const count = useSelector(countActor, (state) => state.context.count);\\n\\n  return (\\n    // highlight-next-line\\n    <button onClick={() => countActor.send({ type: \'inc\' })}>\\n      Current count: {count}\\n    </button>\\n  );\\n}\\n```\\n\\n## \u526f\u4f5c\u7528\u548c\u751f\u547d\u5468\u671f\\n\\nactor \u4e0d\u4ec5\u9650\u4e8e\u4f5c\u4e3a\u72b6\u6001\u5b58\u50a8\u3002\u5b83\u4eec\u8fd8\u53ef\u4ee5\u7528\u4e8e\u7ba1\u7406\u526f\u4f5c\u7528\uff0c\u6bd4\u5982 HTTP \u8bf7\u6c42\uff0c\u6216\u8005\u4ece actor \u5185\u90e8\u89e6\u53d1\u526f\u4f5c\u7528\u3002\u56e0\u6b64\uff0c\u4f60\u53ef\u80fd\u4e0d\u5e0c\u671b actor \u7acb\u5373\u542f\u52a8\u3002\u4f60\u53ef\u4ee5\u4f7f\u7528 `.start()` \u65b9\u6cd5\u5728\u9002\u5f53\u7684\u65f6\u95f4\u542f\u52a8 actor\uff0c\u6bd4\u5982\u5728\u5e94\u7528\u6302\u8f7d\u65f6\u3002\\n\\n:::tip\\n\\n\u5982\u679c actor \u5df2\u7ecf\u542f\u52a8\uff0c\u518d\u6b21\u8c03\u7528 `.start()` \u5c06\u4e0d\u4f1a\u6709\u4efb\u4f55\u6548\u679c\u3002\u8fd9\u4f7f\u5f97\u5728 `useEffect()` \u4e2d\u8c03\u7528\u5b83\u662f\u5b89\u5168\u7684\uff0c`useEffect()` [\u5728\u5f00\u53d1\u73af\u5883\u7684\u4e25\u683c\u6a21\u5f0f\u4e0b\u4f1a\u6267\u884c\u4e24\u6b21](https://react.dev/reference/react/useEffect#my-effect-runs-twice-when-the-component-mounts)\u3002\\n\\n:::\\n\\n```ts\\nimport { effectfulActor } from \'./effectfulActor\';\\n\\nexport function App() {\\n  useEffect(() => {\\n    // highlight-next-line\\n    effectfulActor.start();\\n  }, [effectfulActor]);\\n\\n  // ...\\n}\\n```\\n\\n\u540c\u6837\uff0c\u4f60\u4e5f\u53ef\u4ee5\u901a\u8fc7\u8c03\u7528 `actor.stop()` \u6765\u63a7\u5236 actor \u4f55\u65f6\u505c\u6b62\u3002\\n\\n:::info\\n\\n\u5168\u5c40\u4f7f\u7528\u7684 actor \u5fc5\u987b\u663e\u5f0f\u542f\u52a8 (`actor.start()`)\u3002\u5f53\u4f7f\u7528 `@xstate/react` \u94a9\u5b50\u5982 `useMachine(\u2026)`\u3001`useSelector(\u2026)` \u7b49\u65f6\uff0cactor \u4f1a\u81ea\u52a8\u542f\u52a8\u548c\u505c\u6b62\u3002\\n\\n:::\\n\\n## \u4f7f\u7528 React Context \u7ba1\u7406\u5168\u5c40\u72b6\u6001\\n\\n\u5982\u679c\u4f60\u66f4\u559c\u6b22\u4f7f\u7528 [React Context](https://react.dev/learn/passing-data-deeply-with-context) \u6765\u5171\u4eab\u5168\u5c40\u72b6\u6001\uff0c\u4f60\u53ef\u4ee5\u5c06\u4e0a\u8ff0\u6a21\u5f0f\u9002\u914d\u4e3a\u4f7f\u7528 React Context \u63d0\u4f9b\u8005\u548c\u6d88\u8d39\u8005\u3002\\n\\n```tsx\\nimport { createContext } from \'react\';\\n\\nconst someMachine = createMachine(/* ... */);\\nconst someActor = createActor(someMachine);\\n\\n// \u4e0d\u8981\u5fd8\u8bb0\u542f\u52a8 actor\uff01\\nsomeActor.start();\\n\\n// \u5c06 `someActor` \u4f20\u9012\u7ed9 `createContext` \u4e3b\u8981\u662f\u4e3a\u4e86\u7c7b\u578b\u5b89\u5168\\n// highlight-next-line\\nexport const SomeActorContext = createContext(someActor);\\n\\nexport function App() {\\n  return (\\n    // highlight-next-line\\n    <SomeActorContext.Provider value={someActor}>\\n      <Counter />\\n    // highlight-next-line\\n    </SomeActorContext.Provider>\\n  );\\n}\\n```\\n\\n```tsx\\nimport { useContext } from \'react\';\\nimport { useSelector } from \'@xstate/react\';\\n// highlight-next-line\\nimport { SomeActorContext } from \'./SomeActorContext\';\\n\\nexport function Counter() {\\n  // highlight-next-line\\n  const someActor = useContext(SomeActorContext);\\n  const count = useSelector(someActor, (state) => state.context.count);\\n\\n  return (\\n    // highlight-next-line\\n    <button onClick={() => someActor.send({ type: \'inc\' })}>\\n      Current count: {count}\\n    </button>\\n  );\\n}\\n```\\n\\n:::tip\\n\\n`@xstate/react` \u5305\u8fd8\u63d0\u4f9b\u4e86\u4e00\u4e2a `createActorContext(\u2026)` \u51fd\u6570\u4ee5\u65b9\u4fbf\u4f7f\u7528\u3002\u9605\u8bfb\u5173\u4e8e[\u5728 React \u4e2d\u4f7f\u72b6\u6001\u673a\u5168\u5c40\u5316](/blog/2023-1-27-making-state-machines-global-in-react)\u7684\u535a\u5ba2\u6587\u7ae0\uff0c\u5e76\u67e5\u770b[`createActorContext(\u2026)` \u7684\u6587\u6863](/docs/xstate-react#createactorcontextlogic)\u3002\\n\\n:::\\n\\n## \u4e0d\u4ec5\u4ec5\u662f\u72b6\u6001\u673a\\n\\n\u72b6\u6001\u673a\u975e\u5e38\u5f3a\u5927\u4e14\u6709\u7528\uff0c\u4f46\u6709\u65f6\u4f60\u4e0d\u9700\u8981\u6240\u6709\u8fd9\u4e9b\u529f\u80fd\u3002XState v5 \u4f7f\u4f60\u80fd\u591f\u521b\u5efa[\u4e0d\u540c\u7c7b\u578b\u7684 actor \u903b\u8f91](/docs/category/actors)\u4ee5\u9002\u5e94\u4f60\u7684\u7528\u4f8b\uff0c\u4f8b\u5982\u57fa\u4e8e promise\u3001observable\u3001\u8f6c\u6362\u51fd\u6570\u3001\u56de\u8c03\u7b49\u7684 actor \u903b\u8f91\u3002\\n\\n```ts\\n// highlight-next-line\\nimport { fromTransition, createActor } from \'xstate\';\\nimport { useSelector } from \'@xstate/react\'\\n\\n// highlight-start\\n// \u6f14\u5458\u903b\u8f91\\nconst counterLogic = fromTransition((state, event) => {\\n  if (event.type === \'inc\') {\\n    return { count: state.count + 1 };\\n  }\\n  return state;\\n}, { count: 0 });\\n// highlight-end\\n\\nconst counterActor = createActor(counterLogic);\\ncounterActor.start();\\n\\n// Same API\\nexport function Counter() {\\n  const count = useSelector(counterActor, (state) => state.context.count);\\n\\n  return (\\n    <button onClick={() => counterActor.send({ type: \'inc\' })}>\\n      Current count: {count}\\n    </button>\\n  );\\n}\\n```"},{"id":"2024-02-07-single-file-pr","metadata":{"permalink":"/xstate-zh/blog/2024-02-07-single-file-pr","editUrl":"https://github.com/statelyai/docs/edit/main/blog/2024-02-07-single-file-prs/index.mdx","source":"@site/blog/2024-02-07-single-file-prs/index.mdx","title":"Edit a state machine from GitHub without touching any code","description":"Import a state machine from GitHub to Stately, edit the machine, and make a pull request back to GitHub without touching any code.","date":"2024-02-07T00:00:00.000Z","formattedDate":"February 7, 2024","tags":[{"label":"new","permalink":"/xstate-zh/blog/tags/new"},{"label":"github","permalink":"/xstate-zh/blog/tags/github"},{"label":"github sync","permalink":"/xstate-zh/blog/tags/github-sync"},{"label":"import","permalink":"/xstate-zh/blog/tags/import"},{"label":"pr","permalink":"/xstate-zh/blog/tags/pr"},{"label":"pull request","permalink":"/xstate-zh/blog/tags/pull-request"}],"readingTime":2.225,"hasTruncateMarker":true,"authors":[{"name":"Laura Kalbag","title":"Stately Team","url":"https://github.com/laurakalbag","imageURL":"https://ascelcgzufjyvdzuplwo.supabase.co/storage/v1/object/public/avatars/laura.png","key":"laura"}],"frontMatter":{"title":"Edit a state machine from GitHub without touching any code","description":"Import a state machine from GitHub to Stately, edit the machine, and make a pull request back to GitHub without touching any code.","authors":["laura"],"tags":["new","github","github sync","import","pr","pull request"],"date":"2024-02-07T00:00:00.000Z","slug":"2024-02-07-single-file-pr","image":"/blog/2024-02-07-single-file-pr.png"},"unlisted":false,"prevItem":{"title":"\u4f7f\u7528 XState \u548c React \u7ba1\u7406\u5168\u5c40\u72b6\u6001","permalink":"/xstate-zh/blog/2024-02-12-xstate-react-global-state"},"nextItem":{"title":"\u5c06\u72b6\u6001\u673a\u8fc1\u79fb\u5230 XState v5","permalink":"/xstate-zh/blog/2024-02-02-migrating-machines-to-xstate-v5"}},"content":"You use XState in your codebase, and you want to make a change to a state machine. You don\u2019t want to touch any code but want to make a pull request back to GitHub. Our single file import feature lets you do it all in the browser.\\n\\n{/* truncate */}\\n\\nThis time last year, [we introduced importing a single file into the Stately Studio from GitHub](/blog/2023-02-06-github-import-machines). Now, we\u2019re taking it a step further. As part of our [bi-directional GitHub integration](/blog/2024-01-09-introducing-bidirectional-github-sync), you can import a state machine (or multiple state machines!) from a single file in GitHub, make changes in Stately Studio, and make a pull request back to GitHub without touching any code. You can do it all in the browser; no code editor required.\\n\\n## Quickly visualize any state machine from GitHub\\n\\n![Using a bookmarklet to import a state machine from GitHub to Stately Studio](single-file-import.gif)\\n\\nTo get any state machine from GitHub into Stately Studio, just change the `.com` part of the URL to `.stately.ai`. For example, `https://github.com/username/repo/blob/main/apps/superMachine.ts`, becomes\\n`https://github.stately.ai/username/repo/blob/main/apps/superMachine.ts`. Hit enter, and you\u2019ll be taken to Stately Studio with the machine visualized and ready to edit.\\n\\nOr, for even speedier access, use our bookmarklet. Just drag the following bookmarklet link to your bookmarks:\\n\\n<p>\\n<a style={{border: \'1px solid\', borderRadius: \'1rem\', padding: \'0.5rem 0.75rem\'}} href=\\"javascript:(function()%7Bjavascript%3A(function()%7B%20location.href%20%3D%20\'https%3A%2F%2Fgithub.stately.ai%2F\'%20%2B%20window.location.pathname%3B%7D)()%3B%7D)()%3B\\">GitHub \u2192 Stately</a>\\n</p>\\n\\nOr add the bookmarklet manually:\\n\\n1. Add a new bookmark to your browser.\\n2. Set the bookmark\u2019s web address to the following:\\n    ```javascript:(function(){ location.href = \'https://github.stately.ai/\' + window.location.pathname;})();```\\n3. Click the bookmarklet when viewing a GitHub file containing one or more machines to import that machine to Stately Studio.\\n\\nYou only need a [GitHub personal access token](/docs/import-from-github/#github-personal-access-token) and a [Stately Pro account, which you can try with a free trial](https://stately.ai/pricing).\\n\\n## Make GitHub pull requests from inside Stately Studio\\n\\nOnce your machine is in Stately Studio, you can make your changes. When you\u2019re ready to make a pull request back to GitHub, use the **Create pull request** button in the top bar. Now we\u2019re developers here at Stately, so we know you don\u2019t necessarily want to make a pull request if you don\u2019t know what the code looks like, so before your pull request is created, you can see a code diff of the changes you\u2019ve made in Stately Studio.\\n\\n<p>\\n  <ThemedImage\\n    alt=\\"The pull request modal in Stately Studio showing deleted lines of code in red and inserted lines of code in green.\\"\\n    sources={{\\n      light: \'/blog/2024-02-07-single-file-prs/diff.png\',\\n      dark: \'/blog/2024-02-07-single-file-prs/diff-dm.png\',\\n    }}\\n  />\\n</p>\\n\\nOur GitHub integration is a premium feature of Stately Studio. You can try our premium plans with a free trial. [Sign up today](https://stately.ai) or [check out our Pro plan](/docs/studio-pro-plan), [Team plan](/docs/studio-team-plan), and [Enterprise plan](/docs/studio-enterprise-plan) features."},{"id":"2024-02-02-migrating-machines-to-xstate-v5","metadata":{"permalink":"/xstate-zh/blog/2024-02-02-migrating-machines-to-xstate-v5","editUrl":"https://github.com/statelyai/docs/edit/main/blog/2024-02-02-migrating-machines-to-xstate-v5/index.mdx","source":"@site/blog/2024-02-02-migrating-machines-to-xstate-v5/index.mdx","title":"\u5c06\u72b6\u6001\u673a\u8fc1\u79fb\u5230 XState v5","description":"\u8fc1\u79fb\u73b0\u6709 XState v4 \u72b6\u6001\u673a\u5230 XState v5 \u7684\u6307\u5357","date":"2024-02-02T00:00:00.000Z","formattedDate":"February 2, 2024","tags":[{"label":"stately","permalink":"/xstate-zh/blog/tags/stately"},{"label":"studio","permalink":"/xstate-zh/blog/tags/studio"},{"label":"\u91cd\u5927\u53d8\u5316","permalink":"/xstate-zh/blog/tags/\u91cd\u5927\u53d8\u5316"},{"label":"\u8fc1\u79fb","permalink":"/xstate-zh/blog/tags/\u8fc1\u79fb"},{"label":"XState v5","permalink":"/xstate-zh/blog/tags/x-state-v-5"},{"label":"\u72b6\u6001\u673a","permalink":"/xstate-zh/blog/tags/\u72b6\u6001\u673a"},{"label":"xstate","permalink":"/xstate-zh/blog/tags/xstate"}],"readingTime":22.12,"hasTruncateMarker":true,"authors":[{"name":"Kevin Maes","title":"Stately Team","url":"https://github.com/kevinmaes","imageURL":"https://ascelcgzufjyvdzuplwo.supabase.co/storage/v1/object/public/avatars/kevin.png","key":"kevin"}],"frontMatter":{"title":"\u5c06\u72b6\u6001\u673a\u8fc1\u79fb\u5230 XState v5","description":"\u8fc1\u79fb\u73b0\u6709 XState v4 \u72b6\u6001\u673a\u5230 XState v5 \u7684\u6307\u5357","tags":["stately","studio","\u91cd\u5927\u53d8\u5316","\u8fc1\u79fb","XState v5","\u72b6\u6001\u673a","xstate"],"authors":["kevin"],"date":"2024-02-02T00:00:00.000Z","slug":"2024-02-02-migrating-machines-to-xstate-v5","image":"/blog/2024-02-02-migrating-machines-to-xstate-v5.png"},"unlisted":false,"prevItem":{"title":"Edit a state machine from GitHub without touching any code","permalink":"/xstate-zh/blog/2024-02-07-single-file-pr"},"nextItem":{"title":"Changelog Week 5 2024","permalink":"/xstate-zh/blog/2024-01-30-changelog"}},"content":"\u6211\u4eec\u6700\u8fd1[\u5ba3\u5e03\u53d1\u5e03 XState v5](/blog/2023-12-01-xstate-v5)! \u5728\u5176\u6d4b\u8bd5\u9636\u6bb5\uff0c\u6211\u4eec\u521b\u5efa\u4e86\u4e00\u4e2a[\u8fc1\u79fb\u6307\u5357](/docs/migration)\uff0c\u4e13\u95e8\u6307\u51fa\u91cd\u5927\u53d8\u5316\uff0c\u5e76\u4e3a\u5f00\u53d1\u4eba\u5458\u63d0\u4f9b\u6709\u5173 API \u66f4\u6539\u7684\u6301\u7eed\u66f4\u65b0\u3002\u672c\u7bc7\u6587\u7ae0\u662f\u4ece v4 \u8fc1\u79fb\u5230 v5 \u7684\u73b0\u6709 XState \u72b6\u6001\u673a\u7684\u6307\u5357\uff0c\u65e8\u5728\u4f5c\u4e3a\u8fc1\u79fb\u6307\u5357\u7684\u9010\u6b65\u4f34\u4fa3\u3002\u5b83\u8fd8\u4fa7\u91cd\u4e8e\u8fc1\u79fb[\u4f7f\u7528 TypeScript \u7684 XState \u72b6\u6001\u673a](/docs/typescript)\u3002\\n\\n{/* truncate */}\\n\\n:::info\\n\\n\u9605\u8bfb[David \u5173\u4e8e XState v5 \u53d1\u5e03\u7684\u535a\u5ba2\u6587\u7ae0](/blog/2023-12-01-xstate-v5)\u3002\\n\\n\u559c\u6b22\u89c6\u9891\uff1f[\u89c2\u770b\u6211\u4eec\u5728 YouTube \u4e0a\u7684 XState v5 \u7f51\u7edc\u7814\u8ba8\u4f1a](https://www.youtube.com/live/TRVjeil-y74):\\n\\n<YouTube id=\\"TRVjeil-y74\\" />\\n\\n:::\\n\\n\u6211\u4eec\u5728 Stately \u7684 [Stately Studio](https://stately.ai/studio) \u4ee3\u7801\u5e93\u4e2d\u6709\u6570\u5341\u4e2a XState \u72b6\u6001\u673a\uff0c\u5e76\u4e14\u4e5f\u5728\u5c06\u5b83\u4eec\u8fc1\u79fb\u5230 XState v5\u3002\u5728\u54a8\u8be2\u4e86\u6211\u7684\u4e13\u5bb6\u961f\u53cb Mateusz \u540e\uff0c\u6211\u5b66\u5230\u4e86\u5f88\u591a\u5173\u4e8e\u8fc1\u79fb\u8fc7\u7a0b\u7684\u77e5\u8bc6\uff0c\u5e76\u5e0c\u671b\u5206\u4eab\u4e00\u4e9b\u7ecf\u9a8c\uff0c\u4ee5\u4f7f\u60a8\u7684\u8fc1\u79fb\u8fc7\u7a0b\u66f4\u52a0\u987a\u5229\u3002\\n\\n\u4ee5\u4e0b\u662f\u60a8\u53ef\u4ee5\u9075\u5faa\u7684\u4e00\u7cfb\u5217\u6b65\u9aa4\uff0c\u4ee5\u5c06\u73b0\u6709\u7684 XState v4 \u72b6\u6001\u673a\u8fc1\u79fb\u5230 XState v5\u3002\u987a\u5e8f\u4ec5\u662f\u5efa\u8bae\uff0c\u800c\u4e0d\u662f\u8981\u6c42\u3002\\n\\n1. [\u5b89\u88c5 XState v5 \u548c\u4f9d\u8d56\u9879](#1-install-xstate-v5-and-dependencies)\\n2. [\u5c06\u7c7b\u578b\u79fb\u81f3 `setup()` \u5e76\u79fb\u9664 typegen](#2-move-types-to-setup-and-remove-typegen)\\n3. [\u5c06\u52a8\u4f5c\u548c\u5b88\u536b\u5b57\u7b26\u4e32\u8f6c\u6362\u4e3a\u53c2\u6570\u5316\u5bf9\u8c61](#3-convert-action-and-guard-strings-to-parameterized-objects)\\n4. [\u5728 `setup()` \u4e2d\u5305\u542b\u5b9e\u73b0\u6216\u5b58\u6839](#4-include-implementations-or-stubs-in-setup)\\n5. [\u63d0\u4f9b\u5177\u4f53\u5b9e\u73b0](#5-provide-concrete-implementations)\\n\\n:::tip\\n\\n\u5bf9\u4e8e\u6b65\u9aa4 2-5\uff0c\u60a8\u53ef\u80fd\u4f1a\u53d1\u73b0\u66f4\u5bb9\u6613\u5904\u7406\u73b0\u6709\u72b6\u6001\u673a\u7684\u4e00\u5c0f\u90e8\u5206\uff0c\u4f8b\u5982\u4e00\u4e2a\u5355\u4e00\u7684\u4e8b\u4ef6\u6216\u52a8\u4f5c\uff0c\u5e76\u5728\u6b65\u9aa4 2-5 \u4e2d\u5b8c\u5168\u8fc1\u79fb\u5b83\uff0c\u4ee5\u4fbf\u5728\u8fc7\u7a0b\u4e2d\u9694\u79bb TypeScript \u9519\u8bef\u7684\u539f\u56e0\u548c\u4fee\u590d\u3002\\n\\n:::\\n\\n## 1. \u5b89\u88c5 XState v5 \u548c\u4f9d\u8d56\u9879\\n\\n\u7b2c\u4e00\u6b65\u662f[\u5b89\u88c5 XState v5](/docs/xstate#installation)\u3002\u5982\u679c\u60a8\u4f7f\u7528\u7684\u662f\u6846\u67b6\u6216\u5e93\uff0c\u60a8\u8fd8\u53ef\u4ee5\u5b89\u88c5\u5176\u4e2d\u4e00\u4e2a\u96c6\u6210\u5305\uff1a\\n\\n- [React](/docs/xstate-react)\\n- [Vue](/docs/xstate-vue)\\n- [Svelte](/docs/xstate-svelte)\\n\\n### \u540c\u65f6\u5b89\u88c5 XState v4 \u548c v5\\n\\n\u5982\u679c\u60a8\u6709\u8bb8\u591a\u72b6\u6001\u673a\uff0c\u5e76\u5e0c\u671b\u9010\u6b65\u5c06\u5b83\u4eec\u8fc1\u79fb\u5230 v5\uff0c\u60a8\u53ef\u4ee5\u6309\u7167[\u8fd9\u91cc\u5217\u51fa\u7684\u8fc1\u79fb\u6b65\u9aa4](/docs/migration#how-can-i-use-both-xstate-v4-and-v5)\u540c\u65f6\u5b89\u88c5 v4 \u548c v5\u3002\u5b8c\u6210\u8fd9\u4e9b\u6b65\u9aa4\u540e\uff0c\u60a8\u5c06\u5728 `package.json` \u4e2d\u540c\u65f6\u62e5\u6709\u8fd9\u4e24\u4e2a\u4f9d\u8d56\u9879\u3002\\n\\n\u4e3a\u4e86\u5b89\u88c5\u96c6\u6210\u5305\uff0c\u60a8\u9700\u8981[\u8fd0\u884c\u4e00\u4e2a\u811a\u672c](/docs/migration#how-can-i-use-both-xstate-v4-and-v5)\u3002\\n\\n\u4ee5\u4e0b\u662f\u4e00\u4e2a\u793a\u4f8b\uff0c\u5e93\u56fa\u5b9a\u5728\u64b0\u5199\u672c\u6587\u65f6\u7684\u6700\u65b0\u7248\u672c\uff0c\u4f46\u5982\u679c\u60a8\u613f\u610f\uff0c\u4e5f\u53ef\u4ee5\u4f7f\u7528 `npm:xstate@latest`\u3002\\n\\n```json5\\n// \u5b8c\u6210\u8fc1\u79fb\u6307\u5357\u4e2d\u7684\u6b65\u9aa4\u540e\u7684 package.json\\n{\\n  dependencies: {\\n    xstate: \'4.38.2\',\\n    xstate5: \'npm:xstate@5.6.0\',\\n    \'@xstate/react\': \'3.2.2\',\\n    \'@xstate/react5\': \'npm:@xstate/react@4.0.3\',\\n  },\\n}\\n```\\n\\n:::tip\\n\\n\u6216\u8005\uff0c\u60a8\u4e5f\u53ef\u4ee5\u5c06 `xstate` \u9ed8\u8ba4\u8bbe\u7f6e\u4e3a v5\uff0c\u5e76\u5c06 v4 \u7528\u4e8e `xstate4`\u3002\\n\\n:::\\n\\n### \u4ece\u7248\u672c\u5316\u5305\u4e2d\u5bfc\u5165\\n\\n\u5982\u679c\u540c\u65f6\u4f7f\u7528\u53cc\u91cd\u5b89\u88c5\uff08v4 \u548c v5\uff09\uff0c\u6216\u8005\u5373\u4f7f\u4ec5\u4f7f\u7528 v5\uff0c\u60a8\u90fd\u9700\u8981\u786e\u4fdd\u4ece v5 \u5305\u4e2d\u5bfc\u5165 XState \u51fd\u6570\u3002\u5728\u6587\u4ef6\u7684\u9876\u90e8\uff0c\u4ece `xstatev5` \u5305\u4e2d\u5bfc\u5165 `setup`\u3001`assign` \u548c\u5176\u4ed6\u52a8\u4f5c\u521b\u5efa\u5668\u7b49\u51fd\u6570\u3002\\n\\n:::warning\\n\\n\u907f\u514d\u4e0d\u5339\u914d\uff01\u4ece XState v5 \u8c03\u7528 `createMachine({})`\uff0c\u4f46\u4ece v4 \u5bfc\u5165\u7684 XState \u51fd\u6570\uff08\u5982 `assign`\uff09\u53ef\u80fd\u4f1a\u5bfc\u81f4\u7c7b\u578b\u9519\u8bef\u3002\\n\\n:::\\n\\n```ts\\n// \u5728 v5 \u673a\u5668\u4e2d...\\nconst machine = setup().createMachine({\\n  context: {\\n    prop: \'defaultValue\',\\n  },\\n  on: {\\n    next: {\\n      // \u786e\u4fdd\u4ece v5 \u5305\u4e2d\u5bfc\u5165 assign\\n      // \u800c\u4e0d\u662f\u4ece v4\uff01\\n      actions: assign({ prop: \'value\' }),\\n    },\\n  },\\n});\\n```\\n\\n## 2. \u5c06\u7c7b\u578b\u79fb\u81f3 `setup()` \u5e76\u79fb\u9664 typegen\\n\\n\u57fa\u4e8e\u91cd\u5927\u53d8\u5316\u7684\u7b2c\u4e00\u4e2a\u8fc1\u79fb\u6b65\u9aa4\u4e4b\u4e00\u662f\u4ece v4 \u7684\u673a\u5668\u914d\u7f6e\u7684 `schema` \u5c5e\u6027\u4e2d\u79fb\u9664\u4efb\u4f55 TypeScript \u7c7b\u578b\u3002\u8fd9\u4e9b\u7c7b\u578b\u73b0\u5728\u5e94\u8be5\u5305\u542b\u5728\u4f20\u9012\u7ed9\u65b0\u7684 `setup({})` \u51fd\u6570\u7684\u5bf9\u8c61\u4e2d\u7684\u65b0 `types` \u5c5e\u6027\u4e0b\u3002\\n\\n\u5728 v5 \u4e2d\u4ecd\u7136\u652f\u6301\u5c06\u7c7b\u578b\u4f20\u9012\u7ed9 `createMachine({ schema: {} })`\uff0c\u7136\u800c\uff0c\u4f20\u9012\u5b83\u4eec\u7ed9 `setup({})` \u662f\u9996\u9009\uff0c\u56e0\u4e3a\u5b83\u81ea\u52a8\u5c06\u5b9e\u73b0\uff08\u4ee5\u53ca\u66f4\u591a\uff09\u7c7b\u578b\u5316\u3002\\n\\n<Tabs>\\n\\n<TabItem value=\\"v4\\" label=\\"XState v4\\">\\n\\n```ts\\nimport { createMachine } from \'xstate\';\\n\\nconst machine = createMachine({\\n  ...\\n  tsTypes: {} as import(\'./myMachine.typegen\').Typegen0,\\n  schema: {\\n    context: {} as {\\n      prop1: string;\\n      prop2: number;\\n    },\\n    events: {} as\\n    | {\\n        type: \'next\';\\n        value: number;\\n    } | {\\n        type: \'back\';\\n        value: number;\\n      };\\n    },\\n    services: {} as {\\n      fetchUserDetails: {\\n        data: { email: string, name: string };\\n      };\\n    },\\n  }\\n});\\n```\\n\\n</TabItem>\\n\\n<TabItem value=\\"v5\\" label=\\"XState v5\\">\\n\\n```ts\\nimport { setup } from \'xstate\';\\n\\nconst machine = setup({\\n  types: {} as {\\n    context: {\\n      prop1: string;\\n      prop2: number;\\n    };\\n    events:\\n      | {\\n          type: \'next\';\\n          value: number;\\n        }\\n      | {\\n          type: \'back\';\\n          value: number;\\n        };\\n  },\\n  /* \u5b9e\u73b0 */\\n  actions: {},\\n  guards: {},\\n  // Actor \u8f93\u5165\u548c\u8f93\u51fa\u7c7b\u578b\u5c06\u5305\u542b\u5728\u8fd9\u91cc\\n  actors: {},\\n}).createMachine({\\n  /* \u673a\u5668\u914d\u7f6e */\\n});\\n```\\n\\n</TabItem>\\n\\n</Tabs>\\n\\n\u5b9a\u4e49\u7c7b\u578b\u65f6\uff0c\u60a8\u53ef\u80fd\u5df2\u7ecf\u5728\u4e4b\u524d\u7684\u793a\u4f8b\u4e2d\u6ce8\u610f\u5230\uff0c\u901a\u5e38\u4f1a\u5c06\u4e00\u4e2a\u7a7a\u5bf9\u8c61\u5f3a\u5236\u8f6c\u6362\u4e3a\u60a8\u5e0c\u671b\u7684\u6bcf\u4e2a\u5c5e\u6027\u7684\u7c7b\u578b\uff0c\u4f8b\u5982 `events` \u548c `actions`\u3002\\n\\n```ts\\nconst machine = setup({\\n  types: {\\n    context: {} as {\\n      prop1: string;\\n      prop2: number;\\n    };\\n    events: {} as { type: \'next\' } | { type: \'next\' };\\n  },\\n})\\n```\\n\\n\u8fd9\u4ecd\u7136\u6709\u6548\uff0c\u4f46\u66f4\u7b80\u5355\u7684\u65b9\u6cd5\u662f\u5c06\u6574\u4e2a\u7c7b\u578b\u5bf9\u8c61\u4e00\u6b21\u6027\u5f3a\u5236\u8f6c\u6362\u4e3a `types: {} as {}`\u3002\\n\\n```ts\\nconst machine = setup({\\n  types: {} as {\\n    context: {\\n      prop1: string;\\n      prop2: number;\\n    };\\n    events: { type: \'next\' } | { type: \'next\' };\\n  },\\n});\\n```\\n\\n:::warning\\n\\n\u5728 v5 \u4e2d\u94fe\u63a5 `setup({ types: {} }).createMachine({})` \u65f6\uff0c\u6211\u4eec\u53ea\u80fd\u5728\u4f20\u9012\u7ed9 `setup` \u7684\u5bf9\u8c61\u4e0a\u5b9a\u4e49\u7c7b\u578b\uff0c\u800c\u4e0d\u80fd\u5728\u4f20\u9012\u7ed9 `createMachine` \u7684\u914d\u7f6e\u5bf9\u8c61\u4e0a\u5b9a\u4e49\u7c7b\u578b\u3002\\n\\n:::\\n\\n### \u79fb\u9664 typegen\\n\\nTypegen \u5728 XState v5 \u4e2d\u4e0d\u518d\u652f\u6301\uff0c\u56e0\u6b64\u60a8\u53ef\u4ee5\u4ece\u673a\u5668\u914d\u7f6e\u4e2d\u79fb\u9664 `tsTypes`\u3002\u6ca1\u6709 typegen \u7684\u60c5\u51b5\u4e0b\uff0c\u5728\u52a8\u4f5c\u548c\u5b88\u536b\u4e2d\u952e\u5165\u4e8b\u4ef6\u5fc5\u987b\u901a\u8fc7\u5728\u5b9e\u73b0\u51fd\u6570\u4e2d\u624b\u52a8\u8fdb\u884c\u7c7b\u578b\u7f29\u5c0f\u6765\u5b8c\u6210\u3002\u7136\u800c\uff0c\u4ee5\u4e0b\u90e8\u5206\u5c06\u5411\u60a8\u5c55\u793a\u5982\u4f55\u952e\u5165\u4f20\u9012\u7ed9\u8fd9\u4e9b\u5b9e\u73b0\u7684\u65b0 `params` \u53c2\u6570\uff0c\u5e76\u8df3\u8fc7\u624b\u52a8\u7c7b\u578b\u7f29\u5c0f\u3002\\n\\n## 3. \u5c06\u52a8\u4f5c\u548c\u5b88\u536b\u5b57\u7b26\u4e32\u8f6c\u6362\u4e3a\u53c2\u6570\u5316\u5bf9\u8c61\\n\\n\u6211\u4eec\u53ef\u4ee5\u5c06\u673a\u5668\u914d\u7f6e\u4e2d\u7684\u52a8\u4f5c\u548c\u5b88\u536b\u5b57\u7b26\u4e32\u8f6c\u6362\u4e3a\u53c2\u6570\u5316\u5bf9\u8c61\u3002\u5982\u679c\u5b83\u4eec\u9700\u8981\u4f7f\u7528 `event` \u5c5e\u6027\uff0c\u8fd9\u5bf9\u4e8e\u8f6c\u6362\u4e0a\u7684\u52a8\u4f5c\u548c\u5b88\u536b\u7279\u522b\u6709\u5e2e\u52a9\u3002\u8fd9\u5141\u8bb8\u60a8\u663e\u5f0f\u5730\u5c06 `event` \u5c5e\u6027\u6620\u5c04\u5230\u5b9e\u73b0\u51fd\u6570\u7684 `params` \u5bf9\u8c61\uff0c\u4ee5\u4fbf\u5b83\u4eec\u81ea\u52a8\u952e\u5165\uff0c\u5e76\u4e14\u4e0d\u9700\u8981\u989d\u5916\u7684[\u7c7b\u578b\u7f29\u5c0f](https://www.typescriptlang.org/docs/handbook/2/narrowing.html)\u3002\\n\\n\u53e6\u4e00\u65b9\u9762\uff0c\u5982\u679c\u5b83\u4eec\u4ec5\u4f7f\u7528 `context` \u503c\uff08\u5df2\u952e\u5165\uff09\uff0c\u60a8\u53ef\u4ee5\u7ee7\u7eed\u4f7f\u7528\u5f15\u7528\u5b57\u7b26\u4e32\u547d\u540d\u7684 `entry` \u548c `exit` \u52a8\u4f5c\u6216\u5b88\u536b\u3002\u751a\u81f3\u53ef\u4ee5\u5728\u914d\u7f6e\u4e2d\u4f7f\u7528\u5185\u8054\u51fd\u6570\u3002\\n\\n\u4f8b\u5982\uff0c\u8fd9\u4e9b\u4e8b\u4ef6\u5728 XState v5 \u4e2d\u4ecd\u7136\u5b8c\u5168\u53ef\u4ee5\u50cf\u5728 v4 \u4e2d\u4e00\u6837\u4f7f\u7528\uff1a\\n\\n```ts\\nimport { setup } from \'xstate\';\\n\\nconst machine = setup({\\n  types: {} as {\\n    context: {\\n      prop1: string;\\n    };\\n  }\\n} })\\n.createMachine({\\n  states: {\\n    first: {\\n      entry: \'track\',\\n      exit: ({ context }) => {\\n        console.log(context.prop1, \'is already typed\');\\n      },\\n    },\\n  },\\n});\\n```\\n\\n\u5bf9\u4e8e\u8f6c\u6362\u4e8b\u4ef6\u548c\u5b88\u536b\uff0c\u6211\u4eec\u53ef\u4ee5[\u5c06\u547d\u540d\u7684\u52a8\u4f5c\u6216\u5b88\u536b\u5b57\u7b26\u4e32\u8f6c\u6362\u4e3a\u52a8\u4f5c\u5bf9\u8c61](/docs/migration#use-params-to-pass-params-to-actions--guards)\uff0c\u8fd9\u5141\u8bb8\u6211\u4eec\u5b9a\u4e49\u4e00\u4e2a\u663e\u5f0f\u7684 `params` \u5bf9\u8c61\uff0c\u8be5\u5bf9\u8c61\u5c06\u5728\u8fd0\u884c\u65f6\u7531\u6211\u4eec\u7684\u5b9e\u73b0\u51fd\u6570\u63a5\u6536\u3002\u6709\u4e24\u79cd\u65b9\u6cd5\u53ef\u4ee5\u505a\u5230\u8fd9\u4e00\u70b9\uff1a\\n\\n1. \u6211\u4eec\u53ef\u4ee5\u5c06 `params` \u5b9a\u4e49\u4e3a[\u9759\u6001\u503c](/docs/actions#action-objects)\\n2. \u4f7f\u7528[\u52a8\u6001\u52a8\u4f5c\u53c2\u6570](/docs/actions#dynamic-action-parameters)\uff0c\u8fd9\u662f\u4e00\u4e2a\u63a5\u6536 `context` \u548c/\u6216 `event` \u7684\u51fd\u6570\uff0c\u5141\u8bb8\u60a8\u5c06\u8fd9\u4e9b\u503c\u6620\u5c04\u5230 `params` \u5bf9\u8c61\u3002\\n\\n<Tabs>\\n\\n<TabItem value=\\"v4\\" label=\\"XState v4\\">\\n\\n```ts\\nimport { createMachine } from \'xstate\';\\n\\nconst machine = createMachine({\\n  on: {\\n    next: {\\n      actions: [\'track\'],\\n    },\\n    back: {\\n      actions: [\'track\'],\\n    },\\n  },\\n});\\n```\\n\\n</TabItem>\\n\\n<TabItem value=\\"v5\\" label=\\"XState v5\\">\\n\\n```ts\\nimport { createMachine } from \'xstate\';\\n\\nconst machine = createMachine({\\n  on: {\\n    next: {\\n      actions: [\\n        {\\n          type: \'track\',\\n            // \u9759\u6001\u5b9a\u4e49\u7684\u53c2\u6570\\n            params: { response: \'good\' },\\n          },\\n          ],\\n        },\\n        back: {\\n          actions: [\\n          {\\n            type: \'track\',\\n            // \u52a8\u6001\u5b9a\u4e49\u7684\u53c2\u6570\\n          params: ({ event }) => ({\\n            rating: event.rating,\\n          }),\\n        },\\n      ],\\n    },\\n  },\\n});\\n```\\n\\n</TabItem>\\n\\n</Tabs>\\n\\n\u8fd9\u5728 v5 \u4e2d\u53ef\u80fd\u663e\u5f97\u6709\u4e9b\u5197\u957f\uff0c\u4f46\u5b83\u5c06\u5141\u8bb8\u6211\u4eec\u5728\u5b9e\u73b0\u51fd\u6570\u4e2d\u8df3\u8fc7\u624b\u52a8\u7c7b\u578b\u7f29\u5c0f\u3002`params` \u5bf9\u8c61\u5c06\u6839\u636e\u6211\u4eec\u6620\u5c04\u5230\u5b83\u7684 `event` \u5c5e\u6027\u81ea\u52a8\u952e\u5165\u3002\\n\\n:::tip\\n\\n\u5728\u6620\u5c04 `event` \u5c5e\u6027\u65f6\uff0c\u60a8\u5b9a\u4e49\u7684\u52a8\u4f5c\u6216\u5b88\u536b `params` \u6280\u672f\u4e0a\u53ef\u4ee5\u662f\u4efb\u4f55\u503c\uff0c\u800c\u4e0d\u4ec5\u4ec5\u662f\u5bf9\u8c61\u3002\u4f46\u5efa\u8bae\u4f7f\u7528\u5bf9\u8c61\u4ee5\u4fdd\u6301\u4e00\u81f4\u6027\uff0c\u5e76\u660e\u786e\u5b9e\u73b0\u51fd\u6570\u5c06\u63a5\u6536\u4ec0\u4e48\u3002\\n\\n:::\\n\\n\u4ee5\u4e0b\u662f\u5c06\u52a8\u4f5c\u5b57\u7b26\u4e32\u8f6c\u6362\u4e3a\u53c2\u6570\u5316\u52a8\u4f5c\u7684\u66f4\u5b8c\u6574\u793a\u4f8b\uff1a\\n\\n```ts\\nimport { setup } from \'xstate\';\\n\\nconst machine = setup({\\n  types: {} as {\\n    events: {\\n      type: \'next\';\\n      prop1: string;\\n      prop2: number;\\n      prop3: boolean;\\n    };\\n  },\\n  /* \u66f4\u591a\u8bbe\u7f6e */\\n}).createMachine({\\n  on: {\\n    next: {\\n      target: \'first\',\\n      actions: [\\n        {\\n          guard: {\\n            type: \'is this ready\',\\n            params: ({ event }) => ({ ready: event.ready }),\\n          },\\n            type: \'doThis\',\\n            // \u7a0d\u540e\uff0c\u52a8\u4f5c\u5b9e\u73b0\u51fd\u6570\u5c06\u5728\u7b2c\u4e8c\u4e2a\u53c2\u6570 params \u4e2d\u63a5\u6536\u8fd9\u4e2a\u5b57\u7b26\u4e32\u503c\u3002\\n            params: ({ event }) => ({ prop1: event.prop1 }),\\n          },\\n          {\\n            type: \'doThat\',\\n            // \u7a0d\u540e\uff0c\u52a8\u4f5c\u5b9e\u73b0\u51fd\u6570\u5c06\u5728\u7b2c\u4e8c\u4e2a\u53c2\u6570 params \u4e2d\u63a5\u6536\u8fd9\u4e2a\u6570\u503c\u3002\\n            params: ({ event }) => ({ prop2: event.prop2 }),\\n          },\\n          ],\\n        },\\n        },\\n        states: {\\n        first: {\\n          entry: {\\n          type: \'whenEntering\',\\n          // \u7a0d\u540e\uff0c\u52a8\u4f5c\u5b9e\u73b0\u51fd\u6570\u5c06\u5728\u7b2c\u4e8c\u4e2a\u53c2\u6570 params \u4e2d\u4ec5\u63a5\u6536\u8fd9\u4e24\u4e2a\u503c\u3002\\n          params: ({ event }) => ({\\n            prop1: event.prop1,\\n            prop2: event.prop2,\\n          }),\\n          },\\n          exit: {\\n          type: \'whenExiting\',\\n          // \u7a0d\u540e\uff0c\u52a8\u4f5c\u5b9e\u73b0\u51fd\u6570\u5c06\u5728\u7b2c\u4e8c\u4e2a\u53c2\u6570 params \u4e2d\u4ec5\u63a5\u6536\u8fd9\u4e24\u4e2a\u503c\u3002\\n        params: ({ event }) => ({\\n          prop2: event.prop2,\\n          prop3: event.prop3,\\n        }),\\n      },\\n    },\\n  },\\n});\\n```\\n\\n## 4. \u5728 `setup()` \u4e2d\u5305\u542b\u5b9e\u73b0\u6216\u5b58\u6839\\n\\n\u6211\u4eec\u5fc5\u987b\u5728\u4f20\u9012\u7ed9 `setup()` \u7684\u5bf9\u8c61\u4e2d[\u63d0\u4f9b\u52a8\u4f5c\u3001\u5b88\u536b\u548c\u6f14\u5458\u7684\u5b9e\u73b0](/docs/machines#providing-implementations)\u3002\u5982\u679c\u72b6\u6001\u673a\u62e5\u6709\u6267\u884c\u8fd9\u4e9b\u5b9e\u73b0\u6240\u9700\u7684\u4e00\u5207\uff0c\u90a3\u4e48\u8fd9\u4e9b\u5c06\u662f\u5b9e\u9645\u7684\u5b9e\u73b0\u3002\u7136\u800c\uff0c\u5982\u679c\u72b6\u6001\u673a\u9700\u8981\u5f15\u7528\u5916\u90e8\u4e16\u754c\u7684\u4f9d\u8d56\u9879\uff0c\u90a3\u4e48\u8fd9\u4e9b\u5c06\u4f5c\u4e3a\u7a0d\u540e\u88ab\u8986\u76d6\u7684\u5b58\u6839\u3002\u5c06\u5b58\u6839\u548c\u5177\u4f53\u5b9e\u73b0\u7684\u7ec4\u5408\u4f20\u9012\u7ed9 `setup()` \u662f\u5b8c\u5168\u53ef\u4ee5\u7684\u3002\\n\\n:::warning\\n\\n\u5728 XState v5 \u4e2d\uff0c\u5b9e\u73b0\u51fd\u6570\u7684\u65b9\u6cd5\u7b7e\u540d\u5df2\u66f4\u6539\u3002\u7b2c\u4e00\u4e2a\u53c2\u6570\u73b0\u5728\u662f\u4e00\u4e2a\u5305\u542b `context` \u548c `event` \u5c5e\u6027\u7684\u5bf9\u8c61\u3002\u7b2c\u4e8c\u4e2a\u53c2\u6570\u662f `params` \u5bf9\u8c61\u3002\\n\\n```ts\\n({ context, event }, params: YourParamsType) => {\\n  // \u5b9e\u73b0\\n};\\n```\\n\\n\u4f7f\u7528 TypeScript \u65f6\uff0c\u6709\u5fc5\u8981\u5bf9\u4f20\u9012\u7ed9\u6bcf\u4e2a\u5b9e\u73b0\u51fd\u6570\u7684\u7b2c\u4e8c\u4e2a `params` \u53c2\u6570\u8fdb\u884c\u7c7b\u578b\u5b9a\u4e49\u3002\\n\\n:::\\n\\n### \u5b58\u6839\u52a8\u4f5c\\n\\n```ts\\nsetup({\\n  actions: {\\n    \u6267\u884c\u6b64\u64cd\u4f5c: (_, params: { prop: string }) => {\\n      // \u60a8\u53ef\u4ee5\u5728\u6b64\u5904\u5305\u542b\u5177\u4f53\u5b9e\u73b0\\n      console.log(params.prop);\\n    },\\n    // \u5b58\u6839\u5b9e\u73b0\\n    \u6267\u884c\u90a3\u64cd\u4f5c: (_, params: { prop: number }) => {},\\n    \u8fdb\u5165\u65f6: (_, params: { prop1: string; prop2: number }) => {\\n      // \u60a8\u53ef\u4ee5\u5728\u6b64\u5904\u5305\u542b\u5177\u4f53\u5b9e\u73b0\\n      console.log(prop1, prop2);\\n    },\\n    // \u5b58\u6839\u5b9e\u73b0\\n    whenExiting: (_, params: { prop2: number; prop3: boolean }) => {},\\n  },\\n});\\n```\\n\\n:::tip\\n\\n\u5b58\u6839\u52a8\u4f5c\u5e94\u5b9a\u4e49\u4e3a\u7a7a\u51fd\u6570\u4f53 `() => {}`\uff0c\u6216\u8005\u53ef\u4ee5\u5b9a\u4e49\u4e3a\u629b\u51fa\u9519\u8bef\uff0c\u4ee5\u5f3a\u5236\u5b83\u4eec\u7a0d\u540e\u88ab\u8986\u76d6\u3002\\n\\n```\\nactionName: (_, params: { prop: string }) => {\\n  throw new Error(\'Not implemented\');\\n},\\n```\\n\\n:::\\n\\n\u4efb\u4f55\u4f20\u9012\u7ed9 `setup()` \u7684 `assign` \u52a8\u4f5c\u90fd\u4e0d\u5e94\u9700\u8981\u673a\u5668\u914d\u7f6e\u4e4b\u5916\u7684\u4efb\u4f55\u5185\u5bb9\uff0c\u56e0\u4e3a\u5b83\u4eec\u57fa\u4e8e\u4e0a\u4e0b\u6587\u6216\u7c7b\u578b\u5316\u7684 `params` \u8bbe\u7f6e\u503c\u3002\\n\\n### \u5b58\u6839\u5b88\u536b\\n\\n```ts\\nsetup({\\n  guards: {\\n    \'is this ready\': (_, params: { ready: boolean }) => {\\n      // \u5177\u4f53\u5b9e\u73b0\\n      return ready;\\n    },\\n    // \u5b58\u6839\u5b9e\u73b0\\n    \'are we there yet\': (_, params: { distance: number }) => false,\\n  },\\n});\\n```\\n\\n:::info\\n\\n\u5b58\u6839\u5b88\u536b\u5fc5\u987b\u8fd4\u56de\u4e00\u4e2a\u5e03\u5c14\u503c\uff0c\u5373 `true` \u6216 `false`\u3002\\n\\n:::\\n\\n### \u5b58\u6839\u6f14\u5458\\n\\n\u53ef\u4ee5\u4f7f\u7528\u5b9e\u9645\u7684\u6f14\u5458\u521b\u5efa\u8f85\u52a9\u51fd\u6570\u6765\u5b58\u6839\u8c03\u7528\u7684\u6f14\u5458\uff0c\u8fd9\u5c06\u5728\u5b9e\u9645\u5b9e\u73b0\u4e2d\u4f7f\u7528\u3002\u8fd9\u91cc\u7684\u4e3b\u8981\u76ee\u7684\u662f\u952e\u5165\u6f14\u5458\u7684 `input` \u548c `output`\u3002\u6709\u4e24\u79cd\u65b9\u6cd5\u53ef\u4ee5\u505a\u5230\u8fd9\u4e00\u70b9\uff1a\\n\\n\u7b2c\u4e00\u79cd\u65b9\u6cd5\u66f4\u9002\u7528\u4e8e\u5176\u4ed6\u7c7b\u578b\u7684\u903b\u8f91\u521b\u5efa\u8005\u3002\\n\\n```ts\\nsetup({\\n  actors: {\\n    doSomethingAsync: fromPromise(\\n      async (_: {\\n        input: {\\n          inputProp1: string;\\n          inputProp2: number;\\n        };\\n      }): Promise<Item[]> => {\\n        throw new Error(\'Not implemented\');\\n      },\\n    ),\\n  },\\n});\\n```\\n\\n:::warning\\n\\n\u5b58\u6839\u7684\u6f14\u5458\u5fc5\u987b\u629b\u51fa\u9519\u8bef\uff0c\u4ee5\u5f3a\u5236\u5b83\u4eec\u7a0d\u540e\u88ab\u8986\u76d6\u3002\\n\\n:::\\n\\n\u7b2c\u4e8c\u79cd\u65b9\u6cd5\u66f4\u77ed\u4e14\u66f4\u9002\u7528\u4e8e `fromPromise`\u3002\\n\\n```ts\\nsetup({\\n  actors: {\\n    doSomethingAsync: fromPromise<\\n      // Promise-wrapped output\\n      Item[],\\n      // input\\n      {\\n        inputProp1: string;\\n        inputProp2: number;\\n      }\\n    >(async () => {\\n      throw new Error(\'Not implemented\');\\n    }),\\n  },\\n});\\n```\\n\\n### \u51cf\u5c11\u5916\u90e8\u4f9d\u8d56\\n\\n\u5373\u4f7f\u662f\u72b6\u6001\u673a\u5916\u90e8\u7684\u4f9d\u8d56\u9879\uff0c\u4e5f\u53ef\u4ee5\u4f7f\u7528\u4ee5\u4e0b\u65b9\u6cd5\u4e4b\u4e00\u4f7f\u5176\u5728\u72b6\u6001\u673a\u4e2d\u53ef\u7528\uff1a\\n\\n#### \u4f7f\u7528 `input` \u6ce8\u5165\u5916\u90e8\u4f9d\u8d56\\n\\n\u5982\u679c\u4f9d\u8d56\u9879\u5728\u72b6\u6001\u673a\u7684\u751f\u547d\u5468\u671f\u5185\u4e0d\u4f1a\u53d1\u751f\u53d8\u5316\uff0c\u90a3\u4e48\u60a8\u53ef\u4ee5\u5c06\u5b83\u4eec\u4f5c\u4e3a `input` \u4f20\u9012\u7ed9 `setup()`\uff0c\u5b83\u4eec\u5c06\u5728\u72b6\u6001\u673a\u5185\u90e8\u53ef\u7528\u3002\\n\\n```ts\\nsetup({\\n  input: {\\n    externalDependency1: someRef,\\n    externalDependency2: anotherRef,\\n  },\\n});\\n```\\n\\n#### \u901a\u8fc7\u53d1\u9001\u4e8b\u4ef6\u6ce8\u5165\u5916\u90e8\u4f9d\u8d56\\n\\n\u5982\u679c\u4f9d\u8d56\u9879\u9884\u8ba1\u4f1a\u968f\u7740\u65f6\u95f4\u53d8\u5316\uff0c\u90a3\u4e48\u60a8\u53ef\u4ee5\u5c06\u8fd9\u4e9b\u66f4\u65b0\u4f5c\u4e3a\u4e8b\u4ef6\u53d1\u9001\u5230\u72b6\u6001\u673a\u3002\u4f8b\u5982\uff0c\u5305\u542b\u4f9d\u8d56\u9879\u5f15\u7528\u7684\u4e8b\u4ef6\u53ef\u4ee5\u5b58\u50a8\u5728 `context` \u4e2d\uff0c\u4ee5\u4f9b\u72b6\u6001\u673a\u4f7f\u7528\u3002\\n\\n```ts\\nsend({\\n  type: \'refs.inject\',\\n  externalDependency,\\n});\\n```\\n\\n\u7136\u800c\uff0c\u5728\u67d0\u4e9b\u60c5\u51b5\u4e0b\uff0c\u6ce8\u5165\u4f9d\u8d56\u9879\u5e76\u4e0d\u53ef\u884c\u6216\u65b9\u4fbf\u3002\u53ef\u80fd\u6709\u592a\u591a\u7684\u4f9d\u8d56\u9879\uff0c\u6216\u8005\u60a8\u53ef\u80fd\u5e0c\u671b\u907f\u514d\u5c06\u5b83\u4eec\u4e0e\u72b6\u6001\u673a\u7d27\u5bc6\u8026\u5408\u3002\u4e0b\u4e00\u8282\u63cf\u8ff0\u4e86\u5982\u4f55\u5728\u6574\u4e2a\u5e94\u7528\u7a0b\u5e8f\u4e2d\u6309\u9700\u63d0\u4f9b\u5177\u4f53\u5b9e\u73b0\uff0c\u4ee5\u8986\u76d6\u5b58\u6839\u5b9e\u73b0\u3002\\n\\n## 5. \u63d0\u4f9b\u5177\u4f53\u5b9e\u73b0\\n\\nStately Studio \u662f\u4e00\u4e2a NextJS \u5e94\u7528\u7a0b\u5e8f\uff0c\u56e0\u6b64\u6211\u4eec\u5728 React \u7ec4\u4ef6\u4e2d\u4f7f\u7528 [@xstate/react](/docs/xstate-react) \u5305\u3002\u6211\u4eec\u53ef\u4ee5\u4f7f\u7528 `useActorRef()` \u94a9\u5b50\u4e3a\u6211\u4eec\u7684\u5b58\u6839\u63d0\u4f9b\u5177\u4f53\u5b9e\u73b0\u3002\u6b64\u94a9\u5b50\u5141\u8bb8\u6211\u4eec\u4f20\u5165\u4e00\u4e2a\u72b6\u6001\u673a\u5e76\u63a5\u6536\u4e00\u4e2a actor \u5f15\u7528\uff0c\u6211\u4eec\u53ef\u4ee5\u4f7f\u7528\u8be5\u5f15\u7528\u5411\u72b6\u6001\u673a\u53d1\u9001\u4e8b\u4ef6\u3002\u6211\u4eec\u53ef\u4ee5\u5411\u72b6\u6001\u673a\u63d0\u4f9b\u4f9d\u8d56\u9879\uff0c\u4f8b\u5982\u6211\u4eec\u7684\u5177\u4f53\u5b9e\u73b0\u3002\\n\\n```ts\\nimport { useActorRef } from \'@xstate/react\';\\n\\nconst actorRef = useActorRef(\\n  machine.provide({\\n    actions: {\\n      \u6267\u884c\u90a3\u64cd\u4f5c: (_, prop2) => {\\n        // \u5177\u4f53\u5b9e\u73b0\\n        console.log(prop2);\\n      },\\n      whenExiting: (_, params) => {\\n        // \u5177\u4f53\u5b9e\u73b0\\n        console.log(params.prop2, params.prop3);\\n      },\\n    },\\n  }),\\n);\\n```\\n\\n:::info\\n\\n\u8c03\u7528 `machine.provide()` \u8fd4\u56de\u76f8\u540c\u7684 `machine`\uff0c\u4f46\u5e26\u6709\u63d0\u4f9b\u7684\u5b9e\u73b0\u3002\u5982\u679c\u60a8\u5e0c\u671b\u5728\u5e94\u7528\u7a0b\u5e8f\u7684\u591a\u4e2a\u5730\u65b9\u4e3a\u540c\u4e00\u4e2a\u673a\u5668\u7684\u4e0d\u540c\u5b9e\u4f8b\u63d0\u4f9b\u4e0d\u540c\u7684\u5b9e\u73b0\uff0c\u8fd9\u5c06\u975e\u5e38\u6709\u7528\u3002\\n\\n:::\\n\\n\u5728\u5176\u4ed6\u7ec4\u4ef6\u4e2d\uff0c\u6211\u4eec\u53ef\u80fd\u4f1a\u4f7f\u7528\u4e0a\u4e0b\u6587\u63d0\u4f9b\u8005\u5728\u7ec4\u4ef6\u6811\u7684\u5404\u4e2a\u5c42\u6b21\u63d0\u4f9b\u5bf9 `actorRef` \u7684\u8bbf\u95ee\u3002\u53ef\u4ee5\u4f7f\u7528\u673a\u5668\u521b\u5efa\u4e00\u4e2a\u673a\u5668\u4e0a\u4e0b\u6587\u63d0\u4f9b\u8005\uff1a\\n\\n```ts\\nimport { createMachine } from \'./machine\';\\nimport { createActorContext } from \'@xstate/react\';\\n\\nconst machine = setup({\\n  /* \u8bbe\u7f6e\u914d\u7f6e */\\n}).createMachine({\\n  /* \u673a\u5668\u914d\u7f6e */\\n});\\n\\nexport const MachineContext = createActorContext(machine);\\n```\\n\\n\u7136\u540e\u53ef\u4ee5\u5728\u7ec4\u4ef6\u6811\u4e2d\u5bfc\u5165\u5e76\u4f7f\u7528\uff1a\\n\\n```tsx\\nimport { MachineContext } from \'./machine\';\\n\\nfunction App() {\\n  return (\\n    <MachineContext.Provider\\n      logic={machine.provide({\\n        actions: {\\n            \u6267\u884c\u90a3\u64cd\u4f5c: (_, prop2) => {\\n            // \u5177\u4f53\u5b9e\u73b0\\n            console.log(prop2);\\n            },\\n            whenExiting: (_, params) => {\\n            // \u5177\u4f53\u5b9e\u73b0\\n            console.log(params.prop2, params.prop3);\\n          },\\n        },\\n      })}\\n    >\\n      {children}\\n    </MachineContext.Provider>\\n  );\\n}\\n```\\n\\n\u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0c[provider \u88ab\u4f20\u9012\u4e86\u4e00\u4e2a `logic` prop](/docs/xstate-react#createactorcontextlogic)\uff0c\u5176\u503c\u662f\u5177\u6709\u63d0\u4f9b\u7684\u5b9e\u73b0\u7684\u673a\u5668\u3002\u5728\u7ec4\u4ef6\u6811\u7684\u6700\u5e95\u5c42\uff0c\u6211\u4eec\u53ef\u4ee5\u4f7f\u7528 [`useActorRef()` \u94a9\u5b50](/docs/xstate-react#useactorrefmachine-options) \u6765\u8bbf\u95ee `actorRef` \u5e76\u5411\u673a\u5668\u53d1\u9001\u4e8b\u4ef6\u3002\\n\\n:::info\\n\\n\u8fd9\u4e9b\u5b9e\u73b0\u51fd\u6570\u4e0d\u9700\u8981\u5728\u8fd9\u91cc\u518d\u6b21\u663e\u5f0f\u952e\u5165\uff0c\u56e0\u4e3a\u4f20\u9012\u7ed9\u5b83\u4eec\u7684 `params` \u53c2\u6570\u5df2\u7ecf\u901a\u8fc7[\u5728\u4e0a\u4e00\u6b65\u4e2d\u4f20\u9012\u7ed9 `setup()` \u51fd\u6570\u7684\u5b9e\u73b0](#4-include-implementations-or-stubs-in-setup)\u8fdb\u884c\u4e86\u952e\u5165\u3002\\n\\n:::\\n\\n### \u63d0\u4f9b\u6f14\u5458\u5b9e\u73b0\\n\\n\u5fc5\u987b\u5b9a\u4e49\u4ee5\u4e0b\u4e09\u4ef6\u4e8b\uff1a\\n\\n1. \u5728 `setup()` \u4e2d\u63d0\u4f9b[\u6f14\u5458\u521b\u5efa\u51fd\u6570\u7684\u5177\u4f53\u5b9e\u73b0\u6216\u5b58\u6839](#stubbing-actors)\u3002\\n2. \u5728\u4e3b\u673a\u5668\u914d\u7f6e\u4e2d\u7684\u72b6\u6001\u5185\u6ce8\u518c `invoke`\u3002\\n3. \u5982\u679c\u5c1a\u672a\u4f20\u9012\u7ed9 `setup()`\uff0c\u5219\u4e3a\u6f14\u5458\u63d0\u4f9b\u5177\u4f53\u5b9e\u73b0\u3002\\n\\n#### \u5728\u4e3b\u673a\u5668\u914d\u7f6e\u4e2d\u7684\u72b6\u6001\u5185\u6ce8\u518c `invoke`\\n\\n\u8fd9\u7c7b\u4f3c\u4e8e\u5728 v4 \u4e2d\u6ce8\u518c\u8c03\u7528\u7684\u6f14\u5458\u3002\u4e3b\u8981\u533a\u522b\u5728\u4e8e\u6211\u4eec\u8fd8\u5728\u8fd9\u91cc\u5b9a\u4e49\u4e86 `input`\uff0c\u5c06\u4e8b\u4ef6\u503c\u6620\u5c04\u5230\u8f93\u5165\u503c\u3002\u4f7f\u7528 `onDone` \u548c `onError` \u6ce8\u518c\u7684\u52a8\u4f5c\u4e5f\u88ab\u5b9a\u4e49\u4e3a\u5e26\u6709 `params` \u7684\u5bf9\u8c61\uff0c\u5c31\u50cf[\u6211\u4eec\u4e4b\u524d\u5728\u8f6c\u6362\u52a8\u4f5c\u548c\u8fdb\u5165/\u9000\u51fa\u52a8\u4f5c\u4e2d\u770b\u5230\u7684\u90a3\u6837](#3-convert-action-and-guard-strings-to-parameterized-objects)\u3002\\n\\n```ts\\nimport { createMachine } from \'xstate\';\\n\\ncreateMachine({\\n  /* \u673a\u5668\u914d\u7f6e */\\n  states: {\\n    /* \u5176\u4ed6\u72b6\u6001 */\\n    someState: {\\n      invoke: {\\n        src: \'doSomethingAsync\', // \u5fc5\u9700\\n        id: \'doSomethingAsync\', // \u53ef\u9009\\n        input: ({ event }) => ({\\n          inputProp1: event.prop1,\\n          inputProp2: event.prop2,\\n        }),\\n        onDone: {\\n          target: \'Idle\',\\n          actions: [\\n            {\\n              type: \'showSuccessToast\',\\n            },\\n            {\\n              type: \'handleOutputOnSuccess\',\\n              params: ({ event }) => event.output,\\n            },\\n          ],\\n        },\\n        onError: {\\n          target: \'Idle\',\\n          actions: [{ type: \'showErrorToast\' }],\\n        },\\n      },\\n    },\\n  },\\n});\\n```\\n\\n#### \u5982\u679c\u5c1a\u672a\u4f20\u9012\u7ed9 `setup()`\uff0c\u5219\u4e3a\u6f14\u5458\u63d0\u4f9b\u5177\u4f53\u5b9e\u73b0\\n\\n\u5982\u679c\u6211\u4eec\u4ec5\u5728 `setup()` \u4e2d\u5b9a\u4e49\u4e86\u6f14\u5458\u521b\u5efa\u51fd\u6570\u7684\u5b58\u6839\uff0c\u90a3\u4e48\u6211\u4eec\u5fc5\u987b\u4e0e\u5176\u4ed6\u5177\u4f53\u5b9e\u73b0\u4e00\u8d77\u4e3a\u6f14\u5458\u63d0\u4f9b\u5177\u4f53\u5b9e\u73b0\u3002\\n\\n```ts\\nimport { useActorRef } from \'@xstate/react\';\\n\\nconst actorRef = useActorRef(\\n  machine.provide({\\n    actors: {\\n      doSomethingAsync: fromPromise(\\n        ({\\n          input,\\n        }: {\\n          input: {\\n            inputProp1: string;\\n            inputProp2: number;\\n          };\\n        }) => {\\n          return trpcProxyClient.stuff.asyncstuff.mutate(input);\\n        },\\n      ),\\n    },\\n  }),\\n);\\n```\\n\\n## \u6e05\u7406\u548c\u6545\u969c\u6392\u9664\\n\\n### \u79fb\u9664 `preserveActionOrder` \u548c `predictableActionArguments`\\n\\n\u60a8\u73b0\u5728\u53ef\u4ee5\u4ece\u673a\u5668\u914d\u7f6e\u4e2d\u79fb\u9664 [`preserveActionOrder` \u548c `predictableActionArguments`](/docs/migration#actions-ordered-by-default-predictableactionarguments-no-longer-needed)\uff0c\u56e0\u4e3a\u5728 XState v5 \u4e2d\u5b83\u4eec\u4e0d\u518d\u9700\u8981\u3002\u52a8\u4f5c\u73b0\u5728\u9ed8\u8ba4\u6309\u987a\u5e8f\u6267\u884c\uff0c\u5e76\u4e14 [`assign` \u52a8\u4f5c](/docs/actions#assign-action) \u5c06\u59cb\u7ec8\u6309\u5b9a\u4e49\u7684\u987a\u5e8f\u8fd0\u884c\u3002\\n\\n<Tabs>\\n\\n<TabItem value=\\"v4\\" label=\\"XState v4\\">\\n\\n```ts\\n// \u274c \u5df2\u5f03\u7528\\nimport { createMachine } from \'xstate\';\\n\\nconst machine = createMachine({\\n  preserveActionOrder: true,\\n  predictableActionArguments: true,\\n  ...\\n});\\n```\\n\\n</TabItem>\\n\\n<TabItem value=\\"v5\\" label=\\"XState v5\\">\\n\\n```ts\\nimport { setup } from \'xstate\';\\n\\n// preserveActionOrder \u548c\\n// predictableActionArguments \u5df2\u88ab\u79fb\u9664\\nconst machine = setup({\\n  ...\\n}).createMachine({\\n  ...\\n});\\n```\\n\\n</TabItem>\\n\\n</Tabs>\\n\\n### \u6392\u67e5 TypeScript \u9519\u8bef\\n\\n\u5728\u8fc1\u79fb\u8fc7\u7a0b\u4e2d\uff0c\u60a8\u53ef\u80fd\u4f1a\u9047\u5230\u8bb8\u591a TypeScript \u9519\u8bef\uff0c\u4e0d\u8981\u6c14\u9981\u3002\u4f8b\u5982\uff0c\u4e3a\u4e86\u5b8c\u5168\u8fc1\u79fb\u673a\u5668\u4e2d\u7684\u4efb\u4f55\u4e00\u4e2a `action`\uff0c\u60a8\u53ef\u80fd\u9700\u8981\u5c06\u5176\u8f6c\u6362\u4e3a\u673a\u5668\u914d\u7f6e\u4e2d\u7684\u53c2\u6570\u5316\u5bf9\u8c61\uff0c\u5e76\u5728 `setup()` \u4e2d\u63d0\u4f9b\u7c7b\u578b\u5316\u7684\u5b9e\u73b0\uff0c\u4ee5\u4fee\u590d TypeScript \u9519\u8bef\u3002\\n\\n\u6b64\u5916\uff0cTypeScript \u53ef\u80fd\u4f1a\u7ee7\u7eed\u5bf9\u4f20\u9012\u7ed9 `setup()` \u7684 `actions` \u5b9e\u73b0\u8fdb\u884c\u62b1\u6028\uff0c\u76f4\u5230\u6700\u540e\u4e00\u4e2a\u52a8\u4f5c\u88ab\u6b63\u786e\u5305\u542b\u548c\u7c7b\u578b\u5316\u3002\u8fd9\u662f\u56e0\u4e3a TypeScript \u4f1a\u4e00\u6b21\u6027\u68c0\u67e5\u6574\u4e2a\u673a\u5668\u914d\u7f6e\u53ca\u5176\u6240\u6709\u5b9e\u73b0\u3002\\n\\n:::info\\n\\n\u5982\u679c\u60a8\u5728\u673a\u5668\u914d\u7f6e\u4e2d\u7684\u67d0\u4e2a\u72b6\u6001\u540d\u79f0\u4e0b\u770b\u5230 TypeScript \u9519\u8bef\uff0c\u5f88\u53ef\u80fd\u662f\u8be5\u72b6\u6001\u5185\u7684 `action` \u6216 `guard` \u5b58\u5728\u7c7b\u578b\u9519\u8bef\u3002\\n\\n:::\\n\\nTypeScript \u53ef\u80fd\u96be\u4ee5\u51c6\u786e\u5b9a\u4f4d\u673a\u5668\u914d\u7f6e\u4e2d\u7684\u9519\u8bef\u4f4d\u7f6e\uff0c\u56e0\u6b64\u5b83\u901a\u5e38\u4f1a\u7a81\u51fa\u663e\u793a\u72b6\u6001\u540d\u79f0\u3002\\n\\n![\u8bef\u5bfc\u6027\u7684 TypeScript \u9519\u8bef\uff0c\u7a81\u51fa\u663e\u793a\u72b6\u6001\uff0c\u800c\u5176\u5185\u90e8\u52a8\u4f5c\u7c7b\u578b\u662f\u95ee\u9898\u6240\u5728](/blog/2024-02-02-migrating-machines-to-xstate-v5/misleading-typescript-error.png)\\n\\n\u5728\u4e0a\u9762\u7684\u793a\u4f8b\u4e2d\uff0c\u9519\u8bef\u7684\u771f\u6b63\u6765\u6e90\u662f `trackUpgradeModalLearnMoreClick` \u52a8\u4f5c\u5c1a\u672a\u8f6c\u6362\u4e3a\u52a8\u4f5c\u5bf9\u8c61\u3002\u4fee\u590d\u8be5\u95ee\u9898\u540e\uff0c\u201c\u70b9\u51fb\u4e86\u89e3\u66f4\u591a\u201d\u72b6\u6001\u540d\u79f0\u4e0b\u7684\u9519\u8bef\u5c31\u4f1a\u6d88\u5931\u3002\\n\\n## \u603b\u7ed3\\n\\n\u901a\u8fc7\u9075\u5faa\u4e0a\u8ff0\u6b65\u9aa4\uff0c\u60a8\u5e94\u8be5\u80fd\u591f\u5c06\u73b0\u6709\u7684 XState v4 \u673a\u5668\u8fc1\u79fb\u5230 XState v5\uff0c\u5e76\u4f7f\u6240\u6709\u7c7b\u578b\u6b63\u5e38\u5de5\u4f5c\uff0c\u800c\u65e0\u9700\u901a\u8fc7\u65ad\u8a00\u6216\u7c7b\u578b\u5b88\u536b\u8fdb\u884c\u7c7b\u578b\u7f29\u5c0f\u3002\\n\\n\u5e0c\u671b\u672c\u6307\u5357\u5bf9\u60a8\u5c06\u73b0\u6709\u7684 XState v4 \u673a\u5668\u8fc1\u79fb\u5230 XState v5 \u6709\u6240\u5e2e\u52a9\u3002\u5982\u679c\u60a8\u6709\u4efb\u4f55\u95ee\u9898\u6216\u53cd\u9988\uff0c\u8bf7[\u5728\u6211\u4eec\u7684 Discord \u4e0a\u8054\u7cfb\u6211\u4eec](https://discord.gg/xstate)\u3002"},{"id":"2024-01-30-changelog","metadata":{"permalink":"/xstate-zh/blog/2024-01-30-changelog","editUrl":"https://github.com/statelyai/docs/edit/main/blog/2024-01-30-changelog/index.mdx","source":"@site/blog/2024-01-30-changelog/index.mdx","title":"Changelog Week 5 2024","description":"Embedding Figma frames has arrived in Stately Studio! We\u2019ve also made more improvements and squashed some bugs. And have you tried Stately Agent yet?","date":"2024-01-30T00:00:00.000Z","formattedDate":"January 30, 2024","tags":[{"label":"changelog","permalink":"/xstate-zh/blog/tags/changelog"},{"label":"new","permalink":"/xstate-zh/blog/tags/new"},{"label":"figma","permalink":"/xstate-zh/blog/tags/figma"},{"label":"embed","permalink":"/xstate-zh/blog/tags/embed"},{"label":"improvements","permalink":"/xstate-zh/blog/tags/improvements"}],"readingTime":1.385,"hasTruncateMarker":true,"authors":[{"name":"Laura Kalbag","title":"Stately Team","url":"https://github.com/laurakalbag","imageURL":"https://ascelcgzufjyvdzuplwo.supabase.co/storage/v1/object/public/avatars/laura.png","key":"laura"}],"frontMatter":{"title":"Changelog Week 5 2024","description":"Embedding Figma frames has arrived in Stately Studio! We\u2019ve also made more improvements and squashed some bugs. And have you tried Stately Agent yet?","authors":["laura"],"tags":["changelog","new","figma","embed","improvements"],"date":"2024-01-30T00:00:00.000Z","slug":"2024-01-30-changelog","image":"/blog/2024-01-30-changelog.png"},"unlisted":false,"prevItem":{"title":"\u5c06\u72b6\u6001\u673a\u8fc1\u79fb\u5230 XState v5","permalink":"/xstate-zh/blog/2024-02-02-migrating-machines-to-xstate-v5"},"nextItem":{"title":"Building backend workflows with Stately: Credit checking flow","permalink":"/xstate-zh/blog/2024-01-24-building-backend-workflows-credit-checking"}},"content":"Embedding Figma frames has arrived in Stately Studio! We\u2019ve also made more improvements and squashed some bugs. And have you tried [Stately Agent](https://www.youtube.com/live/c05bOPeinSA?si=Ti3otk_1-CE2mm00&t=122) yet?{/* truncate */}\\n\\n## Embed Figma frames\\n\\nLast week, we released our Figma integration, so you can now embed your Figma frames in Stately states. Your frames stay in sync with Figma, so you can be sure you always have the latest version of the design and your whole team is working from the same source of truth. [Read more about the launch of our Figma integration](/blog/2024-01-25-embed-figma).\\n\\n![Figma showing a frame with a mockup for a power button. Stately Studio showing that same frame embedded in the power off state.](figma-embed.png)\\n\\n## Improvements\\n\\n- We improved the modals for premium features so you can quickly learn more about what these features do and how they work.\\n\\n## Bug fixes\\n\\n- We fixed the issue where importing code could result in the creation of extra empty machines.\\n- You can now change the selected machine even if there was an error saving your machine.\\n- The exported code implementations will no longer include unused guards, actors, and actions.\\n- Interacting with a machine from the structure panel will no longer cause an error when changing repos synced with GitHub.\\n\\n## We\u2019d love your feedback\\n\\nDo you have a feature request you want to share with us? [Submit and upvote feature requests on our dedicated GitHub feedback repo](https://github.com/statelyai/feedback). Want to be the first to find out new features? Join us at our next office hours live stream. Find out when streams are planned by subscribing to [our YouTube channel](https://www.youtube.com/@Statelyai) or [Twitch channel](https://www.twitch.tv/statelyai) or [following us on LinkedIn](https://www.linkedin.com/company/statelyai/)."},{"id":"2024-01-24-building-backend-workflows-credit-checking","metadata":{"permalink":"/xstate-zh/blog/2024-01-24-building-backend-workflows-credit-checking","editUrl":"https://github.com/statelyai/docs/edit/main/blog/2024-01-24-backend-workflows-credit-checking/index.mdx","source":"@site/blog/2024-01-24-backend-workflows-credit-checking/index.mdx","title":"Building backend workflows with Stately: Credit checking flow","description":"Join Gavin as he details an example backend credit reporting flow built with XState and Stately tooling. In this demo, he covers parallel states, final states, and conditional guards.","date":"2024-01-24T00:00:00.000Z","formattedDate":"January 24, 2024","tags":[{"label":"stately","permalink":"/xstate-zh/blog/tags/stately"},{"label":"studio","permalink":"/xstate-zh/blog/tags/studio"},{"label":"xstate","permalink":"/xstate-zh/blog/tags/xstate"},{"label":"xstate v5","permalink":"/xstate-zh/blog/tags/xstate-v-5"},{"label":"backend","permalink":"/xstate-zh/blog/tags/backend"},{"label":"workflows","permalink":"/xstate-zh/blog/tags/workflows"},{"label":"example","permalink":"/xstate-zh/blog/tags/example"}],"readingTime":0.305,"hasTruncateMarker":true,"authors":[{"name":"Gavin Bauman","title":"Stately Team","url":"https://github.com/gavination","imageURL":"https://ascelcgzufjyvdzuplwo.supabase.co/storage/v1/object/public/avatars/gavin.png","key":"gavin"}],"frontMatter":{"title":"Building backend workflows with Stately: Credit checking flow","description":"Join Gavin as he details an example backend credit reporting flow built with XState and Stately tooling. In this demo, he covers parallel states, final states, and conditional guards.","tags":["stately","studio","xstate","xstate v5","backend","workflows","example"],"authors":["gavin"],"date":"2024-01-24T00:00:00.000Z","slug":"2024-01-24-building-backend-workflows-credit-checking","image":"/blog/2024-01-24-building-backend-workflows-credit-checking.png"},"unlisted":false,"prevItem":{"title":"Changelog Week 5 2024","permalink":"/xstate-zh/blog/2024-01-30-changelog"},"nextItem":{"title":"Embed Figma designs in Stately","permalink":"/xstate-zh/blog/2024-01-24-embed-figma"}},"content":"Join Gavin as he details an example backend credit reporting flow built with XState and Stately tooling. In this demo, he covers parallel states, final states, and conditional guards.\\n\\n{/* truncate */}\\n\\n<YouTube id=\\"NVE77_axR6s\\" />\\n\\n[Get the code for this example from the XState GitHub repo](https://github.com/statelyai/xstate/tree/main/examples/mongodb-credit-check-api).\\n\\nBe the first to find out about our video by subscribing to [our YouTube channel](https://www.youtube.com/@Statelyai)."},{"id":"2024-01-24-embed-figma","metadata":{"permalink":"/xstate-zh/blog/2024-01-24-embed-figma","editUrl":"https://github.com/statelyai/docs/edit/main/blog/2024-01-24-embed-figma/index.mdx","source":"@site/blog/2024-01-24-embed-figma/index.mdx","title":"Embed Figma designs in Stately","description":"You can now embed Figma frames in Stately states","date":"2024-01-24T00:00:00.000Z","formattedDate":"January 24, 2024","tags":[{"label":"stately","permalink":"/xstate-zh/blog/tags/stately"},{"label":"studio","permalink":"/xstate-zh/blog/tags/studio"},{"label":"figma","permalink":"/xstate-zh/blog/tags/figma"},{"label":"design","permalink":"/xstate-zh/blog/tags/design"},{"label":"statecharts","permalink":"/xstate-zh/blog/tags/statecharts"},{"label":"state machines","permalink":"/xstate-zh/blog/tags/state-machines"},{"label":"xstate","permalink":"/xstate-zh/blog/tags/xstate"}],"readingTime":4.225,"hasTruncateMarker":true,"authors":[{"name":"Nick Perich","title":"Stately Team","url":"https://github.com/cirephe","imageURL":"https://ascelcgzufjyvdzuplwo.supabase.co/storage/v1/object/public/avatars/nick.png","key":"nick"}],"frontMatter":{"title":"Embed Figma designs in Stately","description":"You can now embed Figma frames in Stately states","tags":["stately","studio","figma","design","statecharts","state machines","xstate"],"authors":["nick"],"date":"2024-01-24T00:00:00.000Z","slug":"2024-01-24-embed-figma","image":"/blog/2024-01-24-embed-figma.png"},"unlisted":false,"prevItem":{"title":"Building backend workflows with Stately: Credit checking flow","permalink":"/xstate-zh/blog/2024-01-24-building-backend-workflows-credit-checking"},"nextItem":{"title":"State Machines - What\u2019s in a name?","permalink":"/xstate-zh/blog/2024-01-23-state-machines-whats-in-a-name"}},"content":"We already kicked off 2024 with several major updates to Stately such as [inspecting live XState code](/blog/2024-01-15-stately-inspector), [syncing with GitHub](/blog/2024-01-09-introducing-bidirectional-github-sync), and [writing code for actions and actors in the Studio](/blog/2024-01-09-introducing-sources). Today we\u2019re excited to announce that we\u2019ve also launched an integration with Figma!\\n\\nYou can now attach Figma frames to states in Stately.{/* truncate */}\\n\\n<p>\\n  <ThemedImage\\n    alt=\\"Three Figma frames displayed in three Stately states for a music player. The ready state shows a record stack app view, following the openAlbum event, the viewingAlbum state shows the Wild Winds album coverart and information, from the viewingAlbum state, there\u2019s a play event that takes you to the playingAlbum state which shows the album list for the Wild Winds album and a player progress bar. The pause event returns from the playingAlbum state to the viewingAlbum state.\\"\\n    sources={{\\n      light: \'/blog/2024-01-24-embed-figma/figma-light.png\',\\n      dark: \'/blog/2024-01-24-embed-figma/figma-dark.png\',\\n    }}\\n  />\\n</p>\\n\\n## Improve your team workflows by combining Stately and Figma\\n\\nEmbedding Figma into Stately can significantly streamline and enhance a team\u2019s workflow.\\n\\nBeing able to view mockups of the states you are discussing makes it easy to _see_ what might be missing and to identify potential improvements. It allows team members to view designs directly as part of the app logic itself.\\n\\nTwo examples of how this can work are:\\n\\n- Engineers can import state machine code, then designers can fill out images for each state of the actual logic in the code.\\n\\n- Designers, PMs, and other stakeholders can create the expected behavior by embedding Figma frames into a Stately diagram, then engineers can continue adding the functionality from the automatically scaffolded code.\\n\\nThis seamless integration can speed up the design process and ensure all team members are on the same page. Team members can easily share design details, run critiques, and iterate with people across different specializations.\\n\\nIt also ensures that everyone is always looking at the most up-to-date design, as changes made in Figma are reflected in the embedded view. And with [GitHub Sync](blog/2024-01-09-introducing-bidirectional-github-sync) enabled, changes to the code can even automatically update how the Figma frames are organized in Stately.\\n\\n## How to embed Figma frames\\n\\nFigma embedding is part of our [Pro plan](/docs/studio-pro-plan). You can [try all our premium features for free with our free trial](https://stately.ai/pricing).\\n\\nTo embed Figma frames in Stately, first you need to authenticate using a personal access token.\\n\\n1. [Get a personal access token](https://help.figma.com/hc/en-us/articles/8085703771159-Manage-personal-access-tokens) from Figma. Set \\"File content\\" to \\"Allow Read-only access\\" so Stately can get the images.\\n2. Enter this token in Stately by opening a project, finding the **Stately menu** in the top left, selecting **Account**, opening **Settings**, and clicking the **Figma** tab.\\n\\nThen you can link frames to states.\\n\\n3. In Figma, right click on the frame you want to embed, select **Copy/Paste as**, then **Copy link**.\\n4. In Stately, select a state, open the **+** menu, choose **Embed Figma**, and paste your link.\\n\\n[Watch a video of how embedding Figma frames works](https://www.youtube.com/live/c05bOPeinSA?si=qyUlnx7f7_StLDZ_&t=1006) from our recent Office Hours.\\n\\n![Frame inside Figma showing the menu for copy/paste as, and copy link. Alongside a frame in Stately showing the plus menu and the Embed Figma option.](figmatostately.png)\\n\\nNow any changes to this frame in Figma will be automatically reflected in Stately after each page load.\\n\\nYou can delete the embed or adjust the size of the image by selecting the state and finding the controls at the top right of the embedded image.\\n\\nA few more details to get you rolling:\\n\\n- Stately supports linking to any type of Figma node that you can get, not just frames. But we recommend generally using frames due to how well they correspond to states.\\n- Figma embeds are a new type of **asset** in Stately. We also support [attaching images, videos, documents, and PDFs to states as assets](/docs/assets). You can feature a single asset on the canvas at a time. To feature a different asset, open the state details panel and drag that asset to the first position in the assets list.\\n- Stately embeds Figma frames as SVG images. This means fast load times and great scaling quality across different sizes. However, a few features of Figma (like background blur) are not supported in svg exports. When you notice an issue and high visual fidelity is important, you can export the frame as a PNG image and then attach the image itself as an image asset to the Stately state (rather than as a Figma embed from a link). It just won\u2019t be automatically synced.\\n\\n## Try it out!\\n\\nWe are excited to see what you do with this feature. There is a lot of potential for reducing silos between roles and helping make communication smoother.\\n\\nPlease share your feedback with us on our [social platforms](https://discord.stately.ai) or in our regular [office hours live streams](https://www.youtube.com/watch?v=-Jf9N-EaUx0&list=PLvWgkXBB3dd6PXbSoctwDXjWX-AQrxhds). If you want help getting started with embedding Figma frames or getting your team set up with Stately and XState, [the Stately team is available for workshops and consulting](https://stately.ai/pricing#services), and you can [book a demo call](https://calendly.com/d/yc8-3hq-rpc/request-a-demo) with us to learn more about how Stately can work for your team."},{"id":"2024-01-23-state-machines-whats-in-a-name","metadata":{"permalink":"/xstate-zh/blog/2024-01-23-state-machines-whats-in-a-name","editUrl":"https://github.com/statelyai/docs/edit/main/blog/2024-01-23-state-machines-whats-in-a-name/index.mdx","source":"@site/blog/2024-01-23-state-machines-whats-in-a-name/index.mdx","title":"State Machines - What\u2019s in a name?","description":"An overview of naming conventions for state machines, including tips and guidlines for naming","date":"2024-01-23T00:00:00.000Z","formattedDate":"January 23, 2024","tags":[{"label":"stately","permalink":"/xstate-zh/blog/tags/stately"},{"label":"studio","permalink":"/xstate-zh/blog/tags/studio"},{"label":"coding conventions","permalink":"/xstate-zh/blog/tags/coding-conventions"},{"label":"naming","permalink":"/xstate-zh/blog/tags/naming"},{"label":"semantics","permalink":"/xstate-zh/blog/tags/semantics"},{"label":"style","permalink":"/xstate-zh/blog/tags/style"},{"label":"statecharts","permalink":"/xstate-zh/blog/tags/statecharts"},{"label":"state machines","permalink":"/xstate-zh/blog/tags/state-machines"},{"label":"xstate","permalink":"/xstate-zh/blog/tags/xstate"}],"readingTime":9.055,"hasTruncateMarker":true,"authors":[{"name":"Kevin Maes","title":"Stately Team","url":"https://github.com/kevinmaes","imageURL":"https://ascelcgzufjyvdzuplwo.supabase.co/storage/v1/object/public/avatars/kevin.png","key":"kevin"}],"frontMatter":{"title":"State Machines - What\u2019s in a name?","description":"An overview of naming conventions for state machines, including tips and guidlines for naming","tags":["stately","studio","coding conventions","naming","semantics","style","statecharts","state machines","xstate"],"authors":["kevin"],"date":"2024-01-23T00:00:00.000Z","slug":"2024-01-23-state-machines-whats-in-a-name","image":"/blog/2024-01-23-state-machines-whats-in-a-name.png"},"unlisted":false,"prevItem":{"title":"Embed Figma designs in Stately","permalink":"/xstate-zh/blog/2024-01-24-embed-figma"},"nextItem":{"title":"Changelog Week 3 2024","permalink":"/xstate-zh/blog/2024-01-19-changelog"}},"content":"State machines and visual diagrams are such a powerful way to organize, and convey information. All of those lovely \u201cboxes and arrows\u201d convey meaningful relationships, indicate sequential order, and direct flows in a way that\u2019s easier to understand since it\'s visual. Add to that the ability to [attach assets to your diagrams](https://stately.ai/docs/assets) and you\u2019re well on your way towards creating truly expressive, executable software diagrams. But there\u2019s still one thing that state machines have that should make them easy to understand. Text.\\n\\n{/* truncate */}\\n\\nWhen I say text, I\u2019m largely referring to **names**. States, events, actors, actions, and guards all have names. These are important since they\u2019re included in the executable code or other [formats that are exported from Studio](https://stately.ai/docs/export-as-code), so they can\'t be arbitrary or merely decorative. Users often ask us for guidance on naming conventions in [XState](https://stately.ai/docs/xstate) and how to name the parts of their state machines.\\n\\nWe can break down some of these questions into two categories:\\n\\n1. [What or how should I name this thing](#what-or-how-should-i-name-this-thing)?\\n2. [What style should that name be in](#what-style-should-that-name-be-in)?\\n\\n<EmbedMachine\\n  name=\\"A state machine demonstrating a particular naming convention with states using Title Case, events using dot.case, actions and actors using camelCase and guards using lower case.\\"\\n  embedURL=\\"https://stately.ai/registry/editor/embed/9fa24cc0-3026-41be-bb22-9afc3980fefc?machineId=db0e655e-f16f-4a30-97a7-a0081b73d532\\"\\n/>\\n\\n## What or how should I name this thing?\\n\\nThis question is largely about semantics and in this case that means how do the names used in a state machine convey the purpose and meaning of the elements and their role in a state machine? Should a state be named **`Load`**, **`Loader`**, **`Loading`**, or **`Loaded`**? Should an event be named **`Submit`**, **`Submit form`**, **`Form submitted`**, **`On submit`**, or **`Form submission`**? There are indeed many options to choose from and there\'s no one right answer. But there are some guidelines that can help you make the best choice.\\n\\n**Mapping parts of speech to state machines**\\n\\nOne useful way to think about naming in state machines is to roughly map its elements to various parts of speech. This is what that might look like:\\n\\n1. **States**: typically nouns or adjectives\\n   - States represent different conditions or modes of being. Therefore, they are often named with nouns or adjectives that describe the status or quality of the system. For example, **`idle`**, **`loading`**, **`authenticated`**, or **`error`**.\\n2. **Events/transitions**: Usually verbs\\n   - Events are triggers that cause state transitions. They are actions or occurrences, so they are best named with verbs. Examples include **`submit`**, **`cancel`**, **`fail`**, **`load`**, **`sign in`**, or **`clear form data`**.\\n3. **Actions**: verbs or verb phrases\\n   - Actions are operations executed in response to events or state transitions. They should be verbs or verb phrases that describe what action is being taken. For instance, **`sendRequest`**, **`displayError`**, **`updateData`**.\\n4. **Guards**: Often adjectives or past participles\\n   - Guards are conditional checks that determine if a transition should occur. They can be named with adjectives or past participles that describe the condition being met. Examples include **`isLoggedIn`**, **`hasValidData`**, **`isExpired`**. You\u2019ll notice these are similar to how you might name boolean variables in code.\\n5. **Parent states**: Compound Nouns\\n   - For nested states, these can also be nouns like regular states or they could be adjectives indicating a subordinate level of the parent state which is a noun. An example might be a state called **`Viewing Shopping Cart`** with child states **`Empty`** and **`Populated`**.\\n6. **Invoked Actors**: nouns or gerunds\\n   - When a state machine invokes a service (like an API call), these are often named with nouns or gerunds (nouns derived from verbs and ending in -ing) that describe the service\'s function. Examples are **`fetchingData`**, **`userAuthentication`**.\\n\\nBy aligning the names in state machines with these parts of speech, the structure and functionality of the state machine becomes more intuitive and easier to understand, facilitating better communication and documentation.\\n\\n### Be brief yet specific\\n\\nJust like with naming anything in code, it\u2019s helpful to pick names that are brief, not generic, yet contain just enough information to be unambiguous. Make names \u201cminimally meaningful\u201d.\\n\\nState name examples:\\n\\n- **`Idle`** instead of **`State1`**\\n- **`Door Closed`** instead of **`Closed`**\\n- **`Payment Processing`** instead of **`State_Awaiting_Payment`**\\n\\nEvent name examples:\\n\\n- **`Submit`** or **`submit`** instead of **`Event1`**\\n- **`Receive payment`** instead of **`Event_Payment_Received`**\\n\\n## What style should that name be in?\\n\\nWhen statecharts were first introduced in [\u201cStatecharts: A visual formalism for complex systems\u201d (Harel, 1987)](https://www.inf.ed.ac.uk/teaching/courses/seoc/2005_2006/resources/statecharts.pdf), there was relatively little discussion of naming conventions and many of the diagrams used letters and numbers to represent states and events. The innovations that statecharts introduced were focused on visually representing relationships needed to support real world software use cases such as hierarchy, parallelism, history states, etc.\\n\\n![An example of parallel states taken from Statecharts: A visual formalism for complex systems by David Harel.](./../../static/blog/2024-01-23-state-machines-whats-in-a-name/orthogonality.png)\\n\\nSome of the examples later in the paper did demonstrate the use of state and event labels but these were usually single words or short phrases without attention paid to style. Interestingly enough, this example makes use of a **`dot.case`** style for event names which you can [jump ahead and read about here](#xstate-v5-and-dotcase).\\n\\n![An example of states and events from a statechart depicting the alarm on a Citizen Quartz watch.](./../../static/blog/2024-01-23-state-machines-whats-in-a-name/watch-batteries.png)\\n\\nBy the time the book, \\"Constructing the User Interface with Statecharts\\" (Horrocks, 1999) was published, more descriptive state and event labels were present in elaborate examples of statecharts used to model hardware and software systems. This example of a CD player (remember those?) is rather detailed and also quite clear in its use of names and text annotations on the statechart. You can [view this state machine inspired by this example](https://stately.ai/registry/editor/9fa24cc0-3026-41be-bb22-9afc3980fefc?machineId=5b186011-088e-4c1c-be95-9a489a126b13) or [see the full example](https://stately.ai/registry/editor/9fa24cc0-3026-41be-bb22-9afc3980fefc?machineId=24adba0d-a6ac-4e79-836c-e0d91bb7ab85) borrowed from the book.\\n\\n![Part of a statechart for a physical CD player including states for when the CD is playing, stopped, paused, and events transitioning the machine from state to state.](./../../static/blog/2024-01-23-state-machines-whats-in-a-name/horrocks-cd.png)\\n\\nOver the decades since those early writings on statecharts, the emergence of nearly all of the major programming languages in use today have popularized a number of naming conventions for code. Here are some of the most common styles you can choose from when naming states, events, actions, and guards in XState:\\n\\n- **`Title Case`**\\n- **`Sentence case`**\\n- **`lower case`**\\n- **`UPPER CASE`**\\n- **`PascalCase`**\\n- **`camelCase`**\\n- **`snake_case`**\\n- **`kebab-case`**\\n\\nWhen XState was released in 2016, many of the early examples demonstrated use of **`UPPER_CASE`** for event names (also in fashion for Redux action types) and **`camelCase`** for nearly everything else like states, actions, guards, etc. But [XState](https://stately.ai/docs/xstate) doesn\'t enforce any particular convention and it\'s up to you to decide what works best for you and your team. Space-separated styles like **`Title Case`**, **`Sentence case`**, and **`lower case`** are valid options you can wrap them in quotes to use as JavaScript or TypeScript XState object keys. [Stately Studio will export code](https://stately.ai/docs/export-as-code) with your names in quotes as well.\\n\\n### XState v5 and `dot.case`\\n\\nFast forward to 2024, with the [recent release of XState v5](https://stately.ai/blog/2023-12-01-xstate-v5), one particular style convention for event names is strongly encouraged and that\'s **`dot.case`**. If you recall in the image of the Quartz watch, above, there were events similar to **`battery.inserted`**, **`battery.removed`**, and **`weak battery.dies`**. This style allows for a [new feature in XState v5 called wildcard transitions](https://stately.ai/docs/transitions#wildcard-transitions). For example, if you had an action called `logBatteryStatus` you could register that action with any number of events matching **`battery.*`**, a wildcard transition:\\n\\n```typescript\\nstates: {\\n  Running: {\\n    on: {\\n      \'battery.*\': {\\n        actions: \'logBatteryStatus\',\\n      },\\n    },\\n  }\\n}\\n```\\n\\nI personally like this convention for events because it visually distinguishes them from other name in the state machine and its lack of heavy capitalization make it look more **`streamlined.for.action`**, like events should be!\\n\\n:::warning\\n\\nUnlike for event names, it is currently not possible to include a `.` when naming states or machines. Please do not do this.\\n\\n:::\\n\\n## Other tips\\n\\nHere are some additional considerations to think about when choosing a naming style for use with XState to make your state machines more readable and easier to understand.\\n\\n### Improved readability\\n\\nOne of my favorite tips for state machine naming is to use contrasting styles. Contrast is a key ingredient for many things we love from food to color, art, and music. The readability of state machines can also benefit from contrast. If you use **`SHOUTY_UPPERCASE`** event names then please don\u2019t also use that case for state names or\u2026 anything else in the same machine really. At the same time, don\u2019t just name every state, event, and action in **`plain old lower case`** unless you want your state machine to be read like the equivalent of a bored teen with \u201cvocal fry\u201d. Differentiation can help readers distinguish certain elements of the state machine from others and this applies to readability on the editor canvas as well as in code.\\n\\n### Know your audience\\n\\nThe fact that Statey Studio can turn these executable diagrams into code is certainly powerful but what if much of your intended audience is less technical and will be viewing your state machines in the Studio? Some viewers may be more accustomed to reading some of the naming styles more than others, for example, **`Sentence case`** as opposed to **`snake_case`**. Users on the [Studio Pro Plan](https://stately.ai/docs/studio-pro-plan) can make use of [Version History](https://stately.ai/docs/versions) to create differently styled version of the same state machines and share them with different audiences either by [sharing the URL to a specific machine version](https://stately.ai/docs/url#copy-the-url-from-the-browser-address-bar) or by [exporting to markdown, Stories, tests, etc](https://stately.ai/docs/export-as-code).\\n\\n### Consistency is Key\\n\\nChoose whatever you want but try to be consistent. Readers will hopefully understand your chosen naming convention and will come to rely on it. If you name states **`Waiting`**, **`Downloading`**, **`Synchronizing`** then when they see another word ending in **`ing`** they\u2019ll probably assume it\u2019s also a state as opposed to an event. Similarly, if you name actions using **`camelCase`**, you might consider naming all actions in that way, whether they\u2019re entry/exit actions on states or actions on transitions. So remember, consistency is key here.\\n\\n### Conventions and maintenance\\n\\nFrom consistency, conventions often emerge. These could be conventions adhered to across a state machine, an entire project or across all of the projects of a particular user or team. This makes the work easier to understand and easier to maintain, thereby facilitating collaboration.\\n\\n### Summary\\n\\nNaming conventions and namings styles are a matter of taste but also an opportunity for customization and personalization at the individual or team level. The most important thing is readability, consistency and using naming to convey meaning.\\n\\n<EmbedMachine\\n  name=\\"A state machine for part of the CD player example showing states for when the CD is loaded and the CD is stopped, playing, and paused.\\"\\n  embedURL=\\"https://stately.ai/studio/editor/embed/9fa24cc0-3026-41be-bb22-9afc3980fefc?mode=design&machineId=5b186011-088e-4c1c-be95-9a489a126b13\\"\\n/>\\n\\nSometimes putting attention into the little details goes a long way towards ensuring that machines not only look good but are as understandable as possible. And remember, when your state machines look good, you look good too!"},{"id":"2024-01-19-changelog","metadata":{"permalink":"/xstate-zh/blog/2024-01-19-changelog","editUrl":"https://github.com/statelyai/docs/edit/main/blog/2024-01-19-changelog/index.mdx","source":"@site/blog/2024-01-19-changelog/index.mdx","title":"Changelog Week 3 2024","description":"This week, the headline is Stately Inspector! But we\u2019ve also made some improvements and fixed a few bugs in Stately Studio.","date":"2024-01-19T00:00:00.000Z","formattedDate":"January 19, 2024","tags":[{"label":"changelog","permalink":"/xstate-zh/blog/tags/changelog"},{"label":"new","permalink":"/xstate-zh/blog/tags/new"},{"label":"stately inspector","permalink":"/xstate-zh/blog/tags/stately-inspector"},{"label":"improvements","permalink":"/xstate-zh/blog/tags/improvements"},{"label":"bug fixes","permalink":"/xstate-zh/blog/tags/bug-fixes"}],"readingTime":1.42,"hasTruncateMarker":true,"authors":[{"name":"Laura Kalbag","title":"Stately Team","url":"https://github.com/laurakalbag","imageURL":"https://ascelcgzufjyvdzuplwo.supabase.co/storage/v1/object/public/avatars/laura.png","key":"laura"}],"frontMatter":{"title":"Changelog Week 3 2024","description":"This week, the headline is Stately Inspector! But we\u2019ve also made some improvements and fixed a few bugs in Stately Studio.","authors":["laura"],"tags":["changelog","new","stately inspector","improvements","bug fixes"],"date":"2024-01-19T00:00:00.000Z","slug":"2024-01-19-changelog","image":"/blog/2024-01-19-changelog.png"},"unlisted":false,"prevItem":{"title":"State Machines - What\u2019s in a name?","permalink":"/xstate-zh/blog/2024-01-23-state-machines-whats-in-a-name"},"nextItem":{"title":"Stately Office Hours 79","permalink":"/xstate-zh/blog/2024-01-19-office-hours"}},"content":"This week, the headline is Stately Inspector! But we\u2019ve also made some improvements and fixed a few bugs in Stately Studio.{/* truncate */}\\n\\n## Stately Inspector\\n\\nThis week, we released Stately Inspector in beta. Stately Inspector is a tool that allows you to inspect your application\u2019s state visually. It primarily works with frontend applications using XState but can also work with backend code and code that uses any state management solution. [Read more about the launch of Stately Inspector](/blog/2024-01-15-stately-inspector).\\n\\n## Improvements\\n\\n- We\u2019ve made it much clearer that you cannot change machines during a save.\\n- [Workflows](/docs/stately-sky-getting-started) are now started after a deploy.\\n- Users who have downgraded their subscription can now change their read-only Private projects to Public projects to gain full editing access.\\n- [GitHub sync](https://stately.ai/docs/import-from-github) now only shows a separate \u201cunsynced machines\u201d section if the user can edit the connected project.\\n- [Descriptions](/docs/descriptions) now work more predictably and will automatically receive focus when creating a new description.\\n\\n## Bug fixes\\n\\n- We fixed a bug where changing repos after interacting with the file tree would cause an error. This was due to the change in the file tree structure from the newly selected repo.\\n- Copy-pasting an action block will no longer crash the editor.\\n- We also fixed a bug where the **Fit to content** or **Fit to selection** buttons were disabled when the zoom level was 10%.\\n\\n## We\u2019d love your feedback\\n\\nDo you have any questions about these features? Want to be the first to find out new features? Join us at our next office hours live stream. Find out when streams are planned by subscribing to [our YouTube channel](https://www.youtube.com/@Statelyai) or [Twitch channel](https://www.twitch.tv/statelyai) or [following us on LinkedIn](https://www.linkedin.com/company/statelyai/)."},{"id":"2024-01-19-office-hours","metadata":{"permalink":"/xstate-zh/blog/2024-01-19-office-hours","editUrl":"https://github.com/statelyai/docs/edit/main/blog/2024-01-19-office-hours/index.mdx","source":"@site/blog/2024-01-19-office-hours/index.mdx","title":"Stately Office Hours 79","description":"Watch our latest office hours live stream where we cover Stately Agent, Figma Embed, and more.","date":"2024-01-19T00:00:00.000Z","formattedDate":"January 19, 2024","tags":[{"label":"stately","permalink":"/xstate-zh/blog/tags/stately"},{"label":"studio","permalink":"/xstate-zh/blog/tags/studio"},{"label":"office hours","permalink":"/xstate-zh/blog/tags/office-hours"},{"label":"xstate","permalink":"/xstate-zh/blog/tags/xstate"},{"label":"github sync","permalink":"/xstate-zh/blog/tags/github-sync"},{"label":"figma","permalink":"/xstate-zh/blog/tags/figma"},{"label":"state assets","permalink":"/xstate-zh/blog/tags/state-assets"},{"label":"stately inspector","permalink":"/xstate-zh/blog/tags/stately-inspector"},{"label":"VS Code extension","permalink":"/xstate-zh/blog/tags/vs-code-extension"}],"readingTime":1.29,"hasTruncateMarker":true,"authors":[{"name":"Laura Kalbag","title":"Stately Team","url":"https://github.com/laurakalbag","imageURL":"https://ascelcgzufjyvdzuplwo.supabase.co/storage/v1/object/public/avatars/laura.png","key":"laura"}],"frontMatter":{"title":"Stately Office Hours 79","description":"Watch our latest office hours live stream where we cover Stately Agent, Figma Embed, and more.","tags":["stately","studio","office hours","xstate","github sync","figma","state assets","stately inspector","VS Code extension"],"authors":["laura"],"date":"2024-01-19T00:00:00.000Z","slug":"2024-01-19-office-hours","image":"/blog/2024-01-19-office-hours.png"},"unlisted":false,"prevItem":{"title":"Changelog Week 3 2024","permalink":"/xstate-zh/blog/2024-01-19-changelog"},"nextItem":{"title":"Introducing Stately Inspector","permalink":"/xstate-zh/blog/2024-01-15-stately-inspector"}},"content":"Watch our latest office hours live stream where we cover Stately Agent, Figma Embed, and more.\\n\\n{/* truncate */}\\n\\n<YouTube id=\\"c05bOPeinSA\\" />\\n\\n## Chapters\\n\\nWatch the video to find out about our new features and plans for 2024. Use the links below to jump straight to that chapter in the video:\\n\\n- [0:00 Intro](https://youtube.com/watch?v=c05bOPeinSA&t=0s)\\n- [0:24 Team intros](https://youtube.com/watch?v=c05bOPeinSA&t=24s)\\n- [1:12 What is XState?](https://youtube.com/watch?v=c05bOPeinSA&t=72s)\\n- [02:02 Stately Agent (alpha)](https://youtube.com/watch?v=c05bOPeinSA&t=122s)\\n- [15:54 When will the XState VS Code extensiom be upgraded?](https://youtube.com/watch?v=c05bOPeinSA&t=954s)\\n- [16:46 Embed Figma frames](https://youtube.com/watch?v=c05bOPeinSA&t=1006s)\\n- [27:48 Can I input different models with Stately Agent?](https://youtube.com/watch?v=c05bOPeinSA&t=1668s)\\n- [29:46 Stately Inspector](https://youtube.com/watch?v=c05bOPeinSA&t=1786s)\\n- [32:36 Will there be a GitLab integration?](https://youtube.com/watch?v=c05bOPeinSA&t=1956s)\\n- [33:17 Does actor.subscribe provide the same details as the inspect feature?](https://youtube.com/watch?v=c05bOPeinSA&t=1997s)\\n- [34:08 XState V5 support in Stately Studio](https://youtube.com/watch?v=c05bOPeinSA&t=2048s)\\n- [34:56 Does Stately Inspect already work with React?](https://youtube.com/watch?v=c05bOPeinSA&t=2096s)\\n- [35:24 Services from the Stately team](https://youtube.com/watch?v=c05bOPeinSA&t=2124s)\\n- [36:17 THAT conference](https://youtube.com/watch?v=c05bOPeinSA&t=2177s)\\n- [37:07 Catch up on the Stately teams\' conference talks](https://youtube.com/watch?v=c05bOPeinSA&t=2227s)\\n- [38:02 Wrap up](https://youtube.com/watch?v=c05bOPeinSA&t=2282s)\\n\\n## Links from this week\u2019s office hours\\n\\n- [Last office hours](https://www.youtube.com/watch?v=-Jf9N-EaUx0)\\n- [GitHub Sync](https://stately.ai/blog/2024-01-09-introducing-bidirectional-github-sync)\\n- [Sources](https://stately.ai/blog/2024-01-09-introducing-sources)\\n- [Stately Agent](https://github.com/statelyai/agent)\\n- [State assets](https://stately.ai/docs/assets)\\n- [Stately Inspector](https://stately.ai/blog/2024-01-15-stately-inspector/)\\n- [Stately Inspector docs](https://stately.ai/docs/inspector)\\n- [THAT conference](https://thatconference.com/tx/2024/)\\n- [Feedback and feature requests](https://feedback.stately.ai)\\n- [Feature request for GitLab sync](https://github.com/statelyai/feedback/issues/384)\\n- [Stately talks playlist](https://www.youtube.com/watch?v=FamZ0grhyK8&list=PLvWgkXBB3dd63Pp8cFAY61FwjND9ROwXx)\\n\\nGot any questions for the team? Want to share how you\u2019re using Stately or XState? Join us live, or share your questions in our [Discord\u2019s office-hours channel](https://discord.stately.ai).\\n\\nBe the first to find out about our next office hours by subscribing to [our YouTube channel](https://www.youtube.com/@Statelyai), [Twitch channel](https://www.twitch.tv/statelyai), or [following us on LinkedIn](https://www.linkedin.com/company/statelyai/)."},{"id":"2024-01-15-stately-inspector","metadata":{"permalink":"/xstate-zh/blog/2024-01-15-stately-inspector","editUrl":"https://github.com/statelyai/docs/edit/main/blog/2024-01-15-introducing-stately-inspector/index.mdx","source":"@site/blog/2024-01-15-introducing-stately-inspector/index.mdx","title":"Introducing Stately Inspector","description":"Stately Inspector is a universal tool that enables you to visually inspect the state of any application, frontend or backend, with the visualization of Stately\u2019s editor.","date":"2024-01-15T00:00:00.000Z","formattedDate":"January 15, 2024","tags":[{"label":"inspector","permalink":"/xstate-zh/blog/tags/inspector"},{"label":"stately","permalink":"/xstate-zh/blog/tags/stately"},{"label":"xstate","permalink":"/xstate-zh/blog/tags/xstate"},{"label":"actors","permalink":"/xstate-zh/blog/tags/actors"},{"label":"devtools","permalink":"/xstate-zh/blog/tags/devtools"}],"readingTime":3.6,"hasTruncateMarker":true,"authors":[{"name":"David Khourshid","title":"Stately Team","url":"https://github.com/davidkpiano","imageURL":"https://ascelcgzufjyvdzuplwo.supabase.co/storage/v1/object/public/avatars/david.png","key":"david"}],"frontMatter":{"title":"Introducing Stately Inspector","description":"Stately Inspector is a universal tool that enables you to visually inspect the state of any application, frontend or backend, with the visualization of Stately\u2019s editor.","authors":["david"],"tags":["inspector","stately","xstate","actors","devtools"],"date":"2024-01-15T00:00:00.000Z","slug":"2024-01-15-stately-inspector","image":"/blog/2024-01-15-introducing-stately-inspector.png"},"unlisted":false,"prevItem":{"title":"Stately Office Hours 79","permalink":"/xstate-zh/blog/2024-01-19-office-hours"},"nextItem":{"title":"XState: Exploring actors live stream","permalink":"/xstate-zh/blog/2024-01-12-xstate-exploring-actors"}},"content":"One of the most popular features of our legacy Stately Viz was its ability to inspect your app in real-time using the previous `@xstate/inspect` and Stately Viz tools. We wanted to bring this functionality into a universal tool that enables you to visually inspect the state of any application, frontend or backend, with the visualization of [Stately\u2019s editor](https://state.new). So we built Stately Inspector.{/* truncate */}\\n\\n## What is Stately Inspector?\\n\\nStately Inspector is a tool that allows you to inspect your application\u2019s state visually. It primarily works with frontend applications using XState but can also work with backend code and code that uses any state management solution.\\n\\n[Watch a demo of Stately Inspector in our most recent office hours](https://www.youtube.com/live/-Jf9N-EaUx0?feature=shared&t=408):\\n\\n<YouTube id=\\"-Jf9N-EaUx0\\"/>\\n\\n## Installing Stately Inspect\\n\\nTo inspect applications with Stately Inspector, install [Stately Inspect](https://github.com/statelyai/inspect) from npm via `@statelyai/inspect`:\\n\\n```bash\\nnpm install @statelyai/inspect\\n```\\n\\nThen, import the relevant inspector creator into your app. The creator is used to create an inspector (e.g., a browser or WebSocket inspector) to connect to XState actors and/or manually send inspection events to Stately Inspector:\\n\\n```ts\\nimport { createActor } from \'xstate\';\\n// highlight-next-line\\nimport { createBrowserInspector } from \'@statelyai/inspect\';\\nimport { machine } from \'./machine\';\\n\\n// highlight-next-line\\nconst inspector = createBrowserInspector();\\n\\n// ...\\n\\nconst actor = createActor(machine, {\\n  // highlight-next-line\\n  inspect: inspector.inspect,\\n  // ... other actor options\\n});\\n\\nactor.start();\\n```\\n\\nNow, when you run your app, you should see a new tab or popup open in your browser that looks something like this:\\n\\n<p>\\n  <ThemedImage\\n    alt=\\"The Stately Inspector view, showing a state machine for the pizza ordering process. The current state and available event is highlighted in green.\\"\\n    sources={{\\n      light: \'/blog/2024-01-15-introducing-stately-inspector/inspector.png\',\\n      dark: \'/blog/2024-01-15-introducing-stately-inspector/inspector-dm.png\',\\n    }}\\n  />\\n</p>\\n\\n\\n## Sending inspection events\\n\\nThe `@statelyai/inspect` package will send inspection events to the connected Stately Inspector. There are currently three kinds of events sent:\\n\\n- Actor creation events\\n- Actor-to-actor communication events\\n- Actor snapshot changes\\n\\nWhen you pass in the `inspect` option to the actor options in XState\u2019s `createActor(machine, options)` function, it will automatically send all of these inspection events.\\n\\nFor usage with other state management solutions, you can manually send inspection events using the following methods:\\n\\n- `inspector.actor(actor, snapshot, info)` - send actor creation events\\n- `inspector.event(actor, event, info)` - send actor-to-actor communication events\\n- `inspector.snapshot(actor, snapshot, info)` - send actor snapshot changes\\n\\n```ts\\nimport { createBrowserInspector } from \'@statelyai/inspect\';\\n\\nconst inspector = createBrowserInspector();\\n\\n// Imagine a todo app...\\ninspector.actor(\'todos\');\\n\\n// When a todo is created\\ninspector.actor(\'todo-1\', {\\n  context: { status: \'active\' }\\n});\\n\\n// When a user completes a todo\\ninspector.event(\'todo-1\', { type: \'todo.complete\' });\\n\\n// When a todo changes\\ninspector.snapshot(\'todo-1\', {\\n  context: { status: \'completed\' }\\n});\\n\\n// When the todos actor (not the user) sends an event to a todo\\ninspector.event(\'todo-1\', { type: \'todo.update\' }, {\\n  source: \'todos\'\\n});\\n\\n// ... etc.\\n\\n```\\n\\nThe above is a contrived example demonstrating how you can instrument inspector events at any time from any part of your app. The three types of inspection events contain everything that Stately Inspector needs to generate two kinds of real-time diagrams automatically:\\n\\n- **State machine diagrams** (if a state machine definition is provided)\\n- **Sequence diagrams**\\n\\n<p>\\n  <ThemedImage\\n    alt=\\"The Stately Inspector view, showing a state machine and a sequence diagram for the pizza ordering process side-by-side.\\"\\n    sources={{\\n      light: \'/blog/2024-01-15-introducing-stately-inspector/machine-and-sequence-diagram.png\',\\n      dark: \'/blog/2024-01-15-introducing-stately-inspector/machine-and-sequence-diagram-dm.png\',\\n    }}\\n  />\\n</p>\\n\\n\\n## Coming soon\\n\\nThe goal of Stately Inspector is to be a universal tool that enables you to visually inspect the state of any application, frontend or backend. Right now, it\u2019s optimized for XState (with `inspector.inspect`) or non-XState (with `inspector.actor(...)`, `inspector.event(...)`, `inspector.snapshot(...)`) state management solutions in frontend applications. We would love your feedback so that we can prioritize:\\n\\n- **[A websocket inspector creator](https://github.com/statelyai/feedback/issues/387)**: inspect frontend and/or backend applications remotely.\\n- **[Bidirectional communication](https://github.com/statelyai/feedback/issues/388)**: send events from Stately Inspector to your live application.\\n- **[Middleware for popular libraries](https://github.com/statelyai/feedback/issues/389)**: e.g., Redux, MobX, Zustand, and more.\\n- **[Sync with Stately Studio](https://github.com/statelyai/feedback/issues/390)**: enrich inspected machines with information (layouts, colors, assets, annotations, etc.) from Stately Studio.\\n- **[Analytics](https://github.com/statelyai/feedback/issues/391)**: view real-time analytics of flows in your application.\\n\\n[Let us know your thoughts on our Discord server](https://discord.stately.ai) or [submit a feature request on our GitHub board](https://feedback.stately.ai). Want to be the first to know about upcoming features? Subscribe to our [YouTube channel](https://www.youtube.com/@Statelyai) or [follow us on LinkedIn](https://www.linkedin.com/company/statelyai/) to avoid missing our next office hours live stream."},{"id":"2024-01-12-xstate-exploring-actors","metadata":{"permalink":"/xstate-zh/blog/2024-01-12-xstate-exploring-actors","editUrl":"https://github.com/statelyai/docs/edit/main/blog/2024-01-12-xstate-exploring-actors/index.mdx","source":"@site/blog/2024-01-12-xstate-exploring-actors/index.mdx","title":"XState: Exploring actors live stream","description":"Watch our latest live stream where we cover actors in XState. Learn more about common use cases, more complex state machines, and the actor model.","date":"2024-01-12T00:00:00.000Z","formattedDate":"January 12, 2024","tags":[{"label":"stately","permalink":"/xstate-zh/blog/tags/stately"},{"label":"studio","permalink":"/xstate-zh/blog/tags/studio"},{"label":"video","permalink":"/xstate-zh/blog/tags/video"},{"label":"live stream","permalink":"/xstate-zh/blog/tags/live-stream"},{"label":"xstate","permalink":"/xstate-zh/blog/tags/xstate"},{"label":"xstate v5","permalink":"/xstate-zh/blog/tags/xstate-v-5"},{"label":"actors","permalink":"/xstate-zh/blog/tags/actors"},{"label":"inspect","permalink":"/xstate-zh/blog/tags/inspect"}],"readingTime":1.43,"hasTruncateMarker":true,"authors":[{"name":"Laura Kalbag","title":"Stately Team","url":"https://github.com/laurakalbag","imageURL":"https://ascelcgzufjyvdzuplwo.supabase.co/storage/v1/object/public/avatars/laura.png","key":"laura"}],"frontMatter":{"title":"XState: Exploring actors live stream","description":"Watch our latest live stream where we cover actors in XState. Learn more about common use cases, more complex state machines, and the actor model.","tags":["stately","studio","video","live stream","xstate","xstate v5","actors","inspect"],"authors":["laura"],"date":"2024-01-12T00:00:00.000Z","slug":"2024-01-12-xstate-exploring-actors","image":"/blog/2024-01-12-xstate-exploring-actors.png"},"unlisted":false,"prevItem":{"title":"Introducing Stately Inspector","permalink":"/xstate-zh/blog/2024-01-15-stately-inspector"},"nextItem":{"title":"Building backend workflows with Stately: Media scanning","permalink":"/xstate-zh/blog/2024-01-11-building-backend-workflows"}},"content":"Watch our latest live stream where we cover actors in XState. Learn more about common use cases, more complex state machines, and the actor model.\\n\\n{/* truncate */}\\n\\n<YouTube id=\\"Rj7lOvDwcYs\\" />\\n\\n## Chapters\\n\\nWatch the video to find out about actors in XState V5:\\n\\n- [0:00 Intro](https://youtube.com/watch?v=Rj7lOvDwcYs&t=0s) \\n- [1:10 Team intros](https://youtube.com/watch?v=Rj7lOvDwcYs&t=70s) \\n- [1:32 XState V5: actor first](https://youtube.com/watch?v=Rj7lOvDwcYs&t=92s) \\n- [2:08 Modeling a cocoa dispensing machine in the Studio](https://youtube.com/watch?v=Rj7lOvDwcYs&t=128s) \\n- [10:34 Modeling actors](https://youtube.com/watch?v=Rj7lOvDwcYs&t=634s) \\n- [12:23 Actor sequence diagram](https://youtube.com/watch?v=Rj7lOvDwcYs&t=743s) \\n- [15:32 Adding implementation details](https://youtube.com/watch?v=Rj7lOvDwcYs&t=932s) \\n- [22:01 Spawning actors](https://youtube.com/watch?v=Rj7lOvDwcYs&t=1321s) \\n- [26:15 Callback actors](https://youtube.com/watch?v=Rj7lOvDwcYs&t=1575s) \\n- [29:37 Inspect your actor system](https://youtube.com/watch?v=Rj7lOvDwcYs&t=1777s) \\n- [34:00 Actor communication](https://youtube.com/watch?v=Rj7lOvDwcYs&t=2040s) \\n- [37:57 Difference between invoked and spawned actors](https://youtube.com/watch?v=Rj7lOvDwcYs&t=2277s) \\n- [38:49 Generating a React app from your machine](https://youtube.com/watch?v=Rj7lOvDwcYs&t=2329s) \\n- [39:29 Spawning arrays of actors](https://youtube.com/watch?v=Rj7lOvDwcYs&t=2369s) \\n- [42:24 Managing and modeling spawned actors](https://youtube.com/watch?v=Rj7lOvDwcYs&t=2544s) \\n- [49:33 Enqueue actions](https://youtube.com/watch?v=Rj7lOvDwcYs&t=2973s) \\n- [52:19 Why are actions not called effects?](https://youtube.com/watch?v=Rj7lOvDwcYs&t=3139s) \\n- [53:13 What is a good example of output from a child actor to a parent actor?](https://youtube.com/watch?v=Rj7lOvDwcYs&t=3193s) \\n- [1:01:01 Migrating from XState V4 to V5](https://youtube.com/watch?v=Rj7lOvDwcYs&t=3661s) \\n- [1:01:41 Promise actors](https://youtube.com/watch?v=Rj7lOvDwcYs&t=3701s) \\n- [1:03:37 Transition actors](https://youtube.com/watch?v=Rj7lOvDwcYs&t=3817s) \\n- [1:04:43 Wrap up](https://youtube.com/watch?v=Rj7lOvDwcYs&t=3883s) \\n\\n## Links and further resources\\n\\n- [Want to get into the basics of XState?](https://www.youtube.com/watch?v=TRVjeil-y74)\\n- [XState V5 release blog post](/blog/2023-12-01-xstate-v5)\\n- [Partial event descriptors](/blog/announcing-xstate-v5-beta#partial-event-descriptors)\\n- [TLDraw](https://www.tldraw.com/)\\n- [Generate React app with Stately](/blog/2023-11-20-stately-studio-2-0#generate-ui-prototypes)\\n- [CodeSandbox code](https://codesandbox.io/p/sandbox/beautiful-rgb-x3q94p?file=%2Fmachine.ts)\\n- [Use setup(...) to specify types](/docs/typescript#specifying-types)\\n- [Blog post on Sources](/blog/2024-01-09-introducing-sources)\\n- [Request features at](https://feedback.stately.ai)\\n- [Stately Inspector](https://github.com/statelyai/inspect)\\n- [Migrating to XState V5 docs](/docs/migration)\\n- [Migrating to XState V5 webinar](https://youtube.com/live/s-nqoIbIZac)\\n- [Promise actors](/docs/promise-actors)\\n- [Transition actors](/docs/transition-actors)\\n- [Observable actors](/docs/observable-actors)\\n- [Callback actors](/docs/callback-actors)\\n- [Stately Studio](https://stately.ai)\\n- [Join our Discord](https://discord.stately.ai)\\n\\nBe the first to find out about our next live stream by subscribing to [our YouTube channel](https://www.youtube.com/@Statelyai), [Twitch channel](https://www.twitch.tv/statelyai), or [following us on LinkedIn](https://www.linkedin.com/company/statelyai/)."},{"id":"2024-01-11-building-backend-workflows","metadata":{"permalink":"/xstate-zh/blog/2024-01-11-building-backend-workflows","editUrl":"https://github.com/statelyai/docs/edit/main/blog/2024-01-11-building-backend-workflows/index.mdx","source":"@site/blog/2024-01-11-building-backend-workflows/index.mdx","title":"Building backend workflows with Stately: Media scanning","description":"Watch Gavin as he covers an example backend media scanning workflow defined and implemented with XState and Stately tooling.","date":"2024-01-11T00:00:00.000Z","formattedDate":"January 11, 2024","tags":[{"label":"stately","permalink":"/xstate-zh/blog/tags/stately"},{"label":"studio","permalink":"/xstate-zh/blog/tags/studio"},{"label":"xstate","permalink":"/xstate-zh/blog/tags/xstate"},{"label":"xstate v5","permalink":"/xstate-zh/blog/tags/xstate-v-5"},{"label":"backend","permalink":"/xstate-zh/blog/tags/backend"},{"label":"workflows","permalink":"/xstate-zh/blog/tags/workflows"}],"readingTime":0.255,"hasTruncateMarker":true,"authors":[{"name":"Gavin Bauman","title":"Stately Team","url":"https://github.com/gavination","imageURL":"https://ascelcgzufjyvdzuplwo.supabase.co/storage/v1/object/public/avatars/gavin.png","key":"gavin"}],"frontMatter":{"title":"Building backend workflows with Stately: Media scanning","description":"Watch Gavin as he covers an example backend media scanning workflow defined and implemented with XState and Stately tooling.","tags":["stately","studio","xstate","xstate v5","backend","workflows"],"authors":["gavin"],"date":"2024-01-11T00:00:00.000Z","slug":"2024-01-11-building-backend-workflows","image":"/blog/2024-01-11-building-backend-workflows.png"},"unlisted":false,"prevItem":{"title":"XState: Exploring actors live stream","permalink":"/xstate-zh/blog/2024-01-12-xstate-exploring-actors"},"nextItem":{"title":"Changelog Week 2 2024","permalink":"/xstate-zh/blog/2024-01-11-changelog"}},"content":"Watch Gavin as he covers an example backend media scanning workflow defined and implemented with XState and Stately tooling. \\n\\n{/* truncate */}\\n\\n<YouTube id=\\"YRNqFxQjThY\\" />\\n\\n[Get the code for this example from the XState GitHub repo](https://github.com/statelyai/xstate/tree/main/examples/workflow-media-scanner).\\n\\nBe the first to find out about our video by subscribing to [our YouTube channel](https://www.youtube.com/@Statelyai)."},{"id":"2024-01-11-changelog","metadata":{"permalink":"/xstate-zh/blog/2024-01-11-changelog","editUrl":"https://github.com/statelyai/docs/edit/main/blog/2024-01-11-changelog/index.mdx","source":"@site/blog/2024-01-11-changelog/index.mdx","title":"Changelog Week 2 2024","description":"We\u2019ve had a busy start to 2024 with the release of GitHub Sync, sources, and draft projects. We\u2019ve also made plenty of improvements and fixed a few bugs.","date":"2024-01-11T00:00:00.000Z","formattedDate":"January 11, 2024","tags":[{"label":"changelog","permalink":"/xstate-zh/blog/tags/changelog"},{"label":"new","permalink":"/xstate-zh/blog/tags/new"}],"readingTime":2.825,"hasTruncateMarker":true,"authors":[{"name":"Laura Kalbag","title":"Stately Team","url":"https://github.com/laurakalbag","imageURL":"https://ascelcgzufjyvdzuplwo.supabase.co/storage/v1/object/public/avatars/laura.png","key":"laura"}],"frontMatter":{"title":"Changelog Week 2 2024","description":"We\u2019ve had a busy start to 2024 with the release of GitHub Sync, sources, and draft projects. We\u2019ve also made plenty of improvements and fixed a few bugs.","authors":["laura"],"tags":["changelog","new"],"date":"2024-01-11T00:00:00.000Z","slug":"2024-01-11-changelog","image":"/blog/2024-01-11-changelog.png"},"unlisted":false,"prevItem":{"title":"Building backend workflows with Stately: Media scanning","permalink":"/xstate-zh/blog/2024-01-11-building-backend-workflows"},"nextItem":{"title":"Bidirectional GitHub Sync is now here!","permalink":"/xstate-zh/blog/2024-01-09-introducing-bidirectional-github-sync"}},"content":"We\u2019ve had a busy start to 2024 with the release of GitHub Sync, sources, and draft projects. We\u2019ve also made plenty of improvements and fixed a few bugs.{/* truncate */}\\n\\n## GitHub Sync\\n\\nYou can connect a GitHub repo to a new project in Stately Studio, keeping updates between GitHub and Stately Studio in sync. Connecting a GitHub repo allows you to import your existing machines from GitHub and push changes to your machines back to your repo as pull requests. [Read more about GitHub Sync in our recent blog post](/blog/2024-01-09-introducing-bidirectional-github-sync).\\n\\n*GitHub Sync is a premium feature of Stately Studio. You can try Stately Studio\u2019s premium plans with a free trial. [Check out the features on our Pro plan](/docs/studio-pro-plan), [Team plan](/docs/studio-team-plan), [Enterprise plan](/docs/studio-enterprise-plan) or [upgrade your existing plan](https://stately.ai/registry/billing).*\\n\\n## Sources\\n\\nUsing the <Code size={18} /> **Sources** panel, you can now provide source code for your actions, actors, and guards implementations inside Stately\u2019s editor. You can add custom source code from the **Sources** panel to suit your needs or choose from logic templates. Your source code will be included in your [live actors](/docs/stately-sky-getting-started), [synced projects](/docs/import-from-github), and [exported code](/docs/export-as-code), as found in the <Code size={18} /> **Code** panel. [Read more about sources in our recent blog post](/blog/2024-01-09-introducing-sources).\\n\\nTo complement sources, you can also now add [parameters](/docs/actions#dynamic-action-parameters) to your actions and input to your actors! When adding or editing an action or actor on the canvas, you can use the button to add <Plus size={18}/> **parameter** or add <Plus size={18}/> **input**. From here, you can add key-value pairs as dynamic input for your source code. Parameters don\u2019t just open the possibility for more reusable actions and actors; in the future, [Simulation mode](/docs/simulation-mode) and live actors will be able to use these parameters to execute actions based on different inputs when simulating your machine.\\n\\n## Draft projects\\n\\nWhen you visit [state.new](https://state.new), we will now automatically create a new Drafts project for your machine or add your machine to your existing Drafts project. The last machine you created at state.new will also be migrated to your Drafts project the first time you visit state.new. You will now also be directed to sign in when you visit state.new unless you\u2019re already signed in.\\n\\n## Improvements\\n\\n- We\u2019ve added support in Stately\u2019s editor for inline guards, inline actors and action parameters. These will now be imported, displayed in your machine, and exported correctly. Imported inline actors, actions, and guards are now given a unique ID. [Read the sources docs for more information about naming actions, actors, and guards](/docs/sources/#unnamed-actions-actors-and-guards).\\n- You can now give your workflows custom names when deploying them with Stately Sky.\\n- You can now use Simulate mode in your embedded machines.\\n- [The signup and login page](https://stately.ai/registry/login) now has a new look.\\n\\n## Bug fixes\\n\\n- We now always show the lock button in the machine Details panel as active (not disabled) and added a spinner to indicate when the lock status is changing.\\n- We fixed a bug where the editor would not work on reload if you had added a `.` to a node name.\\n- We fixed an error where creating invoked actors could sometimes crash the editor.\\n\\n## We\u2019d love your feedback\\n\\nAre you using any of our new or beta features? We\u2019d love to hear your feedback. You can [chat with us on Discord](https://discord.stately.ai) or [leave a feature request on our GitHub feedback board](https://github.com/orgs/statelyai/projects/2)."},{"id":"2024-01-09-introducing-bidirectional-github-sync","metadata":{"permalink":"/xstate-zh/blog/2024-01-09-introducing-bidirectional-github-sync","editUrl":"https://github.com/statelyai/docs/edit/main/blog/2024-01-09-introducing-bidirectional-github-sync/index.mdx","source":"@site/blog/2024-01-09-introducing-bidirectional-github-sync/index.mdx","title":"Bidirectional GitHub Sync is now here!","description":"Watch our latest office hours live stream where we cover new features including Stately Inspect, GitHub Sync, Sources, and our roadmap for 2024.","date":"2024-01-09T00:00:00.000Z","formattedDate":"January 9, 2024","tags":[{"label":"stately","permalink":"/xstate-zh/blog/tags/stately"},{"label":"studio","permalink":"/xstate-zh/blog/tags/studio"},{"label":"GitHub","permalink":"/xstate-zh/blog/tags/git-hub"},{"label":"sync","permalink":"/xstate-zh/blog/tags/sync"},{"label":"git","permalink":"/xstate-zh/blog/tags/git"}],"readingTime":6.725,"hasTruncateMarker":true,"authors":[{"name":"Kevin Maes","title":"Stately Team","url":"https://github.com/kevinmaes","imageURL":"https://ascelcgzufjyvdzuplwo.supabase.co/storage/v1/object/public/avatars/kevin.png","key":"kevin"}],"frontMatter":{"title":"Bidirectional GitHub Sync is now here!","description":"Watch our latest office hours live stream where we cover new features including Stately Inspect, GitHub Sync, Sources, and our roadmap for 2024.","tags":["stately","studio","GitHub","sync","git"],"authors":["kevin"],"date":"2024-01-09T00:00:00.000Z","slug":"2024-01-09-introducing-bidirectional-github-sync","image":"/blog/2024-01-09-introducing-bidirectional-github-sync.png"},"unlisted":false,"prevItem":{"title":"Changelog Week 2 2024","permalink":"/xstate-zh/blog/2024-01-11-changelog"},"nextItem":{"title":"Unlock bidirectional editing with sources","permalink":"/xstate-zh/blog/2024-01-09-introducing-sources"}},"content":"The team at Stately is proud to release an exciting new feature to kick off 2024, [GitHub Sync with Stately Studio](https://stately.ai/docs/import-from-github)! This feature has been highly requested by users and it prompted us to initially launch [GitHub Import](https://stately.ai/docs/import-from-github#sync-changes-to-machines-from-github) as a Pro feature over a year ago. But GitHub Sync goes beyond just importing as it enables a completely bidirectional workflow between GitHub repositories and Stately Studio. View the [short demo of GitHub Sync](https://www.youtube.com/watch?v=x-F1TPjz_lI&t=318s) from our Office Hours last month.\\n\\n{/* truncate */}\\n\\n<p>\\n  <ThemedImage\\n    alt=\\"Connect a project to a GitHub repository by clicking the Connect GitHub button.\\"\\n    sources={{\\n      light:\\n        \'/blog/2024-01-09-introducing-bidirectional-github-sync/connect-github-button.png\',\\n      dark: \'/blog/2024-01-09-introducing-bidirectional-github-sync/connect-github-button-dm.png\',\\n    }}\\n  />\\n</p>\\n\\n### Manual syncing is so 2023\\n\\nAdoption of state machines and [XState](https://stately.ai/docs/xstate) in the TypeScript/JavaScript community has steadily grown over the years and there are thousands of repositories on GitHub alone that use XState in projects. Stately Studio also continues to gain adoption as its free and premium features make working with state machines and XState even more powerful and intuitive. Until now, users have sought to synchronize work between their repositories and Studio, in either or both directions, but it hasn\u2019t always been easy. This often involved copy/pasting code while [importing machines to Studio](https://stately.ai/docs/import-from-code) or [exporting machines as code](https://stately.ai/docs/export-as-code), and reconciling multiple sources of truth. GitHub Sync seeks to eliminate those pain points.\\n\\n### Project code enhanced by Stately Studio\\n\\nStately Studio is packed with powerful features like its robust editor for visualizing state machines as diagrams, flow simulation, export options, and test generation. The Studio also allows for easily [organizing machines into projects](https://stately.ai/docs/projects), [saving versions](https://stately.ai/docs/versions), and collaborating with other team members. Many XState users have been able to use the diagramming features of our VSCode extension but now GitHub Sync makes it easier to enjoy all of the Studio features while using any code editor and remaining connected to the GitHub repo as a source of truth.\\n\\n### Code synced for the entire team\\n\\nDepending on the type of software being developed or depending on team size, XState may only be used in a portion of the project\u2019s code. The project\u2019s repo may be used by many other team members who aren\u2019t yet using Stately Studio\u2019s features. Changes to the code could be made directly by those contributors to the GitHub repo and they need to be synchronized with the Studio on an ongoing basis. For users on a [Team plan](https://stately.ai/docs/studio-team-plan) who already collaborate in the Studio, their machines also need to be synced back to their repos. Git and GitHub already include intuitive tools for merging code and for conflict resolution so the Studio is now able to leverage those to keep everything in sync.\\n\\n## What\u2019s included in the new GitHub Sync release?\\n\\n- [A more robust importing process](#a-more-robust-importing-process)\\n- [The editing power of Stately Studio](#the-editing-power-of-stately-studio)\\n- [Staying in sync with the GitHub repo](#staying-in-sync-with-the-github-repo)\\n- [Creating pull requests back to the repo](#creating-pull-requests-back-to-the-repo)\\n\\n### A more robust importing process\\n\\nImporting from a GitHub Repo is now easier and more robust. Users can automatically [authorize Stately Studio](https://stately.ai/docs/import-from-github#sync-changes-to-machines-from-github) with a single click or they can choose to use a customized GitHub access token with fine grained repository access and permissions. Access allows users to then choose one of their GitHub repositories, including a specific branch, and then select which files and folders to include for import and even [specify a path](https://stately.ai/docs/import-from-github#sync-changes-to-machines-from-github) for [new machines created in the Studio](https://stately.ai/docs/import-from-github#sync-changes-to-machines-from-github). The Studio will identify all of the XState machines in the repo files, extract them, and create a connected project. Connected projects work just like other Studio projects but with additional GitHub-related features.\\n\\n<p>\\n  <ThemedImage\\n    alt=\\"Importing allows users to choose a repository, a branch, and to select individual files or entire folders to sync with Stately Studio.\\"\\n    sources={{\\n      light:\\n        \'/blog/2024-01-09-introducing-bidirectional-github-sync/github-select-files.png\',\\n      dark: \'/blog/2024-01-09-introducing-bidirectional-github-sync/github-select-files-dm.png\',\\n    }}\\n  />\\n</p>\\n\\n### Editing power of Stately Studio\\n\\nOnce a connected project has been created, its machines can be edited just like with other projects and machines. Use the visual editor to add or modify states and transitions. Effects can be added and a machine\u2019s layout can be automatically or manually adjusted. Flows can be created or modified with AI generation. With a [Stately Studio Pro plan](https://stately.ai/docs/studio-pro-plan), [machine versions can be saved](https://stately.ai/docs/versions#save-a-version) and machines can even be run via [Stately Sky](https://stately.ai/docs/stately-sky-getting-started).\\n\\n<p>\\n  <ThemedImage\\n    alt=\\"Stately Studio has offers powerful free and premium features for working with your state machines after importing them from a GitHub repository, like using Version History.\\"\\n    sources={{\\n      light:\\n        \'/blog/2024-01-09-introducing-bidirectional-github-sync/premium-feature-version-history.png\',\\n      dark: \'/blog/2024-01-09-introducing-bidirectional-github-sync/premium-feature-version-history-dm.png\',\\n    }}\\n  />\\n</p>\\n\\nThe Studio also provides a number of other features like test generation and export options to code, markdown, or to external editors. But this work can all be in coordination with the underlying GitHub repo.\\n\\n### Staying in sync with the GitHub repo\\n\\nBy default, connected projects will [automatically be synchronized with the GitHub repo](https://stately.ai/docs/import-from-github#sync-changes-to-machines-from-github) every time the project loads. New files added to selected folders in the repository will appear in the Studio. We\u2019ll also warn of any deleted files that might cause machines to be deleted in the Studio. It\u2019s possible to opt out of this and to perform syncs manually but we recommend that this still be done fairly often to prevent potential conflicts.\\n\\n<p>\\n  <ThemedImage\\n    alt=\\"By default, connected repos are auto-synced with the GitHub repo but this can be disabled if you want to manually sync instead.\\"\\n    sources={{\\n      light:\\n        \'/blog/2024-01-09-introducing-bidirectional-github-sync/github-auto-sync.png\',\\n      dark: \'/blog/2024-01-09-introducing-bidirectional-github-sync/github-auto-sync-dm.png\',\\n    }}\\n  />\\n</p>\\n\\nA connected project starts out [in sync with the branch](https://stately.ai/docs/import-from-github#sync-changes-to-machines-from-github) that was specified during the import process via the project\u2019s [auto-sync setting](https://stately.ai/docs/import-from-github#auto-sync). However, it is also possible to [connect to additional repo branches](https://stately.ai/docs/import-from-github#sync-changes-to-machines-from-github). Under the hood, these branch connections are considered a different version of the connected project and it\u2019s easy to switch between them, add new branches, or delete branch connections.\\n\\nAt any time, new machines can be added directly to a connected project or existing machines can be moved or forked into a connected project. Those can all be [added to the GitHub repo](https://stately.ai/docs/import-from-github#sync-new-machines-created-in-stately-studio) as part of the pull request process.\\n\\n### Creating pull requests back to the repo\\n\\nThe key feature required to complete a bidirectional workflow between GitHub and Stately Studio is the ability to [create pull requests](https://stately.ai/docs/import-from-github#create-pull-request) back to the original repository and that\u2019s now easy to do directly from the Studio. Connected projects have a GitHub Settings panel where you can manage the GitHub connection to your project, including creating a pull request which can target any other branch in the repository.\\n\\n<p>\\n  <ThemedImage\\n    alt=\\"Connected projects have a GitHub Settings panel where users can create new pull requests targeting any branch in the connected repository.\\"\\n    sources={{\\n      light:\\n        \'/blog/2024-01-09-introducing-bidirectional-github-sync/github-settings.png\',\\n      dark: \'/blog/2024-01-09-introducing-bidirectional-github-sync/github-settings-dm.png\',\\n    }}\\n  />\\n</p>\\n\\nOnce a pull request is made, the process becomes the same as it is for any other GitHub pull request where it can be reviewed, modified, approved, and merged. Subsequent changes can be added to existing pull requests with the [Update pull request feature](https://stately.ai/docs/import-from-github#update-pull-request). This allows for greater productivity in the Studio while knowing that changes will make their way back into the GitHub repo.\\n\\n<p>\\n  <ThemedImage\\n    alt=\\"Pull requests appear on GitHub just as they normally would and can be reviewed, modified, approved, and merged.\\"\\n    sources={{\\n      light:\\n        \'/blog/2024-01-09-introducing-bidirectional-github-sync/github-pull-request.png\',\\n      dark: \'/blog/2024-01-09-introducing-bidirectional-github-sync/github-pull-request-dm.png\',\\n    }}\\n  />\\n</p>\\n\\n## What\u2019s next?\\n\\nWe can\u2019t wait for you to try out GitHub Sync with your Studio machines and repositories. If you\u2019re a Pro user you can get started immediately. [Community plan](https://stately.ai/docs/studio-community-plan) users can [get a free trial](https://stately.ai/docs/upgrade) for our Pro or Team plans during which time you can import machines into Stately Studio to use GitHub Sync along with all of our other [Pro features](https://stately.ai/docs/studio-pro-plan) or [Team features](https://stately.ai/docs/studio-team-plan).\\n\\nBut the fun doesn\u2019t stop there. It will soon be possible to modify file and folder selections after importing from a GitHub repo into a connected project. Another feature we are considering is the ability to convert existing Studio projects into connected projects which would create a new GitHub repository or add new branches to an existing repo. We\u2019d love to hear how [GitHub Sync](https://stately.ai/docs/import-from-github) is working for you and also what [other features would be useful for you](https://github.com/statelyai/feedback/issues/new/choose) and your team."},{"id":"2024-01-09-introducing-sources","metadata":{"permalink":"/xstate-zh/blog/2024-01-09-introducing-sources","editUrl":"https://github.com/statelyai/docs/edit/main/blog/2024-01-09-introducing-sources/index.mdx","source":"@site/blog/2024-01-09-introducing-sources/index.mdx","title":"Unlock bidirectional editing with sources","description":"With sources, you can now provide implementation code for your actions, actors, and guards, making syncing between the editor and your codebase a breeze.","date":"2024-01-09T00:00:00.000Z","formattedDate":"January 9, 2024","tags":[{"label":"stately","permalink":"/xstate-zh/blog/tags/stately"},{"label":"editor","permalink":"/xstate-zh/blog/tags/editor"},{"label":"xstate","permalink":"/xstate-zh/blog/tags/xstate"},{"label":"state machines","permalink":"/xstate-zh/blog/tags/state-machines"},{"label":"sources","permalink":"/xstate-zh/blog/tags/sources"},{"label":"actions","permalink":"/xstate-zh/blog/tags/actions"},{"label":"actors","permalink":"/xstate-zh/blog/tags/actors"},{"label":"guards","permalink":"/xstate-zh/blog/tags/guards"}],"readingTime":5.905,"hasTruncateMarker":true,"authors":[{"name":"Farzad Yousefzadeh","title":"Stately Team","url":"https://github.com/farskid","imageURL":"https://ascelcgzufjyvdzuplwo.supabase.co/storage/v1/object/public/avatars/farzad.png","key":"farzad"},{"name":"Laura Kalbag","title":"Stately Team","url":"https://github.com/laurakalbag","imageURL":"https://ascelcgzufjyvdzuplwo.supabase.co/storage/v1/object/public/avatars/laura.png","key":"laura"}],"frontMatter":{"title":"Unlock bidirectional editing with sources","description":"With sources, you can now provide implementation code for your actions, actors, and guards, making syncing between the editor and your codebase a breeze.","authors":["farzad","laura"],"tags":["stately","editor","xstate","state machines","sources","actions","actors","guards"],"date":"2024-01-09T00:00:00.000Z","slug":"2024-01-09-introducing-sources","image":"/blog/2024-01-09-introducing-sources.png"},"unlisted":false,"prevItem":{"title":"Bidirectional GitHub Sync is now here!","permalink":"/xstate-zh/blog/2024-01-09-introducing-bidirectional-github-sync"},"nextItem":{"title":"A look back at Stately in 2023","permalink":"/xstate-zh/blog/2024-01-08-a-look-back-at-stately-in-2023"}},"content":"We\u2019re excited to share a feature that unlocks a whole new level of power and flexibility in Stately\u2019s editor: sources. With sources, you can now provide implementation source code for your actions, actors, and guards, making syncing between the editor and your codebase a breeze.\\n\\n{/* truncate */}\\n\\nOne of the most significant benefits of using our Stately editor is using your state machines as a source of truth. Using your state machines as live documentation relies upon bi-directionally syncing between visualizing your state machine and integrating the implementation code in your codebase. Previously, we had workarounds for bi-directional work; you could use the [XState VS Code extension](https://marketplace.visualstudio.com/items?itemName=statelyai.stately-vscode) or add your implementation code _after_ exporting your machine. You could even keep your machine in a separate file from your implementations to make it easier to replace your machine code with the exported code without overwriting your implementations. But you couldn\u2019t provide implementation code in the editor, and importing your implementations from an existing machine would lose them. But that has all now changed with the introduction of sources!\\n\\n_Watch a demo of sources from our office hours at the end of December:_\\n\\n<YouTube id=\\"x-F1TPjz_lI\\" />\\n\\n_\u25b6\ufe0f [Jump straight to the video chapter on sources](https://www.youtube.com/watch?v=x-F1TPjz_lI&t=318s)._\\n\\n## What are sources?\\n\\nUsing the <Code size={18} /> **Sources** panel, you can now provide source code for your actions, actors, and guards implementations from inside Stately\u2019s editor.\\n\\nYou can add custom source code from the **Sources** panel to suit your needs or choose from logic templates. Your source code will be included in your [live actors](/docs/stately-sky-getting-started), [synced projects](/docs/import-from-github), and [exported code](/docs/export-as-code), as found in the <Code size={18} /> **Code** panel. When an action, actor, or guard is selected, the **Sources** panel shows its source code. When no item is selected on the canvas, the **Sources** panel shows all the sources for your current machine.\\n\\n### Logic templates\\n\\nYou can also choose from logic templates when editing the sources for your actions, actors, or guards. Use the template buttons to quickly add the implementation code for XState\u2019s [logic creators](/docs/actors#actor-logic-creators), [higher-level guards](/docs/guards#higher-level-guards), and [built-in actions](/docs/actions), and the correct XState imports will be added to your code for sync or export.\\n\\n<p>\\n  <ThemedImage\\n    alt=\\"The sources panel open for a pizzaRecieced entry action. In the source code, the sendTo action is being used to send an event of pizzaRecieved to the reviewApp actor.\\"\\n    sources={{\\n      light: \'/blog/2024-01-09-introducing-sources/sources.png\',\\n      dark: \'/blog/2024-01-09-introducing-sources/sources-dm.png\',\\n    }}\\n  />\\n</p>\\n\\nAnd yes, this means that we can now import your existing source code from your state machines, visualize them on the canvas, show them as sources in the studio, and keep your original code intact when exporting or syncing back to your codebase. **In short, if you\u2019re going back and forth between your codebase and Stately\u2019s editor, you don\u2019t have to worry about the implementation code getting lost or overwritten**.\\n\\n### XState built-in actions\\n\\nPreviously, when you added an action to your machine in the editor, you\u2019d have the option to make it a custom action or choose from one of XState\u2019s built-in actions, including [`assign()`](/docs/actions#assign-action), [`raise()`](/docs/actions#raise-action), and [`sendTo()`](/docs/actions#send-to-action). Those built-in actions are now shown as fully editable [logic templates](#logic-templates) in the sources panel, and built-in actions are still shown with their action type on the canvas.\\n\\n### Actions, actors, and guards are now named\\n\\nPreviously, not all actions, actors, and guards had names, especially if you had imported [inline actions](/docs/actions#inline-actions) or [inline guards](/docs/guards#inline-guards) from your XState machines. Now, when creating new actions, actors, or guards on the canvas, you\u2019ll be prompted to give them a name, which is an important addition when importing source code from existing XState machines.\\n\\n### Importing sources from existing XState machines\\n\\nWhen importing a machine from your codebase, we\u2019ll give your unnamed actions, actors, and guards a default name based on their position in your machine config. For example, the following action:\\n\\n```js\\ncreateMachine({\\n  states: {\\n    a: {\\n      states: {\\n        b: { entry: [assign({ name: \'laura\' })] },\\n      },\\n    },\\n  },\\n});\\n```\\n\\nWould be given a default name of `inline:(machine).a.b#entry[0]`. These default names are not visible in the editor but will be used in the synced or exported code unless you give your action, actor, or guard a name. `inline:` is prepended to the name to make them more readable and easier to find in your code. After first importing your machine, we recommend you give all your actions, actors, and guards a name. Naming is a one-time step, and you can always rename them later. Giving your sources distinct names also means that multiple actors, actions, or guards can reference them, which can be really useful when combined with parameters.\\n\\n### Action parameters\\n\\nYou can now add [parameters](/docs/actions#dynamic-action-parameters) to your actions! When adding or editing an action on the canvas, you can use the button to Add <Plus size={18}/> **parameter**. From here, you can add key-value pairs as parameters for dynamic input that can be used in your source code. Parameters don\u2019t just open the possibility for more reusable actions; in the future, [Simulation mode](/docs/simulation-mode) and live actors will be able to use these parameters to execute actions based on different inputs when simulating your machine.\\n\\n<p>\\n  <ThemedImage\\n    alt=\\"The confirm_order event with a setOrderStatus transition action that\u2019s open showing the options to add parameters, with a parameter added using the key of status and the value of confirmed.\\"\\n    sources={{\\n      light: \'/blog/2024-01-09-introducing-sources/action-params.png\',\\n      dark: \'/blog/2024-01-09-introducing-sources/action-params-dm.png\',\\n    }}\\n  />\\n</p>\\n\\nActor inputs are also coming soon\u2026\xa0enabling you to provide dynamic input to the actor when it executes. Actor inputs will be a game-changing combination with sources for deployed workflows in Stately Sky!\\n\\n## Bi-directional editing with sources and GitHub sync\\n\\nIf you haven\u2019t checked it out yet, [watch Kevin\u2019s demo of GitHub Sync](https://www.youtube.com/live/x-F1TPjz_lI?feature=shared&t=602), which we\u2019re also releasing this week. [GitHub Sync](/docs/import-from-github) and sources are a powerful combination. With GitHub Sync, you don\u2019t even need to use the export button to sync your machine with your codebase. And sources ensure that your code stays intact when syncing bi-directionally between your codebase and the editor.\\n\\n## Sources make Stately Sky more powerful\\n\\nSources also bring huge benefits to [Stately Sky](/docs/stately-sky-getting-started), as your live actors can now execute the source code from your actions, actors, and guards in the cloud.\\n\\n## The future\\n\\nWe\u2019re excited about sources because of all the features they enable in Stately Studio and your overall developer experience, helping Stately Studio become the visual collaborative source of truth for your app logic and workflows.\\n\\nUsing sources is free on all our plans, and you can [try our premium features, including GitHub Sync and Stately Sky, for free](https://stately.ai/pricing) on a [Pro plan](/docs/studio-pro-plan) or with your team on a [Team plan](/docs/studio-team-plan). You can [read more about sources in our docs](/docs/sources), and please share your feedback with us on our [social platforms](https://discord.stately.ai) or in our regular [office hours live streams](https://www.youtube.com/watch?v=-Jf9N-EaUx0&list=PLvWgkXBB3dd6PXbSoctwDXjWX-AQrxhds). If you want help getting started with sources or getting your team set up with Stately and XState, [the Stately team is available for workshops and consulting](https://stately.ai/pricing#services), and you can [book a demo call](https://calendly.com/d/yc8-3hq-rpc/request-a-demo) with us to learn more about how Stately can work for your team."},{"id":"2024-01-08-a-look-back-at-stately-in-2023","metadata":{"permalink":"/xstate-zh/blog/2024-01-08-a-look-back-at-stately-in-2023","editUrl":"https://github.com/statelyai/docs/edit/main/blog/2024-01-08-a-look-back-at-2023/index.mdx","source":"@site/blog/2024-01-08-a-look-back-at-2023/index.mdx","title":"A look back at Stately in 2023","description":"As we start 2024, we wanted to look back at what the Stately team accomplished in 2023 and take a sneak peek at what you can expect from Stately in 2024.","date":"2024-01-08T00:00:00.000Z","formattedDate":"January 8, 2024","tags":[{"label":"stately","permalink":"/xstate-zh/blog/tags/stately"},{"label":"studio","permalink":"/xstate-zh/blog/tags/studio"},{"label":"xstate","permalink":"/xstate-zh/blog/tags/xstate"},{"label":"highlights","permalink":"/xstate-zh/blog/tags/highlights"},{"label":"roadmap","permalink":"/xstate-zh/blog/tags/roadmap"}],"readingTime":8.88,"hasTruncateMarker":true,"authors":[{"name":"Laura Kalbag","title":"Stately Team","url":"https://github.com/laurakalbag","imageURL":"https://ascelcgzufjyvdzuplwo.supabase.co/storage/v1/object/public/avatars/laura.png","key":"laura"}],"frontMatter":{"title":"A look back at Stately in 2023","description":"As we start 2024, we wanted to look back at what the Stately team accomplished in 2023 and take a sneak peek at what you can expect from Stately in 2024.","tags":["stately","studio","xstate","highlights","roadmap"],"authors":["laura"],"date":"2024-01-08T00:00:00.000Z","slug":"2024-01-08-a-look-back-at-stately-in-2023","image":"/blog/2024-01-08-a-look-back-at-2023.png"},"unlisted":false,"prevItem":{"title":"Unlock bidirectional editing with sources","permalink":"/xstate-zh/blog/2024-01-09-introducing-sources"},"nextItem":{"title":"Stately Office Hours 77","permalink":"/xstate-zh/blog/2024-01-04-office-hours"}},"content":"As we start 2024, we wanted to look back at what the Stately team accomplished in 2023 and take a sneak peek at what you can expect from Stately in 2024.\\n\\n{/* truncate */}\\n\\n## 2023 highlights\\n\\n2023 was a huge year for Stately. Among the many features we released to Stately Studio, we checked **42 requested features** (big and small) off our [feature requests to-do list](https://github.com/orgs/statelyai/projects/2), and we cut **229 releases** (that\u2019s a release every 1.6 days!) We also did **39 [live streams](https://www.youtube.com/@Statelyai/streams)**, shared **54 [blog posts](/blog)**, and released the massive [XState V5](https://stately.ai/blog/2023-12-01-xstate-v5).\\n\\nSome of our favorite features include:\\n\\n### Deploying to the cloud with Stately Sky\\n\\nOur [launch of Stately Sky last year](/blog/2023-11-13-introducing-stately-sky) brought executable machines to the Studio. With Stately Sky, you can run your machines in the cloud, automate onboarding flows with state machines, execute and monitor backend workflows, persist frontend state between refreshes, and create and manage multi-user sessions.\\n\\nCheck out our docs for [a comprehensive guide to starting with Stately Sky](/docs/stately-sky-getting-started), and [watch my talk from NodeConf EU](https://www.youtube.com/watch?v=FamZ0grhyK8), where I demoed using Stately Sky for a collaborative soundscape.\\n\\n<YouTube id=\\"FamZ0grhyK8\\"/>\\n\\n### Stately AI\\n\\nOne of our biggest highlights of 2023 was the introduction of AI-assisted features to Stately Studio, which we nicknamed **Stately AI**. With Stately AI, you can generate complex state machines from simple text descriptions. \\n\\nFor example, I generated the following machine with the text prompt \u201c*A booking system for pet grooming. Pet owners can book, reschedule, and cancel appointments. When appointments have been made, pet owners get a notification, as well as a reminder of their appointment 24 hours before the appointment time.*\u201d:\\n\\n<EmbedMachine embedURL=\\"https://stately.ai/registry/editor/embed/092bf401-2d65-48ae-969c-99b4a7eeb87f?machineId=f6aea607-9319-462c-a241-0736a1d2b001\\" title=\\"Pet grooming booking system\\" />\\n\\nYou can also use Stately AI to [generate a summary](/blog/2023-11-20-stately-studio-2-0#generate-summary) of your machine, which is really useful for documentation. I used this feature to generate the following summary of the machine above:\\n\\n> This state machine represents a pet grooming booking system. It helps pet owners book, reschedule, and cancel appointments for their pets. The system has different states that represent different stages of the booking process. The initial state is \\"Idle\\", which means the system is waiting for a pet owner to start the booking process. When a pet owner wants to book an appointment, they trigger the \\"book\\" event. This transitions the system to the \\"Appointment Booked\\" state, indicating that an appointment has been successfully booked. From the \\"Appointment Booked\\" state, the pet owner can choose to reschedule or cancel the appointment. If they choose to reschedule, the system transitions to the \\"Appointment Rescheduled\\" state, indicating that the appointment has been rescheduled to a new time. If they choose to cancel, the system transitions to the \\"Appointment Canceled\\" state, indicating that the appointment has been canceled. Additionally, the system can send a reminder to the pet owner 24 hours before the appointment from the \\"Appointment Booked\\" or \\"Appointment Rescheduled\\" states. This transitions the system to the \\"Reminder Sent\\" state. From the \\"Reminder Sent\\" state, if the pet owner wants to book a new appointment, they can trigger the \\"book\\" event, which transitions the system back to the \\"Appointment Booked\\" state. Each state has associated actions that are performed when transitioning to that state. These actions include notifying the pet owner about the booking, rescheduling, cancellation, or sending a reminder. Overall, this state machine helps manage the pet grooming booking process, ensuring that appointments are booked, rescheduled, or canceled smoothly, and reminders are sent to pet owners.\\n\\nBut that isn\u2019t all!\\n\\n### Generating React prototypes based on your machines\\n\\nWe also released the ability to [generate React app code](/docs/generate-react) based on your machines, which is a great way to prototype your app logic quickly. Stately AI adds more magic to your React prototypes with the option to **Enhance app** once generated, which builds out a UI for your app and enables you to go from a text description to a working prototype in less than a minute.\\n\\n<p>\\n  <ThemedImage\\n    alt=\\"Enhancing an app in Stately\u2019s editor, showing a pet grooming appointment app in the appointment booked state, with colored buttons generated for reschedule, cancel, and send reminder.\\"\\n    sources={{\\n      light: \'/blog/2024-01-08-a-look-back-at-2023/generate-react-app.png\',\\n      dark: \'/blog/2024-01-08-a-look-back-at-2023/generate-react-app-dm.png\',\\n    }}\\n  />\\n</p>\\n\\n\\n### Import any app logic\\n\\nWe want to make it easy to visualize app logic from any code as a state machine. So we\u2019ve started with Zustand, Redux, and Redux Toolkit. You can now import your logic from any of these libraries into Stately Studio, and we\u2019ll visualize it as a state machine. Import your existing app logic to generate up-to-date diagrams and customizable documentation for your logic, easily detect logical errors, and quickly generate test cases.\\n\\n### Adding assets to states\\n\\nStately Studio has been able to add images to state and event descriptions for a while now, but you had to upload the images somewhere in the cloud and then add the image using markdown. Now, you can [drag an image on to a state](/docs/assets), and it\u2019s automatically uploaded and added to your machine. And you\u2019re not just limited to images; you can drag any file onto your state, and it will be displayed as a linked asset. Assets are a game-changer for improving documentation and easily linking to other resources.\\n\\n<p>\\n  <ThemedImage\\n    alt=\\"State machine for a color picker where an image of an expanded color picker is being dragged into the open state.\\"\\n    sources={{\\n      light: \'/blog/2023-11-20-stately-studio-2-0/drag-assets.png\',\\n      dark: \'/blog/2023-11-20-stately-studio-2-0/drag-assets-dm.png\',\\n    }}\\n  />\\n</p>\\n\\n### Stately inspector\\n\\nSince Stately Studio succeeded the old Stately viz, we\u2019ve been working to bring some of our favorite features from the viz into the editor. One of the last things we released in 2023 was a new package for [@statelyai/inspect](https://github.com/statelyai/inspect), which builds upon the old XState inspector, enabling developers to visually inspect state transitions *and* actor communication in any JavaScript/TypeScript app. You can visualize your state machines and generate sequence diagrams for how your actors communicate. You can use Stately Inspect with or without XState, with any framework or library, or none at all. [Watch our last office hours from 2023 for David\u2019s demo of the Stately inspector](https://www.youtube.com/watch?v=x-F1TPjz_lI&t=103s).\\n\\n<YouTube id=\\"x-F1TPjz_lI\\"/>\\n\\n### The enhanced editor experience of Stately Studio 2.0\\n\\nIf you haven\u2019t tried the Studio in the last few months, you\u2019ll notice a considerable difference in the editor experience. We\u2019ve reorganized the panels, header, and footer, so you\u2019ll get more information about your machine visible to you when you want it. We\u2019ve also made it easier for you to quickly create and edit your flows with quick actions and fewer clicks required to get to the actions you use most. There are also new options for you when you create a new machine to start with a blank canvas or starter template, import your existing app logic (not just from XState!), or generate a machine from a text description using AI.\\n\\n### Improved autolayout\\n\\nAnother massive change you\u2019ll notice in the editor is that autolayout is better than ever. We\u2019ve improved the algorithm so imported machines are laid out more logically in a way that\u2019s much easier to read, and transition lines now try to re-route around states and events as you move them to keep your machine tidy and readable.\\n\\n![Using autolayout to turn a spaghetti state machine with many overlapping transition lines, to a clearer state machine where each state is separated and it\u2019s easy to follow the transition lines.](autolayout-optimised.gif)\\n\\n### XState version 5\\n\\nAnd, of course, after five years of hard work, we also [released XState version 5](/blog/2023-12-01-xstate-v5). You can already import and export XState V5 machines in Stately Studio, and we\u2019re working on full support and more advanced features for the Studio to improve the developer experience even more in 2024, so you can visualize your app logic, whether it\u2019s written in XState or not.\\n\\n## 2024 roadmap\\n\\nThe Stately team has hit the ground running in 2024. We\u2019re not even one week into 2024 yet, and we\u2019ve already released GitHub Sync and sources for actions, actors, and guards. Stay tuned for blog posts about those features.\\n\\nWe\u2019ve got big plans for the next year; here\u2019s a sneak peek at what you can expect from Stately in 2024:\\n\\n### Update to XState VS Code extension\\n\\nOur focus for the beginning of 2024 is improving the features already in Stately and XState, which means our first priority for 2024 is bringing the [XState VS Code extension](https://marketplace.visualstudio.com/items?itemName=statelyai.stately-vscode) up to date with Stately Studio. We\u2019ll add full support for XState V5 and work towards extensions for other IDEs.\\n\\n### Improved XState V5 support in the Studio\\n\\nStately Studio already supports XState V5 machines, allowing you to import your XState V5 machines into the Studio and export machines as XState V5. But we\u2019re working on even greater support for XState V5 in the Studio. Look out for a blog post on sources for actions, actors, and guards later this week. And this is just the beginning of what we have planned.\\n\\n### Sequence diagram\\n\\nOne of the features that always gets folks excited in [our office hours live streams](https://www.youtube.com/playlist?list=PLvWgkXBB3dd6PXbSoctwDXjWX-AQrxhds) are sequence diagrams for your app logic. [Check out an early version of the sequence diagram](https://www.youtube.com/live/x-F1TPjz_lI?si=w1PcBQQWQPe-20WT&t=318) as part of Stately Inspect. You can look forward to sequence diagrams like this in Stately Studio very soon!\\n\\n### Visualizing actor hierarchy\\n\\nWith [XState\u2019s greater focus on the actor model](https://stately.ai/blog/2023-12-01-xstate-v5#everything-is-an-actor), we\u2019ll continue to make it easier for you to visualize your app logic in Stately Studio, enabling you to visualize the hierarchy of your actors and how they communicate with each other.\\n\\n### Export to PNG and SVG\\n\\nWe\u2019ve had a basic export to PNG feature in Stately Studio for a while now, but we\u2019re working on a more advanced export feature, making it even easier for you to share your state machines with your team. We\u2019ll improve the export to PNG feature and add the ability to export to SVG. Your documentation will never look better!\\n\\n### Import from Mermaid diagrams\\n\\nLast year, we introduced the option to [export to Mermaid](https://stately.ai/blog/2023-07-20-export-to-mermaid). In 2024, we want to add the option to import from Mermaid and even more of your favorite formats. We want to make it easy for you to visualize your app logic in Stately Studio.\\n\\n## What do you want from Stately in 2024?\\n\\nIn 2024, our ultimate goal is for Stately to be the best visual collaborative source of truth for your app logic and workflows. Have you got a feature request? [Share your feature request on our new feature request board](https://feedback.stately.ai/). Do you want to share how your team is using Stately and XState? [Join our Discord](https://discord.stately.ai). Do you want a custom tour of Stately Studio for your team? [Book a demo with the Stately team](https://calendly.com/d/yc8-3hq-rpc/request-a-demo)."},{"id":"2024-01-04-office-hours","metadata":{"permalink":"/xstate-zh/blog/2024-01-04-office-hours","editUrl":"https://github.com/statelyai/docs/edit/main/blog/2024-01-05-office-hours/index.mdx","source":"@site/blog/2024-01-05-office-hours/index.mdx","title":"Stately Office Hours 77","description":"Watch our latest office hours live stream where we cover new features including draft projects, sources, Stately Inspect, and GitHub Sync.","date":"2024-01-04T00:00:00.000Z","formattedDate":"January 4, 2024","tags":[{"label":"stately","permalink":"/xstate-zh/blog/tags/stately"},{"label":"studio","permalink":"/xstate-zh/blog/tags/studio"},{"label":"office hours","permalink":"/xstate-zh/blog/tags/office-hours"},{"label":"xstate","permalink":"/xstate-zh/blog/tags/xstate"},{"label":"xstate v5","permalink":"/xstate-zh/blog/tags/xstate-v-5"},{"label":"draft projects","permalink":"/xstate-zh/blog/tags/draft-projects"},{"label":"sources","permalink":"/xstate-zh/blog/tags/sources"},{"label":"effects","permalink":"/xstate-zh/blog/tags/effects"},{"label":"actions","permalink":"/xstate-zh/blog/tags/actions"},{"label":"stately inspect","permalink":"/xstate-zh/blog/tags/stately-inspect"},{"label":"github sync","permalink":"/xstate-zh/blog/tags/github-sync"},{"label":"VS Code extension","permalink":"/xstate-zh/blog/tags/vs-code-extension"},{"label":"actors","permalink":"/xstate-zh/blog/tags/actors"}],"readingTime":1.52,"hasTruncateMarker":true,"authors":[{"name":"Laura Kalbag","title":"Stately Team","url":"https://github.com/laurakalbag","imageURL":"https://ascelcgzufjyvdzuplwo.supabase.co/storage/v1/object/public/avatars/laura.png","key":"laura"}],"frontMatter":{"title":"Stately Office Hours 77","description":"Watch our latest office hours live stream where we cover new features including draft projects, sources, Stately Inspect, and GitHub Sync.","tags":["stately","studio","office hours","xstate","xstate v5","draft projects","sources","effects","actions","stately inspect","github sync","VS Code extension","actors"],"authors":["laura"],"date":"2024-01-04T00:00:00.000Z","slug":"2024-01-04-office-hours","image":"/blog/2024-01-04-office-hours.png"},"unlisted":false,"prevItem":{"title":"A look back at Stately in 2023","permalink":"/xstate-zh/blog/2024-01-08-a-look-back-at-stately-in-2023"},"nextItem":{"title":"New Stately Studio tour","permalink":"/xstate-zh/blog/2024-01-03-learn-stately"}},"content":"Watch our latest office hours live stream where we cover new features including draft projects, sources, Stately Inspect, and GitHub Sync.\\n\\n{/* truncate */}\\n\\n<YouTube id=\\"-Jf9N-EaUx0\\" />\\n\\n## Chapters\\n\\nWatch the video to find out about our new features and plans for 2024. Use the links below to jump straight to that chapter in the video:\\n\\n- [0:00 Intro](https://youtube.com/watch?v=-Jf9N-EaUx0&t=0s)\\n- [0:12 Team intros](https://youtube.com/watch?v=-Jf9N-EaUx0&t=12s)\\n- [0:53 Draft projects](https://youtube.com/watch?v=-Jf9N-EaUx0&t=53s)\\n- [2:25 Sources](https://youtube.com/watch?v=-Jf9N-EaUx0&t=145s)\\n- [3:58 Action parameters](https://youtube.com/watch?v=-Jf9N-EaUx0&t=238s)\\n- [4:44 Hiding effects](https://youtube.com/watch?v=-Jf9N-EaUx0&t=284s)\\n- [5:30 Can you resuse custom actions?](https://youtube.com/watch?v=-Jf9N-EaUx0&t=330s)\\n- [6:48 Stately Inspect](https://youtube.com/watch?v=-Jf9N-EaUx0&t=408s)\\n- [13:38 GitHub Sync](https://youtube.com/watch?v=-Jf9N-EaUx0&t=818s)\\n- [15:38 Can auto-completion for actors repurpose properties from context, events, etc?](https://youtube.com/watch?v=-Jf9N-EaUx0&t=938s)\\n- [16:27 Will the VS Code extension catch up with Stately Studio?](https://youtube.com/watch?v=-Jf9N-EaUx0&t=987s)\\n- [17:05 Feature requests](https://youtube.com/watch?v=-Jf9N-EaUx0&t=1025s)\\n- [20:03 Is the inspector open source?](https://youtube.com/watch?v=-Jf9N-EaUx0&t=1203s)\\n- [21:21 XState V5](https://youtube.com/watch?v=-Jf9N-EaUx0&t=1281s)\\n- [22:57 Choose from XState V5 or XState V4 in Stately\'s editor](https://youtube.com/watch?v=-Jf9N-EaUx0&t=1377s)\\n- [24:00 Explicit typing](https://youtube.com/watch?v=-Jf9N-EaUx0&t=1440s)\\n- [25:15 Actor docs](https://youtube.com/watch?v=-Jf9N-EaUx0&t=1515s)\\n- [26:23 Is there a good strategy to restore actor references from different systems?](https://youtube.com/watch?v=-Jf9N-EaUx0&t=1583s)\\n- [27:48 Why not tri-directional?](https://youtube.com/watch?v=-Jf9N-EaUx0&t=1668s)\\n- [29:08 Is there a way to provide a custom serialization function?](https://youtube.com/watch?v=-Jf9N-EaUx0&t=1748s)\\n- [29:40 Is the Stately Inspect API final?](https://youtube.com/watch?v=-Jf9N-EaUx0&t=1780s)\\n- [31:24 David speaking at That Conference](https://youtube.com/watch?v=-Jf9N-EaUx0&t=1884s)\\n\\n\\n## Links from this week\u2019s office hours\\n\\n- [Read more about sources](https://stately.ai/blog/2024-01-09-introducing-sources)\\n- [@statelyai/inspect](https://github.com/statelyai/inspect)\\n- [Watch the GitHub Sync demo from last office hours](https://www.youtube.com/live/x-F1TPjz_lI?si=izg9zrGyMqaaN2ZO&t=602)\\n- [Request features](https://github.com/statelyai/feedback)\\n- [XState examples](https://github.com/statelyai/xstate/tree/main/examples)\\n- [Get help with Stately and XState from the Stately team](https://stately.ai/pricing)\\n- [Book a demo with the Stately team](https://calendly.com/d/yc8-3hq-rpc/request-a-demo)\\n- [Actor docs](https://stately.ai/docs/actors)\\n- [That Conference](https://thatconference.com/tx/2024/)\\n\\nGot any questions for the team? Want to share how you\u2019re using Stately or XState? Join us live, or share your questions in our [Discord\u2019s office-hours channel](https://discord.stately.ai).\\n\\nBe the first to find out about our next office hours by subscribing to [our YouTube channel](https://www.youtube.com/@Statelyai), [Twitch channel](https://www.twitch.tv/statelyai), or [following us on LinkedIn](https://www.linkedin.com/company/statelyai/)."},{"id":"2024-01-03-learn-stately","metadata":{"permalink":"/xstate-zh/blog/2024-01-03-learn-stately","editUrl":"https://github.com/statelyai/docs/edit/main/blog/2024-01-03-learn-stately/index.mdx","source":"@site/blog/2024-01-03-learn-stately/index.mdx","title":"New Stately Studio tour","description":"Watch our latest office hours live stream where we cover new features including Stately Inspect, GitHub Sync, Sources, and our roadmap for 2024.","date":"2024-01-03T00:00:00.000Z","formattedDate":"January 3, 2024","tags":[{"label":"stately","permalink":"/xstate-zh/blog/tags/stately"},{"label":"studio","permalink":"/xstate-zh/blog/tags/studio"},{"label":"tour","permalink":"/xstate-zh/blog/tags/tour"},{"label":"video","permalink":"/xstate-zh/blog/tags/video"}],"readingTime":0.79,"hasTruncateMarker":true,"authors":[{"name":"Laura Kalbag","title":"Stately Team","url":"https://github.com/laurakalbag","imageURL":"https://ascelcgzufjyvdzuplwo.supabase.co/storage/v1/object/public/avatars/laura.png","key":"laura"}],"frontMatter":{"title":"New Stately Studio tour","description":"Watch our latest office hours live stream where we cover new features including Stately Inspect, GitHub Sync, Sources, and our roadmap for 2024.","tags":["stately","studio","tour","video"],"authors":["laura"],"date":"2024-01-03T00:00:00.000Z","slug":"2024-01-03-learn-stately","image":"/blog/2024-01-03-learn-stately.png"},"unlisted":false,"prevItem":{"title":"Stately Office Hours 77","permalink":"/xstate-zh/blog/2024-01-04-office-hours"},"nextItem":{"title":"Stately Office Hours 76","permalink":"/xstate-zh/blog/2024-01-02-office-hours"}},"content":"We\u2019ve updated the Learn Stately videos for our newest features! Watch these videos for a quick tour of how to use the editor in 8 minutes. You can find these videos in the Studio by following the Learn Stately banner link or in the editor menu > Help > Learn Stately.\\n\\n{/* truncate */}\\n\\nYou can also watch the videos combined into one video on our YouTube channel:\\n\\n<YouTube id=\\"It6Y8wTn_qc\\" />\\n\\nUse the links below to jump straight to that chapter in the video:\\n\\n- [0:00 State machine concepts](https://youtube.com/watch?v=It6Y8wTn_qc&t=0s)\\n- [0:50 Creating a new machine](https://youtube.com/watch?v=It6Y8wTn_qc&t=50s)\\n- [1:07 Creating states and events](https://youtube.com/watch?v=It6Y8wTn_qc&t=67s)\\n- [1:53 Adding descriptions and images](https://youtube.com/watch?v=It6Y8wTn_qc&t=113s)\\n- [2:19 Moving around the canvas](https://youtube.com/watch?v=It6Y8wTn_qc&t=139s)\\n- [2:55 Creating parent and child states](https://youtube.com/watch?v=It6Y8wTn_qc&t=175s)\\n- [3:54 Adding actions](https://youtube.com/watch?v=It6Y8wTn_qc&t=234s)\\n- [4:44 Final states](https://youtube.com/watch?v=It6Y8wTn_qc&t=284s)\\n- [5:23 Simulate mode](https://youtube.com/watch?v=It6Y8wTn_qc&t=323s)\\n- [6:27 Export code](https://youtube.com/watch?v=It6Y8wTn_qc&t=387s)\\n- [7:09 Adding colors, version history, and Teams](https://youtube.com/watch?v=It6Y8wTn_qc&t=429s)\\n\\nBe the first to watch our new videos by subscribing to [our YouTube channel](https://www.youtube.com/@Statelyai)."},{"id":"2024-01-02-office-hours","metadata":{"permalink":"/xstate-zh/blog/2024-01-02-office-hours","editUrl":"https://github.com/statelyai/docs/edit/main/blog/2024-01-02-office-hours/index.mdx","source":"@site/blog/2024-01-02-office-hours/index.mdx","title":"Stately Office Hours 76","description":"Watch our latest office hours live stream where we cover new features including Stately Inspect, GitHub Sync, Sources, and our roadmap for 2024.","date":"2024-01-02T00:00:00.000Z","formattedDate":"January 2, 2024","tags":[{"label":"stately","permalink":"/xstate-zh/blog/tags/stately"},{"label":"studio","permalink":"/xstate-zh/blog/tags/studio"},{"label":"office hours","permalink":"/xstate-zh/blog/tags/office-hours"},{"label":"xstate","permalink":"/xstate-zh/blog/tags/xstate"},{"label":"xstate v5","permalink":"/xstate-zh/blog/tags/xstate-v-5"},{"label":"stately inspect","permalink":"/xstate-zh/blog/tags/stately-inspect"},{"label":"github sync","permalink":"/xstate-zh/blog/tags/github-sync"},{"label":"sources","permalink":"/xstate-zh/blog/tags/sources"},{"label":"roadmap","permalink":"/xstate-zh/blog/tags/roadmap"}],"readingTime":0.905,"hasTruncateMarker":true,"authors":[{"name":"Laura Kalbag","title":"Stately Team","url":"https://github.com/laurakalbag","imageURL":"https://ascelcgzufjyvdzuplwo.supabase.co/storage/v1/object/public/avatars/laura.png","key":"laura"}],"frontMatter":{"title":"Stately Office Hours 76","description":"Watch our latest office hours live stream where we cover new features including Stately Inspect, GitHub Sync, Sources, and our roadmap for 2024.","tags":["stately","studio","office hours","xstate","xstate v5","stately inspect","github sync","sources","roadmap"],"authors":["laura"],"date":"2024-01-02T00:00:00.000Z","slug":"2024-01-02-office-hours","image":"/blog/2024-01-02-office-hours.png"},"unlisted":false,"prevItem":{"title":"New Stately Studio tour","permalink":"/xstate-zh/blog/2024-01-03-learn-stately"},"nextItem":{"title":"Changelog December 2023","permalink":"/xstate-zh/blog/2023-12-29-end-of-year-changelog"}},"content":"Watch our latest office hours live stream where we cover new features including Stately Inspect, GitHub Sync, Sources, and our roadmap for 2024.\\n\\n{/* truncate */}\\n\\n<YouTube id=\\"x-F1TPjz_lI\\" />\\n\\nWatch the video to find out about our new features and plans for 2024. Use the links below to jump straight to that chapter in the video:\\n\\n- [0:00 Intro](https://youtube.com/watch?v=x-F1TPjz_lI&t=0s)\\n- [0:19 Team intros](https://youtube.com/watch?v=x-F1TPjz_lI&t=19s)\\n- [1:26 Stately Studio parity with Stately viz](https://youtube.com/watch?v=x-F1TPjz_lI&t=86s)\\n- [4:31 statelyai/inspect](https://youtube.com/watch?v=x-F1TPjz_lI&t=271s)\\n- [10:01 GitHub Sync](https://youtube.com/watch?v=x-F1TPjz_lI&t=601s)\\n- [29:07 How do you visualize child actors?](https://youtube.com/watch?v=x-F1TPjz_lI&t=1747s)\\n- [30:50 Sources](https://youtube.com/watch?v=x-F1TPjz_lI&t=1850s)\\n- [35:37 What\u2019s your favorite way to deploy state machines?](https://youtube.com/watch?v=x-F1TPjz_lI&t=2137s)\\n- [39:49 Generate a festive Pacman machine using AI](https://youtube.com/watch?v=x-F1TPjz_lI&t=2389s)\\n- [40:13 Our roadmap for 2024](https://youtube.com/watch?v=x-F1TPjz_lI&t=2413s)\\n- [43:58 Festive pacman continued](https://youtube.com/watch?v=x-F1TPjz_lI&t=2638s)\\n- [44.24 WebStorm extension or desktop app?](https://www.youtube.com/watch?v=x-F1TPjz_lI&t=2664s)\\n- [45:35 Can we have more complex types in context?](https://youtube.com/watch?v=x-F1TPjz_lI&t=2735s)\\n- [47:04 Can guards assign new data to the machine state?](https://youtube.com/watch?v=x-F1TPjz_lI&t=2824s)\\n- [50:52 How to stay updated with the Stately team](https://youtube.com/watch?v=x-F1TPjz_lI&t=3052s)\\n\\n\\nBe the first to find out about our next office hours by subscribing to [our YouTube channel](https://www.youtube.com/@Statelyai), [Twitch channel](https://www.twitch.tv/statelyai), or [following us on LinkedIn](https://www.linkedin.com/company/statelyai/)."},{"id":"2023-12-29-end-of-year-changelog","metadata":{"permalink":"/xstate-zh/blog/2023-12-29-end-of-year-changelog","editUrl":"https://github.com/statelyai/docs/edit/main/blog/2023-12-29-end-of-year-changelog/index.mdx","source":"@site/blog/2023-12-29-end-of-year-changelog/index.mdx","title":"Changelog December 2023","description":"It\u2019s the end of 2023 and we\u2019ve got a few more updates to share with you before the year is out.","date":"2023-12-29T00:00:00.000Z","formattedDate":"December 29, 2023","tags":[{"label":"changelog","permalink":"/xstate-zh/blog/tags/changelog"},{"label":"new","permalink":"/xstate-zh/blog/tags/new"}],"readingTime":2.88,"hasTruncateMarker":true,"authors":[{"name":"Laura Kalbag","title":"Stately Team","url":"https://github.com/laurakalbag","imageURL":"https://ascelcgzufjyvdzuplwo.supabase.co/storage/v1/object/public/avatars/laura.png","key":"laura"}],"frontMatter":{"title":"Changelog December 2023","description":"It\u2019s the end of 2023 and we\u2019ve got a few more updates to share with you before the year is out.","authors":["laura"],"tags":["changelog","new"],"date":"2023-12-29T00:00:00.000Z","slug":"2023-12-29-end-of-year-changelog","image":"/blog/2023-11-23-end-of-year-changelog.png"},"unlisted":false,"prevItem":{"title":"Stately Office Hours 76","permalink":"/xstate-zh/blog/2024-01-02-office-hours"},"nextItem":{"title":"TIDEFI x Stately: Decentralized finance and investments management","permalink":"/xstate-zh/blog/2023-12-07-tidefi-and-stately-case-study"}},"content":"It\u2019s the end of 2023, and we have a few more updates to share with you before the year ends. {/* truncate */}We\u2019ve added various new features to make your editor experience even better.\\n\\n## XState V5 is here\\n\\nXState V5 is no longer in beta, so instead of an XState V5 beta toggle in the **Code** panel, you can now choose to use XState V5 or XState V4 from a dropdown menu. We recommend using XState V5 for all new projects, but you can still use V4 for existing projects. [Read more about the XState V5 release](/blog/2023-12-01-xstate-v5).\\n\\n## Context on canvas\\n\\nYour machine\u2019s context is now displayed on the canvas. You can add your context schema and initial values from the **Context** panel in the editor.\\n\\n![The Sleep state with a displayed context of stars: number. The context panel is open and shows the context schema with a stars property with the number type.](context-schema-and-canvas.png)\\n\\n## Add transition\\n\\nWhen a transition selected, you can now use the arrow icon button to add another transition for quick conditional logic. Using the button will add a transition from the same source state, making the original transition into an *if* transition and the new transition into an *else* transition, where you can then add your [guard logic](/docs/guards).\\n\\n![A selected transition with the next label. Using the arrow icon button adds a new transition from the same source state. The first transition is then labeled 1 next IF new guard. The second transition is labeled 2 next ELSE.](add-transition.gif)\\n\\n## Show and hide effects\\n\\nYou can now use the **Show/hide effects on canvas** option in the editor menu view settings to expand and collapse the appearance of effects on the canvas. The default setting is that all actions and invoked actors are visible on states and events with their names and any special properties. When effects are hidden, a summary of the number of actions and invoked actors is shown instead; for example, `1 invoke 5 actions`.\\n\\n![The Power on state. When effects are shown, you can see Entry actions for showButtons, setVolume, and send play to audioPlayer, Exit actions for hideButtons and send pause to audioPlayer, and an invoke for the audioPlayer actor. When effects are hidden you only see a summary of 1 invoke and 5 actions.](hide-show-effects.png)\\n\\n## Improvements\\n\\n- You can now move a project from the project options in the **My Projects** view.\\n- We updated the Help tutorials to reflect the latest changes to the editor.\\n- If we don\u2019t have your name from your auth provider, we now generate a random state machine-related name for you that is displayed with your public projects. Don\u2019t like your random name? You can change it in the **Settings**.\\n- It\u2019s now easier to drag the edge of the left panel to resize it.\\n- A variety of internal improvements to make the app faster and more reliable.\\n\\n## Bug fixes\\n\\n- We fixed a bug where you could sometimes be redirected to the Project settings page when creating a new machine.\\n- You can now remove [state and event descriptions](/docs/descriptions) without any issues. To delete a description, remove its text. To remove the description area from a state or event, delete its text from the details panel.\\n- We fixed a bug with the CodeSandbox and StackBlitz exports when using XState V5.\\n- You can now undo when you use the **Clear** button on a machine at [state.new](https://state.new)."},{"id":"2023-12-07-tidefi-and-stately-case-study","metadata":{"permalink":"/xstate-zh/blog/2023-12-07-tidefi-and-stately-case-study","editUrl":"https://github.com/statelyai/docs/edit/main/blog/2023-12-07-tidefi-and-stately-case-study/index.mdx","source":"@site/blog/2023-12-07-tidefi-and-stately-case-study/index.mdx","title":"TIDEFI x Stately: Decentralized finance and investments management","description":"Building a robust and user-friendly financial services platform. A Stately and TIDEFI case study.","date":"2023-12-07T00:00:00.000Z","formattedDate":"December 7, 2023","tags":[{"label":"case study","permalink":"/xstate-zh/blog/tags/case-study"},{"label":"study","permalink":"/xstate-zh/blog/tags/study"},{"label":"TIDEFI","permalink":"/xstate-zh/blog/tags/tidefi"},{"label":"stately","permalink":"/xstate-zh/blog/tags/stately"},{"label":"state machines","permalink":"/xstate-zh/blog/tags/state-machines"},{"label":"machines","permalink":"/xstate-zh/blog/tags/machines"},{"label":"finance","permalink":"/xstate-zh/blog/tags/finance"},{"label":"investments","permalink":"/xstate-zh/blog/tags/investments"},{"label":"financial services","permalink":"/xstate-zh/blog/tags/financial-services"}],"readingTime":4.04,"hasTruncateMarker":true,"authors":[{"name":"Gavin Bauman","title":"Stately Team","url":"https://github.com/gavination","imageURL":"https://ascelcgzufjyvdzuplwo.supabase.co/storage/v1/object/public/avatars/gavin.png","key":"gavin"},{"name":"Parker McMullin","title":"TIDEFI","imageURL":"https://ascelcgzufjyvdzuplwo.supabase.co/storage/v1/object/public/avatars/tidefi.png","key":"parkermcmullin"}],"frontMatter":{"title":"TIDEFI x Stately: Decentralized finance and investments management","description":"Building a robust and user-friendly financial services platform. A Stately and TIDEFI case study.","authors":["gavin","parkermcmullin"],"tags":["case study","study","TIDEFI","stately","state machines","machines","finance","investments","financial services"],"date":"2023-12-07T00:00:00.000Z","slug":"2023-12-07-tidefi-and-stately-case-study","image":"/blog/2023-12-07-tidefi-and-stately-case-study.png"},"unlisted":false,"prevItem":{"title":"Changelog December 2023","permalink":"/xstate-zh/blog/2023-12-29-end-of-year-changelog"},"nextItem":{"title":"Fugo x Stately: digital signage design and automation case study","permalink":"/xstate-zh/blog/2023-12-04-fugo-and-stately-case-study"}},"content":"TIDEFI turns to [Stately](https://stately.ai) to build a resilient financial platform that prioritizes user-friendly transactions and investments.\\n\\nThe Stately team had the pleasure of sitting down with Parker McMullin, Senior Frontend Lead at TIDEFI, to discuss how our logic modeling and visualization tooling helped him manage app complexity and onboarding in TIDEFI\u2019s financial services platform. Parker was so kind as to provide his experiences below, covering the very beginnings of his project from design to development as well as the challenges encountered and how other Stately users came to his aid. He shares his firsthand experiences applying modern software design patterns to his project, engaging with the technical community, and proving instrumental in shaping the direction of [XState V5](/docs/xstate). We\u2019re honored to have Parker in our community, and we hope his words can inspire teams to better navigate complexity in their own apps!\\n\\n{/* truncate */}\\n\\n## Customer spotlight: TIDEFI\\n\\n<p>\\n  <ThemedImage\\n    alt=\\"TIDEFI logo\\"\\n    sources={{\\n      light:\\n        \'/blog/2023-12-07-tidefi-and-stately-case-study/logo-with-name.svg\',\\n      dark: \'/blog/2023-12-07-tidefi-and-stately-case-study/dark-logo-with-name.svg\',\\n    }}\\n  />\\n</p>\\n\\nTIDEFI, an amalgamation of \u201cTide\u201d and \u201cDefi\u201d, is a decentralized wallet for our custom blockchain. It facilitates deposits, withdraws, transfers, trading, staking, and more for users, and is especially known for making the user experience simple so that anyone can use it no matter their previous exposure to the world of cryptocurrency. To ensure correctness for this financial/investment product, we did extensive research to choose the right tools for the job. Below we will cover part of our story of how the [XState library](/docs/xstate) and [Stately tools](/docs/studio) were crucial to managing the complexity of such an application.\\n\\n## From design to dev\\n\\nAs with most projects, we started with the design. The user flows were outlined and after some iteration, we had a polished construct to work with!\\n\\nBecause of my previous experience using XState, I knew it could help manage certain aspects of complexity better than other state management tools. It provided [visualization](/docs/studio) (helpful for thinking) and constraints (helpful for deciding), and is flexible enough to fit many challenges.\\n\\nThe first part we tackled was the multi-step Onboarding flow. I implemented the smaller parts of the design first, creating the form components, tiles, and imagery. Then as I worked on the state machine to control it, my hunch about managing complexity paid off. Thanks to clean state matching (like `state.matches(\'chooseSecurityMethod.newAccount.choosePassword\')`) conditional logic and views were able to be flat and easy to reason with instead of being riddled with nesting and edge cases. Since this multi-step form had several directions the user could take, the final states were well-documented, and completely foolproof.\\n\\n<EmbedMachine\\n  name=\\"TIDEFI Onboarding Flow\\"\\n  embedURL=\\"https://stately.ai/registry/editor/embed/9fa24cc0-3026-41be-bb22-9afc3980fefc?machineId=26f0286a-e093-4863-a534-b4ea9b656ee0&mode=design/\\"\\n/>\\n\\nI was able to showcase the machine visualizer to the rest of the company, which was a delight. This helped convey the complexity of the UI pieces, and also helped to discuss how we should handle specific use cases in conjunction with the design mockups.\\n\\n## Challenges encountered and solutions provided\\n\\nSeveral months down the road, our team was running into some challenges of transmitting data between pages. Most pages had a machine that controlled the flow, and then there were other machines meant for data subscriptions, connection handling, etc. I decided to model a traditional hub-and-spoke actor system by:\\n\\n<ol style={{\'list-style-type\': \'lower-alpha\'}}>\\n<li>nesting actors underneath a root actor</li>\\n<li>broadcasting an INIT event to register actors and facilitate storing references</li>\\n<li>handle some communication via broadcasts, and others as direct events or data queries</li>\\n</ol>\\n\\nIn the [XState Discord](https://discord.stately.ai), this concept came up several times, and my implementation was tweaked until it was fairly easy to reason with, and performant. To my delight, the XState team created an RFC to introduce actor systems and the \u201creceptionist\u201d pattern! It was a joy to have real-world experience to contribute to the discussion and prove or challenge parts of the API. Now it is a built-in part of XState v5! I can remove dozens of lines of code and instead utilize my root actor as a system with individually named actors in a tree underneath.\\n\\n## Communicating the complex: moving forward with Stately\\n\\nAs I brought more people on to the frontend team, they needed to understand the app architecture. We all know that components have their own props, events, and minor internal logic. We have a design system for styling, and the core app logic is written in state machines. Just as with any new technology, after learning the XState API each developer is given a smaller task to implement so they can make that paradigm shift. One of our teammates expressed how it was hard to go back to the \u201cold way\u201d of modeling things because this was so nice!\\n\\nOverall, choosing XState was a tremendous boon to this app\u2019s success, and I have loved working with such a great API. Version 5 builds upon the needs the community has expressed and I\u2019m excited to see where the project goes!"},{"id":"2023-12-04-fugo-and-stately-case-study","metadata":{"permalink":"/xstate-zh/blog/2023-12-04-fugo-and-stately-case-study","editUrl":"https://github.com/statelyai/docs/edit/main/blog/2023-12-04-fugo-and-stately-case-study/index.mdx","source":"@site/blog/2023-12-04-fugo-and-stately-case-study/index.mdx","title":"Fugo x Stately: digital signage design and automation case study","description":"Digital signage for the modern business. A Stately and Fugo case study.","date":"2023-12-04T00:00:00.000Z","formattedDate":"December 4, 2023","tags":[{"label":"case study","permalink":"/xstate-zh/blog/tags/case-study"},{"label":"study","permalink":"/xstate-zh/blog/tags/study"},{"label":"fugo","permalink":"/xstate-zh/blog/tags/fugo"},{"label":"stately","permalink":"/xstate-zh/blog/tags/stately"},{"label":"state machines","permalink":"/xstate-zh/blog/tags/state-machines"},{"label":"machines","permalink":"/xstate-zh/blog/tags/machines"},{"label":"digital signage","permalink":"/xstate-zh/blog/tags/digital-signage"}],"readingTime":5.835,"hasTruncateMarker":true,"authors":[{"name":"Gavin Bauman","title":"Stately Team","url":"https://github.com/gavination","imageURL":"https://ascelcgzufjyvdzuplwo.supabase.co/storage/v1/object/public/avatars/gavin.png","key":"gavin"}],"frontMatter":{"title":"Fugo x Stately: digital signage design and automation case study","description":"Digital signage for the modern business. A Stately and Fugo case study.","authors":["gavin"],"tags":["case study","study","fugo","stately","state machines","machines","digital signage"],"date":"2023-12-04T00:00:00.000Z","slug":"2023-12-04-fugo-and-stately-case-study","image":"/blog/2023-12-04-fugo-and-stately-case-study.png"},"unlisted":false,"prevItem":{"title":"TIDEFI x Stately: Decentralized finance and investments management","permalink":"/xstate-zh/blog/2023-12-07-tidefi-and-stately-case-study"},"nextItem":{"title":"XState v5 \u53d1\u5e03\u4e86","permalink":"/xstate-zh/blog/2023-12-01-xstate-v5"}},"content":"In the always-changing world of digital signage for modern businesses, Fugo turns to Stately\'s tooling to tackle complex application logic, ensuring robust IOT systems and seamless communication across design concerns in an industry where reliability is key.\\n\\n{/* truncate */}\\n\\n<p>\\n  <img\\n    src=\\"/blog/2023-12-04-fugo-and-stately-case-study/fugo_logo.png\\"\\n    alt=\\"Fugo logo\\"\\n    width=\\"255\\"\\n    height=\\"255\\"\\n  />\\n</p>\\n\\n[Fugo](https://www.fugo.ai/) provides a comprehensive digital signage platform, providing their customers the ability to schedule, modify, and automate their branded screens at any time. Whether it be for holidays, shift changes, or a hotfix to a menu item, Fugo has their customers covered. This is exemplified by the sheer scale Fugo can meet for their customers. According to the lead developer, Marsel Atniashev, just one of their customers operates over 200 digital screens in 3 different countries. Needless to say, downtime is not negotiable when operating at this level, and Fugo\'s connected solution is able to accommodate customer needs with ease.\\n\\nBuilding a product this capable and complex is no small feat, so the development team at Fugo turned to Stately to help manage and orchestrate complex application logic. Their offerings can considered in two segments: the CMS and the Player.\\n\\n## Comprehensive content management\\n\\n![screenshot of the CMS platform](/blog/2023-12-04-fugo-and-stately-case-study/CMS_screenshot.png)\\n\\nThe CMS is a user-facing design platform for customers to build out their signage. While it allows for customers to upload their own branded content, the CMS is also packed with tons of templates and formats to get users moving quickly. Users can group their screens together to play the same content, and be published to their players directly from the CMS. Some other really interesting features in the CMS include: playlists, remote management, and an analytics suite. Once a user is ready to publish their content, the second component comes into \u201cplay\u201d. (see what I did there?)\\n\\n## The Player: cross-platform client software\\n\\n![fugo player image](/blog/2023-12-04-fugo-and-stately-case-study/fugo_player.png)\\n\\nThe Player can be thought of as the \u201cclient\u201d component for Fugo\'s platform. It\'s responsible for displaying the content drafted in the CMS. Fugo does ship its own Intel-based hardware for running the Player, but the software is flexible enough to be run on a host of different platforms, like Android TV, LG\'s WebOS, Samsung Tizen, and Windows. The Player allows businesses to run Fugo\'s suite of tooling on hardware they already have, rather than needing to purchase and maintain expensive fleets of devices.\\n\\n## Conveying the complex: communicating design concerns across teams\\n\\nAt its core, Fugo\'s product offerings require _a lot_ of state management. In the user interface alone, the CMS needs to be able to manage several tasks like:\\n\\n- Managing playlist order\\n- Tracking timers for how long each screen is visible within playlists\\n- Synchronizing with the Player\\n\\nWhile wrangling this without an explicit state machine is certainly possible, maintaining this logic without a proper framework adds significant overhead, lacks the ability to easily understand these processes, and allows plenty of room to introduce bugs. This is where Stately\'s tooling comes in for the team. By representing their app logic as state machines, the team at Fugo is better able to understand the flows for their features. This makes adding and modifying functionality straightforward and easy to communicate. For example, the logic representing the process for taking screenshots can be found below:\\n\\n<EmbedMachine\\n  name=\\"Screenshot Machine\\"\\n  embedURL=\\"https://stately.ai/registry/editor/embed/9fa24cc0-3026-41be-bb22-9afc3980fefc?mode=design&machineId=d2fc56d9-9b71-42fb-bf71-5ce69d59a10e\\"\\n/>\\n\\nThe machine above displays a clear flow for events and states. Representing logic in this way allows the Fugo team to capture their working context without fear of losing it or misunderstanding the event flow. From Marsel, lead developer on the team,\\n\\n> \u201cAfter a long time away from coding, I can return and effectively understand the logic.\u201d\\n\\nThe time it takes to familiarize oneself with their work after having been away costs time, and the fact that these statechart diagrams can reduce it simply makes for saved resources on any project.\\n\\n## Handling the unknown: building robust IOT solutions\\n\\nWhile users primarily interact with the CMS, the Player acts as the unsung hero of Fugo\'s offerings. The Player has to accept new content submitted from the CMS, manage existing content, and play the desired content at specified intervals defined by the end user. It also has to contend with real-world concerns when deployed to uncontrollable environments:\\n\\n- What happens if connectivity is lost?\\n- How does it consistently fetch commands and updates from the server?\\n- What\'s the best way to save power when there are no pending commands?\\n\\nThese may seem straightforward alone, but the surface area for problems grow exponentially when these systems need to interact with each other. Additionally, the Player is not intended to be interacted with directly from the end user. So when errors do occur, it has to be able to recover from them gracefully, all while still providing a competent user experience. Designing these processes and their error cases in Stately Studio helps the team plan for these eventualities. For example, the following machine fetches requests from the Player for new commands it needs to process:\\n\\n<EmbedMachine\\n  name=\\"Fetch Machine\\"\\n  embedURL=\\"https://stately.ai/registry/editor/embed/9fa24cc0-3026-41be-bb22-9afc3980fefc?mode=design&machineId=efd4162d-52e0-4a68-9828-ab8f71a531ea\\"\\n/>\\n\\nThis machine is designed to manage the inevitable \\"sad\\" paths in software, such as error scenarios and branching logic. Implementing this with nested logic would result in complex, difficult-to-maintain code that must be written defensively. However, by designing this flow as a state machine and using Stately Studio for visualization, the team can understand the data flow, identify potential issues, and implement error-handling logic for edge cases.\\n\\nMoreover, when using Stately tooling, the code becomes self-documenting and consistently up-to-date. Developers often find themselves building diagrams to represent logic flows and then leaving those same designs unchanged when the business requirements change or the team pivots to a new direction. With Stately Studio, these concerns are seen as one. The team at Fugo doesn\'t have to design the flow and then write the code. By building with the editor, the flow **is** the code, and when updates roll in, the diagrams always reflect the latest changes.\\n\\nMarsel also mentioned the value of these statecharts when communicating with team members who aren\'t domain experts. He found it easier to share context and explain frontend processes to backend developers using statecharts rather than walking through the code. This approach makes sense, as the gap in expertise can be significant, even among technical team members. Sharing context this way allows everyone to focus on their tasks while keeping the broader product in mind.\\n\\n## Growing with Fugo\\n\\nAt Stately, our core mission has always been to make software development easier **and** less error prone by making logic more accessible. When it comes to product development, application logic shouldn\'t be exclusively for developers. When the entire team understands how the product works, everyone can move forward with the bigger picture in mind. As Marsel puts it:\\n\\n> \u201cI can better explain business logic to stakeholders using simulation in Stately Editor.\u201d\\n\\nEnabling this cross-discipline communication is what drives the Stately team, and we\'re thrilled to provide Fugo with a cohesive platform for designing, presenting, and communicating complex solutions."},{"id":"2023-12-01-xstate-v5","metadata":{"permalink":"/xstate-zh/blog/2023-12-01-xstate-v5","editUrl":"https://github.com/statelyai/docs/edit/main/blog/2023-12-01-xstate-v5/index.mdx","source":"@site/blog/2023-12-01-xstate-v5/index.mdx","title":"XState v5 \u53d1\u5e03\u4e86","description":"\u4eca\u5929\uff0c\u6211\u4eec\u5f88\u9ad8\u5174\u7ec8\u4e8e\u53d1\u5e03\u4e86 XState v5\uff01\u8fd9\u662f XState \u7684\u4e00\u4e2a\u65b0\u4e3b\u8981\u7248\u672c\uff0c\u4e13\u6ce8\u4e8e actors\uff0c\u5e76\u5e2e\u52a9\u60a8\u6bd4\u4ee5\u524d\u7684\u7248\u672c\u66f4\u5feb\u3001\u66f4\u8f7b\u677e\u5730\u5f00\u59cb\u4f7f\u7528 XState\u3002","date":"2023-12-01T00:00:00.000Z","formattedDate":"December 1, 2023","tags":[{"label":"xstate","permalink":"/xstate-zh/blog/tags/xstate"},{"label":"stately","permalink":"/xstate-zh/blog/tags/stately"},{"label":"state machines","permalink":"/xstate-zh/blog/tags/state-machines"},{"label":"actor model","permalink":"/xstate-zh/blog/tags/actor-model"}],"readingTime":24.18,"hasTruncateMarker":true,"authors":[{"name":"David Khourshid","title":"Stately Team","url":"https://github.com/davidkpiano","imageURL":"https://ascelcgzufjyvdzuplwo.supabase.co/storage/v1/object/public/avatars/david.png","key":"david"}],"frontMatter":{"title":"XState v5 \u53d1\u5e03\u4e86","description":"\u4eca\u5929\uff0c\u6211\u4eec\u5f88\u9ad8\u5174\u7ec8\u4e8e\u53d1\u5e03\u4e86 XState v5\uff01\u8fd9\u662f XState \u7684\u4e00\u4e2a\u65b0\u4e3b\u8981\u7248\u672c\uff0c\u4e13\u6ce8\u4e8e actors\uff0c\u5e76\u5e2e\u52a9\u60a8\u6bd4\u4ee5\u524d\u7684\u7248\u672c\u66f4\u5feb\u3001\u66f4\u8f7b\u677e\u5730\u5f00\u59cb\u4f7f\u7528 XState\u3002","authors":["david"],"tags":["xstate","stately","state machines","actor model"],"date":"2023-12-01T00:00:00.000Z","slug":"2023-12-01-xstate-v5","image":"/blog/2023-12-01-xstate-v5.png"},"unlisted":false,"prevItem":{"title":"Fugo x Stately: digital signage design and automation case study","permalink":"/xstate-zh/blog/2023-12-04-fugo-and-stately-case-study"},"nextItem":{"title":"Koordinates x Stately: geospatial data management case study","permalink":"/xstate-zh/blog/2023-11-28-koordinates-and-stately-case-study"}},"content":"\u4eca\u5929\uff0c\u6211\u4eec\u5f88\u9ad8\u5174\u7ec8\u4e8e\u53d1\u5e03\u4e86 XState v5\uff01\u8fd9\u662f XState \u7684\u4e00\u4e2a\u65b0\u4e3b\u8981\u7248\u672c\uff0c\u4e13\u6ce8\u4e8e actors\uff0c\u5e76\u5e2e\u52a9\u60a8\u6bd4\u4ee5\u524d\u7684\u7248\u672c\u66f4\u5feb\u3001\u66f4\u8f7b\u677e\u5730\u5f00\u59cb\u4f7f\u7528 XState\u3002\\n\\n\u72b6\u6001\u673a\u8f6c\u6362\u53ef\u80fd\u9700\u8981\u96f6\u65f6\u95f4\uff0c\u4f46\u4ece XState v4 \u8fc7\u6e21\u5230 v5 \u82b1\u4e86\u5f88\u957f\u65f6\u95f4\u3002\u6211\u4eec\u5728 2018 \u5e74 10 \u6708\u53d1\u5e03\u4e86 XState v4\uff0c\u5e76\u5728\u6b64\u540e\u7684\u5927\u90e8\u5206\u65f6\u95f4\u91cc\u4e00\u76f4\u81f4\u529b\u4e8e\u4e0b\u4e00\u4e2a\u4e3b\u8981\u7248\u672c\u7684\u5f00\u53d1\u3002\u51ed\u501f GitHub \u4e0a\u8d85\u8fc7 25k \u9897\u661f\u3001npm \u4e0a\u6bcf\u5468 100 \u4e07\u6b21\u4e0b\u8f7d\u4ee5\u53ca\u4e00\u4e2a\u4e86\u4e0d\u8d77\u7684\u793e\u533a\uff0c\u6211\u4eec\u80fd\u591f\u503e\u542c\u548c\u5b66\u4e60\u90a3\u4e9b\u5728\u751f\u4ea7\u4e2d\u4f7f\u7528 XState \u7684\u4eba\uff0c\u5e76\u521b\u5efa\u4e00\u4e2a\u66f4\u5f3a\u5927\u4f46\u66f4\u7b80\u5355\uff08\u4e14\u66f4\u5c0f\uff01\uff09\u7684\u7248\u672c\u3002\\n\\n{/* truncate */}\\n\\n\u63d0\u9192\u4e00\u4e0b\uff0cXState \u662f\u4e00\u4e2a\u5b8c\u5168\u5f00\u6e90\uff08MIT \u8bb8\u53ef\uff09\u3001\u96f6\u4f9d\u8d56\u7684\u72b6\u6001\u7ba1\u7406\u548c\u7f16\u6392\u89e3\u51b3\u65b9\u6848\uff0c\u57fa\u4e8e\u72b6\u6001\u673a\u3001\u72b6\u6001\u56fe\u548c actor \u6a21\u578b\u3002**XState \u7f16\u6392\u4efb\u4f55\u903b\u8f91**\uff0c\u4ece promises \u5230\u72b6\u6001\u673a\u4ee5\u53ca\u5176\u4ed6\u6240\u6709\u5185\u5bb9\u3002\u5b83\u6700\u9002\u5408\u7ba1\u7406\u548c\u7f16\u6392\u8d85\u8d8a\u7b80\u5355\u72b6\u6001\u7ba1\u7406\u7684\u590d\u6742\u5e94\u7528\u903b\u8f91\uff0c\u5e76\u4f7f\u5e94\u7528\u903b\u8f91\u5728\u89c6\u89c9\u4e0a\u5177\u6709\u534f\u4f5c\u6027\uff0c\u4ee5\u4fbf\u60a8\u7684\u6574\u4e2a\u56e2\u961f\uff08\u6280\u672f\u548c\u975e\u6280\u672f\u4eba\u5458\uff09\u90fd\u80fd\u8f7b\u677e\u7406\u89e3\u548c\u8d21\u732e\u3002\\n\\n\u60a8\u53ef\u4ee5\u901a\u8fc7\u5b89\u88c5 `xstate` \u6765\u7acb\u5373\u8bd5\u7528 XState v5\uff1a\\n\\n```bash\\nnpm i xstate\\n```\\n\\n## \u6211\u4eec\u5bf9 XState v5 \u7684\u613f\u666f\\n\\n\u5728 XState v4 \u4e2d\uff0c**\u72b6\u6001\u673a\u548c\u72b6\u6001\u56fe\u662f\u4e3b\u8981\u7126\u70b9**\u3002\u901a\u8fc7\u72b6\u6001\u673a\u4ee5\u4e8b\u4ef6\u9a71\u52a8\u7684\u65b9\u5f0f\u5efa\u6a21\u590d\u6742\u903b\u8f91\u88ab\u8bc1\u660e\u662f\u8bb8\u591a\u5728\u751f\u4ea7\u4e2d\u4f7f\u7528 XState \u7684\u516c\u53f8\u7684\u4e00\u79cd\u53ef\u9760\u7b56\u7565\u3002\u6211\u4eec\u4e86\u89e3\u5230\uff0cXState \u4e0d\u4ec5\u5bf9\u7ba1\u7406\u524d\u7aef\u903b\u8f91\uff08\u5982\u590d\u6742\u7ec4\u4ef6\u6216\u591a\u6b65\u9aa4\u8868\u5355\uff09\u6709\u7528\uff0c\u56e2\u961f\u8fd8\u4f7f\u7528\u5b83\u6765\u7ba1\u7406\u540e\u7aef\u5de5\u4f5c\u6d41\u548c\u5173\u952e\u4e1a\u52a1\u903b\u8f91\u3002\\n\\n\u4f46\u968f\u7740\u7528\u4f8b\u7684\u589e\u52a0\uff0c\u5f88\u660e\u663e XState \u9700\u8981\u4ece\u7ba1\u7406\u7cfb\u7edf\u67d0\u4e00\u90e8\u5206\u7684\u903b\u8f91\u53d1\u5c55\u5230\u534f\u8c03\u9700\u8981\u76f8\u4e92\u901a\u4fe1\u7684\u591a\u4e2a\u90e8\u5206\u7684\u903b\u8f91\u3002XState \u6700\u521d\u6709 **\u6d3b\u52a8**\uff0c\u540e\u6765\u88ab **\u8c03\u7528\u7684 actors**\uff08\u5728 v4 \u4e2d\u79f0\u4e3a\u201c\u670d\u52a1\u201d\uff09\u53d6\u4ee3\u3002\u72b6\u6001\u673a\u548c actor \u6a21\u578b\u81ea\u7136\u5730\u7ed3\u5408\u5728\u4e00\u8d77\uff0c\u56e0\u4e3a\u72b6\u6001\u673a\u53ef\u4ee5\u5efa\u6a21\u5355\u4e2a actor \u7684\u884c\u4e3a\uff0c\u800c actor \u6a21\u578b\u53ef\u4ee5\u5efa\u6a21\u591a\u4e2a\u76f8\u4e92\u901a\u4fe1\u7684 actor \u7684\u884c\u4e3a\u3002\\n\\n\u6240\u4ee5\u73b0\u5728\uff0c\u5728 XState v5 \u4e2d\uff0c**actors \u662f\u4e3b\u8981\u7126\u70b9**\u3002\u72b6\u6001\u673a\u548c\u72b6\u6001\u56fe\u4ecd\u7136\u662f XState \u7684\u91cd\u8981\u7ec4\u6210\u90e8\u5206\uff0c\u4f46\u5b83\u4eec\u5e76\u4e0d\u662f\u5efa\u6a21 actor \u884c\u4e3a\u7684\u552f\u4e00\u65b9\u5f0f\uff08\u5c3d\u7ba1\u5b83\u4eec\u53ef\u4ee5\u8bf4\u662f\u6700\u5f3a\u5927\u7684\u65b9\u5f0f\uff09\u3002\u6211\u4eec\u5e0c\u671b XState \u6210\u4e3a\u4e00\u4e2a\u591a\u529f\u80fd\u7684\u72b6\u6001\u534f\u8c03\u5e93\uff0c\u4f7f\u5f00\u53d1\u4eba\u5458\u80fd\u591f\u5145\u5206\u5229\u7528 [actor \u6a21\u578b](/blog/what-is-the-actor-model)\uff0c\u65e0\u8bba\u4ed6\u4eec\u9009\u62e9\u5982\u4f55\u7f16\u5199\u903b\u8f91\u3002\u65e0\u8bba\u60a8\u662f\u4f7f\u7528 promises \u7f16\u5199\u5f02\u6b65\u903b\u8f91\uff0c\u4f7f\u7528 observables\uff0c\u4f7f\u7528 reducers \u7ba1\u7406\u72b6\u6001\uff0c\u8fd8\u662f\u4f7f\u7528\u56de\u8c03\u51fd\u6570\u5904\u7406\u4efb\u4f55\u5176\u4ed6\u7c7b\u578b\u7684\u903b\u8f91\uff0c\u60a8\u90fd\u53ef\u4ee5\u4f7f\u7528 XState \u4ee5\u4e8b\u4ef6\u9a71\u52a8\u7684\u65b9\u5f0f\u534f\u8c03\u60a8\u7684\u72b6\u6001\u3002\\n\\n\u8bdd\u867d\u5982\u6b64\uff0c\u6211\u4eec\u8fd8\uff1a\\n\\n- \u5927\u5927\u7b80\u5316\u4e86 API \u5e76\u51cf\u5c11\u4e86\u8868\u9762\u79ef\\n- \u5f15\u5165\u4e86\u65b0\u7684\u72b6\u6001\u673a\u529f\u80fd\uff0c\u4f7f\u5f3a\u5927\u7684\u6a21\u5f0f\u6210\u4e3a\u53ef\u80fd\\n- \u5927\u5e45\u6539\u5584\u4e86 TypeScript \u5f00\u53d1\u8005\u4f53\u9a8c\uff0c\u63d0\u4f9b\u4e86\u66f4\u597d\u7684\u63a8\u65ad\\n- \u5927\u5e45\u51cf\u5c11\u4e86\u5305\u7684\u5927\u5c0f\\n- \u6539\u8fdb\u4e86\u6587\u6863\u5e76\u6dfb\u52a0\u4e86\u8bb8\u591a\u65b0\u793a\u4f8b\\n\\n\u8fd9\u4e2a\u7248\u672c\u6709\u5f88\u591a\u65b0\u529f\u80fd\u548c\u6539\u8fdb\u3002\u8ba9\u6211\u4eec\u6765\u770b\u770b\u6211\u6700\u559c\u6b22\u7684\u4e00\u4e9b\u65b0\u529f\u80fd\u3002\\n\\n## \u4e00\u5207\u90fd\u662f actor\\n\\n\u5728 XState v5 \u4e2d\uff0c**Actor** \u662f\u4e3b\u8981\u7684\u62bd\u8c61\u5355\u4f4d\u3002actors \u6bd4\u4f60\u60f3\u8c61\u7684\u8981\u7b80\u5355\uff1b\u5b83\u4eec\u662f\u4e00\u4e9b\u5bf9\u8c61\uff1a\\n\\n- \u6709\u81ea\u5df1\u7684\u5185\u90e8\u72b6\u6001\\n- \u53ef\u4ee5\u53d1\u9001\u548c\u63a5\u6536\u4e8b\u4ef6\uff08\u6216\u201c\u6d88\u606f\u201d\uff09\u5e76\u5bf9\u5176\u505a\u51fa\u53cd\u5e94\\n- \u53ef\u4ee5\u521b\u5efa\u5176\u4ed6 actors\\n\\n\u5982\u679c\u4f60\u4f7f\u7528\u8fc7 Redux \u6216 Zustand \u7b49\u5e93\uff0c\u4f60\u53ef\u80fd\u4f1a\u8ba4\u4e3a\u8fd9\u542c\u8d77\u6765\u6709\u70b9\u50cf\u201cstore\u201d\u3002\u4f60\u662f\u5bf9\u7684\uff01\u5c31\u50cf store \u6709\u81ea\u5df1\u7684\u5185\u90e8\u72b6\u6001\u5e76\u4e14\u5728\u63a5\u6536\u5230\u4e8b\u4ef6\u65f6\u53ef\u4ee5\u6539\u53d8\u5176\u72b6\u6001\u4e00\u6837\uff0cactors \u4e5f\u53ef\u4ee5\u505a\u5230\u8fd9\u4e00\u70b9\u751a\u81f3\u66f4\u591a\u3002\\n\\n\u5728 XState v5 \u4e2d\uff0c\u6709\u51e0\u4e2a [\u65b0\u7684 actor \u903b\u8f91\u521b\u5efa\u5668](/docs/actors/#actor-logic-creators) \u7528\u4e8e\u521b\u5efa\uff1a\\n\\n**Promise actor logic**\\n\\n```jsx\\nimport { fromPromise } from \'xstate\';\\n\\nconst promiseLogic = fromPromise(async ({ input }) => {\\n  const user = await getUser(input.userId);\\n\\n  return user;\\n});\\n```\\n\\n**Transition function actor logic**\\n\\n```jsx\\nimport { fromTransition } from \'xstate\';\\n\\nconst transitionLogic = fromTransition((state, event) => {\\n  switch (event.type) {\\n    // reducer logic; you know the drill\\n  }\\n}, { count: 0 });\\n```\\n\\n**Observable actor logic**\\n\\n```jsx\\nimport { fromObservable } from \'xstate\';\\nimport { interval } from \'rxjs\';\\n\\nconst intervalLogic = fromObservable(() => interval(1000));\\n```\\n\\n**Callback actor logic**\\n\\n```jsx\\nimport { fromCallback } from \'xstate\';\\n\\nconst callbackLogic = fromCallback(({ sendBack, receive }) => {\\n  const handler = (event) => {\\n    sendBack(event);\\n  }\\n\\n  window.addEventListener(\'message\', handler);\\n\\n  return () => { window.removeEventListener(\'message\', handler); }\\n});\\n```\\n\\n\u8981\u4ece\u8fd9\u4e9b\u903b\u8f91\u521b\u5efa actors\uff0c\u60a8\u53ef\u4ee5\u4f7f\u7528 `createActor(logic)` \u51fd\u6570\uff08\u5728 XState v4 \u4e2d\u79f0\u4e3a `interpret()`\uff09\uff1a\\n\\n```jsx\\nimport { createActor } from \'xstate\';\\n\\n// ...\\n\\nconst actor = createActor(someLogic);\\n\\nactor.subscribe(snapshot => {\\n  console.log(snapshot);\\n});\\n\\nactor.start();\\n\\nactor.send({ type: \'greet\', greeting: \'hello world\' });\\n```\\n\\n\u65e0\u8bba\u60a8\u521b\u5efa\u54ea\u79cd\u903b\u8f91\uff0c\u521b\u5efa actors \u7684\u65b9\u5f0f\u90fd\u662f\u5b8c\u5168\u76f8\u540c\u7684\u3002actors \u662f\u4e00\u4e2a\u5f3a\u5927\u7684\u62bd\u8c61\u5355\u5143\uff0c\u56e0\u4e3a\u5b83\u4eec\u4e0d\u4ec5\u4ee3\u8868\u4e86\u5904\u7406\u5e94\u7528\u7a0b\u5e8f\u4e2d\u51e0\u4e4e\u6240\u6709\u4e8b\u60c5\u7684\u5355\u4e00\u63a5\u53e3\uff0c\u800c\u4e14 actor \u4e4b\u95f4\u7684\u901a\u4fe1\u4e5f\u53ef\u4ee5\u5728\u5e8f\u5217\u56fe\u4e2d\u6e05\u6670\u5730\u53ef\u89c6\u5316\uff08\u6211\u4eec\u5c06\u5f88\u5feb\u53d1\u5e03\uff09\u3002\u6b64\u5916\uff0c\u8fd9\u79cd\u7b80\u5355\u7684\u62bd\u8c61\u4f7f\u60a8\u80fd\u591f\u521b\u5efa**\u53ef\u7ec4\u5408\u7684 actor \u903b\u8f91**\uff1a\\n\\n```ts\\nfunction withLogging(actorLogic) {\\n  return {\\n    ...actorLogic,\\n    transition: (state, event, actorScope) => {\\n      console.log(\'State:\', state);\\n      return actorLogic.transition(state, event, actorScope);\\n    }\\n  }\\n}\\n\\nconst actor = createActor(withLogging(someLogic));\\n```\\n\\n\u6709\u4e86\u8fd9\u4e9b\u6784\u5efa\u5757\uff0c\u60a8\u53ef\u4ee5\u521b\u5efa\u66f4\u9ad8\u7ea7\u7684\u62bd\u8c61\uff0c\u4f8b\u5982 `withUndoRedo`\u3001`withDebounce`\uff0c\u751a\u81f3\u81ea\u5b9a\u4e49 actor \u903b\u8f91\uff0c\u5982 `fromGenerator`\u3001`fromWebSocket` \u7b49\u3002\\n\\n## Inspect API\\n\\n\u6709\u4e00\u79cd\u65b0\u7684\u3001\u66f4\u7b80\u6d01\u7684\u65b9\u6cd5\u6765[\u68c0\u67e5](/docs/inspection)\u4e0d\u4ec5\u662f\u72b6\u6001\u673a\u7684\u72b6\u6001\u8f6c\u6362\uff0c\u8fd8\u6709 actor \u7cfb\u7edf\u4e2d actor \u7684\u5404\u4e2a\u65b9\u9762\uff1a\\n\\n- Actor \u751f\u547d\u5468\u671f\\n- Actor \u4e8b\u4ef6\u901a\u4fe1\\n- Actor \u5feb\u7167\u66f4\u65b0\\n\\n\u4e0e\u5176\u795e\u5947\u5730\u8bbe\u7f6e `devTools: true`\uff0c\u4e0d\u5982\u4f7f\u7528 Inspect API \u5c06\u201c\u68c0\u67e5\u5668\u201d\uff08\u53ea\u662f\u4e00\u4e2a\u89c2\u5bdf\u8005\uff0c\u89c2\u5bdf\u68c0\u67e5\u4e8b\u4ef6\uff09\u9644\u52a0\u5230 actor \u7cfb\u7edf\u7684\u6839\u90e8\uff1a\\n\\n```jsx\\nconst actor = createActor(machine, {\\n  inspect: (inspectionEvent) => {\\n    // type: \'@xstate.actor\' or\\n    // type: \'@xstate.snapshot\' or\\n    // type: \'@xstate.event\'\\n    console.log(inspectionEvent);\\n  }\\n});\\n```\\n\\n\u68c0\u67e5\u5668\u5c06\u63a5\u6536\u7cfb\u7edf\u4e2d\u6bcf\u4e2a actor \u7684\u68c0\u67e5\u4e8b\u4ef6\uff0c\u8ba9\u60a8\u5bf9\u53d1\u751f\u7684\u4e00\u5207\u6709\u7ec6\u7c92\u5ea6\u7684\u53ef\u89c1\u6027\uff0c\u4ece\u5355\u4e2a actor \u5982\u4f55\u53d8\u5316\u5230 actor \u4e4b\u95f4\u5982\u4f55\u76f8\u4e92\u901a\u4fe1\u3002\\n\\n\u6211\u4eec\u5c06\u5f88\u5feb\u53d1\u5e03\u68c0\u67e5\u5f00\u53d1\u5de5\u5177\uff0c\u4ee5\u72b6\u6001\u673a\u56fe\u3001\u5e8f\u5217\u56fe\u7b49\u5f62\u5f0f\u53ef\u89c6\u5316\u8fd9\u4e9b\u4fe1\u606f\u3002\\n\\n## \u6df1\u5ea6\u6301\u4e45\u5316\\n\\n\u6211\u4eec\u5df2\u7ecf\u5199\u8fc7[\u5982\u4f55\u6301\u4e45\u5316\u72b6\u6001](/blog/2023-10-02-persisting-state)\uff0c\u800c XState v5 \u5c06\u6301\u4e45\u5316\u8fdb\u4e00\u6b65\u63d0\u5347\u3002[Actor \u6301\u4e45\u5316](/docs/persistence)\u662f\u4e00\u79cd\u6a21\u5f0f\uff0c\u5176\u4e2d actor \u7684\u5185\u90e8\u72b6\u6001\u53ef\u4ee5\u968f\u65f6\u6301\u4e45\u5316\u548c\u6062\u590d\u3002\u5728 XState v4 \u4e2d\uff0c\u88ab\u8c03\u7528/\u751f\u6210\u7684 actor \u4e0d\u4f1a\u88ab\u6301\u4e45\u5316\uff0c\u800c\u5728 XState v5 \u4e2d\uff0c**actors \u73b0\u5728\u88ab\u6df1\u5ea6\uff08\u9012\u5f52\u5730\uff09\u6301\u4e45\u5316**\u3002\u88ab\u8c03\u7528/\u751f\u6210\u7684 actors \u5c06\u88ab\u6301\u4e45\u5316\uff0c\u4ee5\u53ca\u4ece\u8fd9\u4e9b actors \u8c03\u7528/\u751f\u6210\u7684 actors\uff0c\u4f9d\u6b64\u7c7b\u63a8\u3002\\n\\n\u5728\u4ee5\u4e0b\u793a\u4f8b\u4e2d\uff0c`mainActor` \u7684\u72b6\u6001\u5c06\u88ab\u6301\u4e45\u5316\uff0c\u4ee5\u53ca\u88ab\u8c03\u7528\u7684 `someCounter` actor \u7684\u72b6\u6001\u3002\u5f53 `restoredActor` \u542f\u52a8\u65f6\uff0c\u5b83\u5c06\u4ece `mainActor` \u7684\u6301\u4e45\u5316\u72b6\u6001\u5f00\u59cb\uff0c\u5176\u4e2d\u5305\u62ec `someCounter` \u7684\u6301\u4e45\u5316\u72b6\u6001\uff1a\\n\\n```ts\\nimport { setup, createActor } from \'xstate\';\\n\\nconst machine = setup({\\n  actors: {\\n    counter: fromTransition(/* ... */)\\n  }\\n}).createMachine({\\n  invoke: {\\n    // \u8fd9\u4e5f\u5c06\u88ab\u6301\u4e45\u5316\uff01\\n    src: \'counter\',\\n    id: \'someCounter\',\\n  },\\n  // ...\\n});\\n\\nconst mainActor = createActor(machine);\\nmainActor.start();\\n\\n// \u6df1\u5ea6\u6301\u4e45\u5316\u72b6\u6001\\n// \u4e5f\u6301\u4e45\u5316\u4e86 \\"someCounter\\" actor\uff01\\nconst persistedState = mainActor.getPersistedSnapshot();\\n\\n// \u6062\u590d\u72b6\u6001\\nconst restoredActor = createActor(machine, {\\n  snapshot: persistedState,\\n});\\n\\n// \u4ece\u9012\u5f52\u6301\u4e45\u5316\u7684\u72b6\u6001\u5f00\u59cb\\nrestoredActor.start();\\n```\\n\\n\u8fd9\u5bf9\u4e8e\u5ba2\u6237\u7aef\uff08\u4f8b\u5982\u5904\u7406\u9875\u9762\u5237\u65b0\uff09\u548c\u670d\u52a1\u5668\u7aef\uff08\u4f8b\u5982\u6301\u4e45\u5316\u5de5\u4f5c\u6d41\u72b6\u6001\uff09\u7528\u4f8b\u90fd\u5f88\u6709\u7528\u3002[\u5728\u6211\u4eec\u7684\u6587\u6863\u4e2d\u9605\u8bfb\u66f4\u591a\u5173\u4e8e actor \u6301\u4e45\u5316\u7684\u4fe1\u606f](/docs/persistence)\u3002\\n\\n## \u5728\u4efb\u4f55\u5730\u65b9\u5f15\u7528 actors\\n\\n\u7531\u4e8e actors \u53ef\u4ee5\u751f\u6210\u5176\u4ed6 actors\uff0c\u800c\u8fd9\u4e9b actors \u53c8\u53ef\u4ee5\u751f\u6210\u5176\u4ed6 actors\uff0c\u8fd9\u4e9b\u8fde\u63a5\u7684 actors \u5f62\u6210\u4e86\u4e00\u4e2a\u81ea\u7136\u7684\u5c42\u6b21\u7ed3\u6784\uff0c\u79f0\u4e3a\u201cactor \u7cfb\u7edf\u201d\u3002\u5728 XState v4 \u4e2d\uff0cactors \u53ea\u80fd\u901a\u8fc7 `sendTo(\'child-id\', ...)` \u548c `sendParent(...)` \u5728\u7236\u5b50\u5173\u7cfb\u4e2d\u8f7b\u677e\u901a\u4fe1\u3002\u4ece\u4e00\u4e2a\u4efb\u610f actor \u5411\u540c\u4e00\u7cfb\u7edf\u4e2d\u7684\u53e6\u4e00\u4e2a\u4efb\u610f actor \u53d1\u9001\u4e8b\u4ef6\u662f\u56f0\u96be\u4e14\u8fc7\u4e8e\u590d\u6742\u7684\u3002\\n\\n\u5728 XState v5 \u4e2d\uff0c\u8c03\u7528 `createActor(...)` \u521b\u5efa\u4e00\u4e2a\u6839 actor \u4e5f\u5c06\u521b\u5efa\u4e00\u4e2a\u9690\u5f0f\u7684 actor \u7cfb\u7edf\u3002\u8fd9\u542f\u7528\u4e86\u4e00\u4e2a\u5173\u952e\u7279\u6027\uff0c\u79f0\u4e3a **\u63a5\u5f85\u5458\u6a21\u5f0f**\u3002\u63a5\u5f85\u5458\u6a21\u5f0f\u610f\u5473\u7740 actors \u53ef\u4ee5\u901a\u8fc7\u5176 `systemId` \u6ce8\u518c\u548c\u67e5\u627e\uff0c\u8fd9\u5bf9\u4e8e\u9700\u8981\u76f8\u4e92\u901a\u4fe1\u4f46\u5f7c\u6b64\u4e0d\u76f4\u63a5\u4e86\u89e3\u7684 actors\uff08\u5373\uff0c\u4e0d\u5728\u7236\u5b50\u5173\u7cfb\u4e2d\u7684 actors\uff09\u975e\u5e38\u6709\u7528\u3002\\n\\n\u4f8b\u5982\uff0c\u5047\u8bbe\u60a8\u6709\u4e00\u4e2a `checkoutMachine` \u6765\u534f\u8c03\u5728\u7ebf\u5546\u5e97\u7684\u72b6\u6001\u3002\u5982\u679c\u60a8\u5e0c\u671b\u4e00\u4e2a\u901a\u77e5\u5668 actor \u5728 `checkoutMachine` \u7cfb\u7edf\u5185\u7684\u4efb\u4f55\u751f\u6210\u7684\u673a\u5668\u4e2d\u90fd\u53ef\u7528\uff0c\u60a8\u53ef\u4ee5\u901a\u8fc7\u63d0\u4f9b `systemId` \u6765\u6ce8\u518c\u5b83\uff1a\\n\\n```ts\\nimport { notifierMachine } from \'../notifierMachine\';\\nimport { shippingMachine } from \'../shippingMachine\';\\n\\nconst checkoutMachine = createMachine({\\n  invoke: {\\n    src: notifierMachine,\\n    systemId: \'notifier\',\\n  },\\n  // ...\\n  states: {\\n    // ...\\n    shipping: {\\n      invoke: {\\n        src: shippingMachine,\\n      },\\n    },\\n  },\\n});\\n\\nconst checkoutActor = createActor(checkoutMachine);\\ncheckoutActor.start();\\n```\\n\\n\u73b0\u5728\uff0c`checkoutActor` \u7cfb\u7edf\u4e2d\u7684\u4efb\u4f55 actor \u90fd\u53ef\u4ee5\u901a\u8fc7\u8c03\u7528 `system.get(\\"notifier\\")` \u8bbf\u95ee\u901a\u77e5\u5668 actor\uff1a\\n\\n```ts\\nconst shippingMachine = createMachine({\\n  // ...\\n  on: {\\n    \'address.updated\': {\\n      actions: sendTo(({ system }) => system.get(\'notifier\'), {\\n        type: \'notify\',\\n        message: \'Shipping address updated\',\\n      }),\\n    },\\n  },\\n});\\n```\\n\\n\u9690\u5f0f\u7cfb\u7edf\u548c\u63a5\u5f85\u5458\u6a21\u5f0f\u4f7f\u5f97\u5efa\u6a21\u4efb\u610f actor \u4e4b\u95f4\u7684\u901a\u4fe1\u3001\u4e8b\u4ef6\u603b\u7ebf\u548c\u5176\u4ed6\u4e8b\u4ef6\u9a71\u52a8\u6a21\u5f0f\u53d8\u5f97\u66f4\u52a0\u5bb9\u6613\u3002\\n\\n\u5728\u67d0\u4e9b\u60c5\u51b5\u4e0b\uff0c\u60a8\u53ef\u80fd\u5e0c\u671b\u4e3a actors \u6307\u5b9a\u521d\u59cb\u201c\u8f93\u5165\u6570\u636e\u201d\u3002\u5728 XState v4 \u4e2d\u63d0\u4f9b\u8fd9\u4e9b\u8f93\u5165\u6570\u636e\u5e76\u4e0d\u5bb9\u6613\u3002\u60a8\u5fc5\u987b\uff1a\\n\\n- \u521b\u5efa\u4e00\u4e2a\u5de5\u5382\u673a\u5668\u51fd\u6570\uff0c\u8be5\u51fd\u6570\u63a5\u53d7\u4e00\u4e9b\u8f93\u5165\u6570\u636e\u5e76\u8fd4\u56de\u4e00\u4e2a\u5305\u542b\u8be5\u8f93\u5165\u6570\u636e\u7684\u673a\u5668\u3002\\n- \u4f7f\u7528 `machine.withContext(...)` \u521b\u5efa\u4e00\u4e2a\u65b0\u673a\u5668\uff0c\u5e76\u5c06\u6574\u4e2a\u4e0a\u4e0b\u6587\u4e0e\u8f93\u5165\u6570\u636e\u4e00\u8d77\u4f20\u9012\u3002\\n\\n\u7531\u4e8e\u53ea\u6709\u673a\u5668\u5e94\u8be5\u6700\u521d\u786e\u5b9a `context`\uff0c\u8fd9\u5e76\u4e0d\u7406\u60f3\uff0c\u56e0\u4e3a\u53ef\u80fd\u4f1a\u5728\u67d0\u4e2a\u4e0d\u53ef\u80fd\u7684\u72b6\u6001\u4e0b\u521d\u59cb\u5316\u673a\u5668\u3002\u6b64\u5916\uff0c\u60a8\u53ef\u80fd\u5e0c\u671b\u5c06\u67d0\u4e9b `context` \u5c5e\u6027\u89c6\u4e3a _\u79c1\u6709_\uff08\u673a\u5668\u5185\u90e8\uff09\u4e14\u4e0d\u53ef\u5916\u90e8\u914d\u7f6e\u3002\\n\\n\u5728 XState v5 \u4e2d\uff0c\u60a8\u73b0\u5728\u53ef\u4ee5\u901a\u8fc7\u5c06\u8f93\u5165\u6570\u636e\u4f5c\u4e3a\u7b2c\u4e8c\u4e2a\u53c2\u6570\u4f20\u9012\u7ed9 `createActor(machine, { input })` \u6765\u4e3a\u673a\u5668\u63d0\u4f9b\u8f93\u5165\u6570\u636e\u3002\u673a\u5668\u53ef\u4ee5\u5728 `context` \u521d\u59cb\u5316\u51fd\u6570\u4e2d\u8bfb\u53d6\u8fd9\u4e9b\u8f93\u5165\u6570\u636e\uff1a\\n\\n```ts\\nconst greetingMachine = createMachine({\\n  context: ({ input }) => ({\\n    greeting: `Hello, ${input.name}!`,\\n  }),\\n});\\n\\nconst greetingActor = createActor(greetingMachine, {\\n  input: {\\n    name: \'David\',\\n  },\\n});\\n```\\n\\n\u6b64\u5916\uff0c\u8fd9\u9002\u7528\u4e8e\u4efb\u4f55 actor \u903b\u8f91\uff0c\u800c\u4e0d\u4ec5\u4ec5\u662f\u72b6\u6001\u673a\uff1a\\n\\n```ts\\nconst promiseLogic = fromPromise(({ input }) =>\\n  fetch(`https://api.example.com/users/${input.id}`).then((res) => res.json()),\\n);\\n\\n// \u72ec\u7acb\u7684 promise actor\\nconst promiseActor = createActor(promiseLogic, {\\n  input: {\\n    id: 42,\\n  },\\n});\\n\\n// \u4ece\u4e00\u4e2a\u673a\u5668\\nconst machine = setup({\\n  actors: { promiseLogic }\\n}).createMachine({\\n  invoke: {\\n    src: \'promiseLogic\',\\n    input: {\\n      id: 42,\\n    },\\n  }\\n})\\n```\\n\\nactors \u8fd8\u53ef\u4ee5\u6709 [output](/docs/output)\uff0c\u5b83\u8868\u793a\u5b83\u4eec\u5230\u8fbe\u6700\u7ec8\u72b6\u6001\u65f6\u7684\u201c\u5b8c\u6210\u6570\u636e\u201d\u3002\u4e0d\u4ec5\u4ec5\u662f\u72b6\u6001\u673a\u53ef\u4ee5\u6709\u8f93\u51fa\uff1bpromise \u903b\u8f91\u81ea\u7136\u4f1a\u4ea7\u751f\u8f93\u51fa\uff0c\u5e76\u4e14\u5c06\u6765\u53ef\u80fd\u4e3a\u5176\u4ed6 actor \u903b\u8f91\u7c7b\u578b\u6307\u5b9a\u8f93\u51fa\u3002\\n\\n[\u9605\u8bfb\u66f4\u591a\u5173\u4e8e input \u7684\u4fe1\u606f](/docs/input)\u3001[output](/docs/output) \u548c [context \u7684\u4fe1\u606f](/docs/context)\u3002\\n\\n```ts\\nconst processMachine = createMachine({\\n  id: \'some-process\',\\n  initial: \'pending\',\\n  context: {/* ... */},,\\n  states: {\\n    pending: {/* ... */},\\n    transforming: {/* ... */},\\n    done: {\\n      type: \'final\'\\n    },\\n  },\\n  // highlight-start\\n  output: ({ context }) => ({\\n    status: 200,\\n    result: context.transformedData,\\n  })\\n  // highlight-end\\n});\\n```\\n\\n## \u66f4\u5f3a\u7684\u7c7b\u578b\u63a8\u65ad\\n\\nXState \u7684\u4e00\u4e2a\u6700\u5927\u9700\u6c42\u662f\u6539\u8fdb TypeScript \u4f53\u9a8c\u3002\u8003\u8651\u5230\u72b6\u6001\u56fe\uff08\u5206\u5c42\u72b6\u6001\u673a\uff09\u7684\u5076\u7136\u590d\u6742\u6027\uff0c\u4ee5\u53ca\u9700\u8981\u4ee5\u58f0\u660e\u65b9\u5f0f\u8868\u793a\u5b83\u4eec\uff0c\u4ee5\u4fbf\u53ef\u4ee5\u53ef\u89c6\u5316\u3001\u9759\u6001\u5206\u6790\u548c\u5f3a\u7c7b\u578b\u5316\uff0c\u8fd9\u5e76\u975e\u6613\u4e8b\u3002\u4efb\u4f55\u4e00\u4e2a\u8fd9\u4e9b\u7ea6\u675f\u90fd\u5df2\u7ecf\u5f88\u96be\uff1b\u6240\u6709\u4e09\u4e2a\u7ea6\u675f\u51e0\u4e4e\u662f\u4e0d\u53ef\u80fd\u7684\u3002\\n\\nMateusz Burzy\u0144ski \u62ef\u6551\u4e86\u6211\u4eec\uff0c\u4ed6\u4e0d\u4ec5\u5728 XState \u4e2d\u5c55\u793a\u4e86\u4ee4\u4eba\u96be\u4ee5\u7f6e\u4fe1\u7684 TypeScript \u5de5\u7a0b\u548c\u9b54\u6cd5\uff0c\u8fd8\u76f4\u63a5\u5bf9 TypeScript \u672c\u8eab\u505a\u51fa\u4e86\u91cd\u8981\u8d21\u732e\uff01\u65b0\u7684 **setup API** \u662f\u4e00\u4e2a\u771f\u6b63\u7a81\u663e\u8fd9\u4e9b\u6539\u8fdb\u7684\u9886\u57df\uff1a\\n\\n```jsx\\nimport { setup, fromPromise } from \'xstate\';\\n\\nconst getChatCompletion = fromPromise(async () => { ... });\\nconst processResult = fromPromise(async () => { ... });\\nconst sendToDiscord = fromPromise(async () => { ... });\\n\\nconst machine = setup({\\n  actors: {\\n    getChatCompletion,\\n    processResult,\\n    sendToDiscord\\n  }\\n}).createMachine({\\n  // ...\\n  states: {\\n    thinking: {\\n      invoke: {\\n        // \u5b57\u7b26\u4e32\u6e90\u5f3a\u7c7b\u578b\uff01\\n        src: \'getChatCompletion\',\\n        onDone: {\\n          target: \'processing\',\\n            actions: assign({\\n              // event.output \u5f3a\u7c7b\u578b\uff01\\n              completion: ({ event }) => event.output\\n            })\\n        }\\n      }\\n    },\\n    processing: {\\n      invoke: { src: \'processResult\', /** ... **/ }\\n    },\\n    sending: {\\n      invoke: { src: \'sendToDiscord\', /** ... **/ }\\n    },\\n    done: { type: \'final\' }\\n  }\\n});\\n```\\n\\n\u4f7f\u7528 [`setup(...)`](/docs/machines#providing-implementations)\uff0c\u60a8\u4e0d\u518d\u9700\u8981\u505a\u53cc\u91cd\u5de5\u4f5c\u6765\u6307\u5b9a actors\u3001actions\u3001guards\u3001delays \u7b49\u7684\u7c7b\u578b **\u5e76\u4e14** \u4e4b\u540e\u518d\u63d0\u4f9b\u5b83\u4eec\uff1b\u53ea\u9700\u5728 `setup(...)` \u51fd\u6570\u4e2d\u5b8c\u6210\u8fd9\u4e9b\u64cd\u4f5c\uff0c\u7c7b\u578b\u5c31\u4f1a\u81ea\u52a8\u6d41\u52a8\u3002\u8fd9\u4e5f\u66f4\u52a0\u5b89\u5168\uff0c\u56e0\u4e3a\u60a8\u53ef\u4ee5\u4fdd\u8bc1\u8fd9\u4e9b\u5b9e\u73b0\u5b58\u5728\uff0c\u800c\u4e0d\u662f\u5e0c\u671b\u5b83\u4eec\u5b58\u5728\uff08\u6216\u4f9d\u8d56\u4e8e typegen\uff09\u5728\u4e4b\u540e\u63d0\u4f9b\u3002\\n\\nsetup API \u8fd8\u542f\u7528\u4e86\u53e6\u4e00\u4e2a\u795e\u5947\u7684\u529f\u80fd\uff1a**\u5f3a\u7c7b\u578b\u7684\u72b6\u6001\u503c** \u2728\\n\\n```ts\\nconst machine = setup({\\n  // ...\\n}).createMachine({\\n  initial: \'green\',\\n  states: {\\n    green: {/* ... */},\\n    yellow: {/* ... */},\\n    red: {\\n      initial: \'walk\',\\n      states: {\\n        walk: {/* ... */},\\n        run: {/* ... */},\\n        stop: {/* ... */}\\n      }\\n    }\\n  }\\n});\\n\\nconst actor = createActor(machine)\\nactor.start();\\n\\n// \u5f3a\u7c7b\u578b\u7684\u72b6\u6001\u503c\uff01\\n// \u81ea\u52a8\u8865\u5168\u5c06\u663e\u793a\uff1a\\n// - \'green\'\\n// - \'yellow\'\\n// - \'red\'\\n// - { red: \'walk\' }\\n// - { red: \'run\' }\\n// - { red: \'stop\' }\\nactor.getSnapshot().matches(\'green\');\\n```\\n\\n[\u9605\u8bfb\u66f4\u591a\u5173\u4e8e `setup(...)` \u7684\u4fe1\u606f](/docs/machines#providing-implementations)\u3002\\n\\n## \u52a8\u6001\u53c2\u6570\\n\\n\u5728\u7c7b\u578b\u6539\u8fdb\u7684\u4e3b\u9898\u4e0a\uff0c\u52a8\u6001 action \u548c guard \u53c2\u6570\u73b0\u5728\u4f7f\u5f97\u521b\u5efa\u72ec\u7acb\u4e8e\u72b6\u6001\u673a\u7684\u5f3a\u7c7b\u578b action \u548c guard \u5b9e\u73b0\u6210\u4e3a\u53ef\u80fd\uff1a\\n\\n```ts\\nconst machine = setup({\\n  actions: {\\n    greet: (_, params: { name: string }) => {\\n      console.log(`Hello, ${params.name}!`);\\n    }\\n  },\\n  guards: {\\n    isGreaterThan: (_, params: { value: number; min: number }) => {\\n      return params.value > params.min;\\n    }\\n  }\\n}).createMachine({\\n  context: ({ input }) => ({\\n    user: input.user,\\n    count: 0\\n  }),\\n  entry: {\\n    type: \'greet\',\\n    // highlight-start\\n    params: ({ context }) => ({\\n      name: context.user.name\\n    })\\n    // highlight-end\\n  },\\n  on: {\\n    dec: {\\n      guard: {\\n        type: \'isGreaterThan\',\\n        // highlight-start\\n        params: ({ context, event }) => ({\\n          value: context.count,\\n          min: 0\\n        })\\n        // highlight-end\\n      }\\n    }\\n  }\\n});\\n```\\n\\n\u8fd9\u6d88\u9664\u4e86\u52a8\u4f5c\u5b9e\u73b0\u4e0e\u673a\u5668\u7684\u8026\u5408\uff0c\u5e76\u5141\u8bb8\u66f4\u7075\u6d3b\u5730\u4f7f\u7528\u5b83\u4eec\u3002\u5b83\u8fd8\u51cf\u5c11\u4e86\u5bf9\u7c7b\u4f3c typegen \u7684\u4f9d\u8d56\uff0c\u56e0\u4e3a\u6211\u4eec\u4e0d\u518d\u9700\u8981\u9884\u6d4b\u52a8\u4f5c\u53ef\u4ee5\u8c03\u7528\u7684\u53ef\u80fd `context` \u6216 `event` \u7c7b\u578b\u3002\\n\\n## \u6392\u961f\u52a8\u4f5c\\n\\n`enqueueActions()` \u52a8\u4f5c\u521b\u5efa\u5668\u4f7f\u5f97\u5728\u5355\u4e2a\u52a8\u4f5c\u521b\u5efa\u5668\u4e2d\u534f\u8c03\u590d\u6742\u52a8\u4f5c\u53d8\u5f97\u66f4\u52a0\u5bb9\u6613\u3002\u53ef\u4ee5\u5c06\u5176\u89c6\u4e3a `pure()` \u548c `choose()` \u7684\u66f4\u76f4\u89c2\u7ec4\u5408\uff0c\u5b83\u4eec\u73b0\u5728\u88ab\u8fd9\u4e2a\u65b0\u7684\u52a8\u4f5c\u521b\u5efa\u5668\u6240\u53d6\u4ee3\uff1a\\n\\n```ts\\nconst machine = createMachine({\\n  // ...\\n  entry: enqueueActions(({ context, event, enqueue, check }) => {\\n    // \u8d4b\u503c\u52a8\u4f5c\\n    enqueue.assign({\\n      count: context.count + 1\\n    });\\n\\n    // \u6761\u4ef6\u52a8\u4f5c\uff08\u66ff\u4ee3 choose(...)\uff09\\n    if (event.someOption) {\\n      enqueue.sendTo(\'someActor\', { type: \'blah\', thing: context.thing });\\n\\n      // \u5176\u4ed6\u52a8\u4f5c\\n      enqueue(\'namedAction\');\\n      // \u5e26\u53c2\u6570\\n      enqueue({ type: \'greet\', params: { message: \'hello\' } });\\n    } else {\\n      // \u5185\u8054\\n      enqueue(() => console.log(\'hello\'));\\n\\n      // \u751a\u81f3\u5185\u7f6e\u52a8\u4f5c\\n    }\\n\\n    // \u4f7f\u7528 check(...) \u57fa\u4e8e\u5b88\u536b\u6761\u4ef6\u6027\u5730\u6392\u961f\u52a8\u4f5c\\n    if (check({ type: \'someGuard\' })) {\\n      // ...\\n    }\\n\\n    // \u65e0\u8fd4\u56de\u503c\\n  })\\n});\\n```\\n\\n\u8fd9\u662f\u4e00\u4e2a\u66f4\u81ea\u7136\u7684\u7f16\u5199\u6548\u679c\u7684\u65b9\u6cd5\uff0c\u56e0\u4e3a\u60a8\u53ef\u4ee5\u4f7f\u7528\u666e\u901a\u7684 JavaScript \u6765\u6784\u5efa\u6548\u679c\u3002[\u5728\u6211\u4eec\u7684\u8fc1\u79fb\u6307\u5357\u4e2d\u9605\u8bfb\u66f4\u591a\u5173\u4e8e `enqueueActions()` \u52a8\u4f5c\u521b\u5efa\u5668\u7684\u4fe1\u606f](/docs/migration)\u3002\\n\\n## \u81ea\u5f15\u7528\\n\\n\u5728\u60a8\u53ef\u4ee5\u5728 XState v5 \u673a\u5668\u914d\u7f6e\u4e2d\u63d0\u4f9b\u7684\u52a8\u6001\u51fd\u6570\u4e2d\uff0c\u73b0\u5728\u6709\u4e00\u4e2a `self` \u5c5e\u6027\u5f15\u7528 actor \u672c\u8eab\u3002\u8fd9\u4e3a actor \u901a\u4fe1\u542f\u7528\u4e86\u65b0\u7684\u3001\u7075\u6d3b\u7684\u6a21\u5f0f\uff0c\u56e0\u4e3a\u60a8\u53ef\u4ee5\u5728\u4e8b\u4ef6\u4e2d\u5c06\u6b64 `self` \u5f15\u7528\u4f20\u9012\u7ed9\u5176\u4ed6 actors\uff1a\\n\\n```ts\\nconst pingMachine = createMachine({\\n  invoke: {\\n    src: \'pong\',\\n    id: \'pong\',\\n  },\\n  on: {\\n    ping: {\\n      actions: sendTo(\'pong\', ({ self }) => ({ type: \'ping\', sender: self })),\\n    },\\n  },\\n});\\n\\n// ...\\n\\nconst pongMachine = createMachine({\\n  on: {\\n    ping: {\\n      actions: sendTo(({ event }) => event.sender, { type: \'pong\' }),\\n    },\\n  },\\n});\\n```\\n\\n[\u9605\u8bfb\u66f4\u591a\u5173\u4e8e `self` \u5c5e\u6027\u7684\u4fe1\u606f](/docs/migration)\u3002\\n\\n## \u9ad8\u9636\u5b88\u536b\\n\\n\u5728 XState v4 \u4e2d\uff0c\u5b88\u536b\u662f `.cond` \u8f6c\u6362\u5c5e\u6027\u4e0a\u7684\u7b80\u5355\u51fd\u6570\uff0c\u8fd4\u56de `true` \u6216 `false` \u4ee5\u786e\u5b9a\u662f\u5426\u91c7\u53d6\u8f6c\u6362\u3002\u8981\u5426\u5b9a\u5b88\u536b\u6216\u7ec4\u5408\u5b88\u536b\uff0c\u60a8\u5fc5\u987b\u521b\u5efa\u4e00\u4e2a\u65b0\u7684\u5b88\u536b\uff0c\u8fd9\u4f1a\u5bfc\u81f4\u4ee3\u7801\u91cd\u590d\u6216\u5197\u4f59\u3002\u5728 XState v5 \u4e2d\uff0c\u60a8\u73b0\u5728\u53ef\u4ee5\u4f7f\u7528 [\u9ad8\u9636\u5b88\u536b](/docs/guards/#higher-level-guards)\uff0c\u8fd9\u4e9b\u662f\u63a5\u53d7\u5b88\u536b\uff08\u5f15\u7528\u548c/\u6216\u5185\u8054\uff09\u5e76\u8fd4\u56de\u5b88\u536b\u51fd\u6570\u7684\u51fd\u6570\u3002\u6709 3 \u4e2a\u5185\u7f6e\u7684\u9ad8\u9636\u5b88\u536b\u51fd\u6570\uff1a`and([...guards])`\u3001`or([...guards])` \u548c `not(guard)`\uff1a\\n\\n```ts\\nimport { setup, and, not } from \'xstate\';\\n\\nconst userMachine = setup({\\n  guards: {\\n    isAuthenticated: ({ context }) => context.user !== undefined,\\n    isAdmin: ({ context }) => context.user.role === \'admin\',\\n    isBanned: ({ context }) => context.user.status === \'banned\',\\n  }\\n}).createMachine({\\n  // ...\\n  on: {\\n    doSomething: {\\n      // \u9ad8\u9636\u5b88\u536b\\n      // \u4ece \\"cond\\" (v4) \u91cd\u547d\u540d\u4e3a \\"guard\\" (v5)\\n      guard: and([\'isAuthenticated\', \'isAdmin\', not(\'isBanned\')]),\\n    },\\n  },\\n});\\n```\\n\\n\u8fd9\u4e9b\u9ad8\u9636\u5b88\u536b\u53ef\u4ee5\u4ee5\u591a\u79cd\u4e0d\u540c\u7684\u65b9\u5f0f\u7ec4\u5408\uff0c\u4ee5\u8868\u8fbe\u4efb\u4f55\u590d\u6742\u7684\u6761\u4ef6\u3002\u672a\u6765\uff0c[Stately Studio](/docs/studio) \u5c06\u80fd\u591f\u53ef\u89c6\u5316\u5b88\u536b\u4e2d\u8868\u8fbe\u7684\u590d\u6742\u6761\u4ef6\u903b\u8f91\u3002[\u5728\u6211\u4eec\u7684\u6587\u6863\u4e2d\u9605\u8bfb\u66f4\u591a\u5173\u4e8e\u9ad8\u9636\u5b88\u536b\u7684\u4fe1\u606f](/docs/guards/#higher-level-guards)\u3002\\n\\n## \u90e8\u5206\u4e8b\u4ef6\u63cf\u8ff0\u7b26\\n\\n\u90e8\u5206\u4e8b\u4ef6\u63cf\u8ff0\u7b26\uff0c\u4e5f\u79f0\u4e3a _\u90e8\u5206\u901a\u914d\u7b26_\uff0c\u662f XState v5 \u4e2d\u7684\u4e00\u4e2a\u5f3a\u5927\u65b0\u529f\u80fd\uff0c\u4f7f\u5904\u7406\u4e8b\u4ef6\u7ec4\u53d8\u5f97\u66f4\u52a0\u5bb9\u6613\u3002\u5728 XState v4 \u4e2d\uff0c\u60a8\u53ef\u4ee5\u4f7f\u7528\u901a\u914d\u7b26\u6765\u5904\u7406\u4efb\u4f55\u672a\u88ab\u5176\u4ed6\u8f6c\u6362\u5339\u914d\u7684\u4e8b\u4ef6\uff0c\u4f46\u60a8\u5fc5\u987b\u5c0f\u5fc3\u4e0d\u8981\u610f\u5916\u5904\u7406\u4e0d\u6253\u7b97\u5904\u7406\u7684\u4e8b\u4ef6\u3002\u5728 XState v5 \u4e2d\uff0c\u60a8\u53ef\u4ee5\u4f7f\u7528\u90e8\u5206\u4e8b\u4ef6\u63cf\u8ff0\u7b26\u901a\u8fc7\u5728\u5206\u9694\u7b26\u540e\u653e\u7f6e\u901a\u914d\u7b26 (`.*`) \u6765\u5904\u7406\u4e8b\u4ef6\u7ec4\uff0c\u5e76\u4e14\u53ef\u4ee5\u660e\u786e\u60a8\u60f3\u8981\u5904\u7406\u7684\u4e8b\u4ef6\uff1a\\n\\n```ts\\nconst machine = createMachine({\\n  // ...\\n  on: {\\n    // \u5c06\u5904\u7406\u4efb\u4f55\u4ee5 \\"pointer.\\" \u5f00\u5934\u7684\u4e8b\u4ef6\uff1a\\n    // \\"pointer.down\\", \\"pointer.up\\", \\"pointer.move\\" \u7b49\u7b49\u3002\\n    \'pointer.*\': {\\n      actions: \'logPointerEvent\',\\n    },\\n  },\\n});\\n```\\n\\n[\u5728\u6211\u4eec\u7684\u6587\u6863\u4e2d\u9605\u8bfb\u66f4\u591a\u5173\u4e8e\u90e8\u5206\u4e8b\u4ef6\u63cf\u8ff0\u7b26\u7684\u4fe1\u606f](/docs/transitions#partial-wildcard-transitions)\u3002\\n\\n\u54e6\uff0c\u987a\u4fbf\u8bf4\u4e00\u53e5\uff0c\u5b83\u4eec\u662f\u7c7b\u578b\u5b89\u5168\u7684\uff01\ud83c\udf89\\n\\n## \u8fc1\u79fb\u548c\u91cd\u5927\u53d8\u5316\\n\\n\u4e0e\u4efb\u4f55\u4e3b\u8981\u7248\u672c\u4e00\u6837\uff0c\u6709\u4e00\u4e9b\u91cd\u5927\u53d8\u5316\u3002\u6211\u4eec\u5c3d\u91cf\u5c06\u8fd9\u4e9b\u53d8\u5316\u4fdd\u6301\u5728\u6700\u4f4e\u9650\u5ea6\uff0c\u4f46\u6709\u4e9b\u662f\u5fc5\u8981\u7684\uff0c\u4ee5\u4f7f XState v5 \u5c3d\u53ef\u80fd\u5f3a\u5927\u3001\u7075\u6d3b\u3001\u7b80\u5355\u548c\u5f3a\u7c7b\u578b\u5316\u3002[\u9605\u8bfb\u6211\u4eec\u7684\u6307\u5357\uff0c\u4e86\u89e3\u4ece XState v4 \u8fc1\u79fb\u5230 v5 \u7684\u65b9\u6cd5\u4ee5\u53ca\u91cd\u5927\u53d8\u5316\u7684\u5217\u8868](https://stately.ai/docs/migration)\u3002\\n\\n\u6700\u5927\u7684\u53d8\u5316\u4e4b\u4e00\u662f\u5c06\u51fd\u6570\u53c2\u6570\u5408\u5e76\u4e3a\u5355\u4e2a\u201c\u7edf\u4e00\u53c2\u6570\u201d\u3002\u5b9e\u73b0\u51fd\u6570\u4ee5\u524d\u9700\u8981\u591a\u4e2a\u53c2\u6570\uff0c\u8fd9\u4f7f\u5f97\u8bb0\u4f4f\u4f7f\u7528\u54ea\u4e2a\u53c2\u6570\u6216\u5ffd\u7565\u67d0\u4e9b\u53c2\u6570\u53d8\u5f97\u56f0\u96be\u3002\u5728 XState v5 \u4e2d\uff0c\u6240\u6709\u5b9e\u73b0\u51fd\u6570\u73b0\u5728\u90fd\u63a5\u53d7\u4e00\u4e2a\u5355\u4e00\u7684\u7edf\u4e00\u53c2\u6570\u5bf9\u8c61\uff0c\u8be5\u5bf9\u8c61\u5305\u542b `context`\u3001`event` \u548c\u5176\u4ed6\u4e0e\u5b9e\u73b0\u51fd\u6570\u76f8\u5173\u7684\u5c5e\u6027\uff1a\\n\\n```ts\\nconst machine = createMachine({\\n  context: {\\n    count: 0,\\n  },\\n  on: {\\n    increment: {\\n      // highlight-start\\n      // \u5355\u4e2a\u53c2\u6570\uff0c\u800c\u4e0d\u662f\uff1a\\n      // guard: (_, event) => ...\\n      guard: ({ event }) => !Number.isNaN(event.value),\\n      // \u5355\u4e2a\u53c2\u6570\uff0c\u800c\u4e0d\u662f\uff1a\\n      // actions: (context, event) => ...\\n      actions: ({ context, event }) => {\\n        console.log(context, event);\\n      },\\n      // highlight-end\\n    },\\n  },\\n});\\n```\\n\\n## Stately Studio \u5bf9 v5 \u7684\u652f\u6301\\n\\n\u73b0\u5728 XState v5 API \u7ec8\u4e8e\u7a33\u5b9a\u4e86\uff0c\u6211\u4eec\u6b63\u5728\u52aa\u529b\u5728 [Stately Studio](https://stately.ai/editor) \u4e2d\u6dfb\u52a0\u5bf9\u6240\u6709\u65b0\u529f\u80fd\u548c\u66f4\u65b0\u7684\u652f\u6301\u3002\u76ee\u524d\uff0cStudio \u5df2\u7ecf\u53ef\u4ee5\u5bfc\u5165\u548c\u5bfc\u51fa XState v5 \u4ee3\u7801\u3002\u5373\u5c06\u63a8\u51fa\u7684\u662f\u5bf9 `input`\u3001`output` \u548c action/guard \u53c2\u6570\u7684\u652f\u6301\u3002\u4e3a\u4e86\u7ed9\u60a8\u5b8c\u5168\u7684\u63a7\u5236\u6743\uff0c\u6211\u4eec\u8fd8\u5373\u5c06\u53d1\u5e03\u7528\u4e8e actions\u3001actors\u3001guards \u7b49\u7684 Studio \u5185\u4ee3\u7801\u7f16\u8f91\u5668\u3002\u901a\u8fc7 Stately AI\uff0c\u60a8\u751a\u81f3\u53ef\u4ee5\u751f\u6210\u4efb\u4f55\u60a8\u60f3\u8981\u5b9e\u73b0\u7684\u4ee3\u7801\uff0c\u5b8c\u5168\u7b26\u5408 XState v5 \u4ee3\u7801\u3002\\n\\n\u4e3a\u4e86\u5e86\u795d XState v5 \u7684\u53d1\u5e03\uff0c\u4f7f\u7528\u4ee3\u7801 `XSTATEV5` \u53ef\u4eab\u53d7 [Stately Pro \u8ba2\u9605](https://stately.ai/pricing) 35% \u7684\u6298\u6263\uff0c\u5e76\u89e3\u9501 Stately Studio \u4e2d\u7684\u4f17\u591a\u7cbe\u5f69\u4e13\u4e1a\u529f\u80fd\u3002\\n\\n## \u672a\u6765\u8ba1\u5212\u548c\u60f3\u6cd5\\n\\n\u8fd9\u4e0d\u662f\u6211\u4eec\u7684\u6700\u7ec8\u72b6\u6001\u3002XState v5 \u8fd8\u6709\u66f4\u591a\u7684\u529f\u80fd\u548c\u6539\u8fdb\uff0c\u4f8b\u5982\uff1a\\n\\n- [\u4e00\u4e2a `toPromise()` \u8f85\u52a9\u51fd\u6570](https://github.com/statelyai/xstate/pull/4198)\uff0c\u7528\u4e8e\u5c06 actors \u8f6c\u6362\u4e3a\u53ef\u7b49\u5f85\u7684 promises\\n- [\u57fa\u4e8e\u6b65\u9aa4\u7684\u5f02\u6b65\u903b\u8f91](https://github.com/statelyai/xstate/pull/4190)\uff0c\u7528\u4e8e\u5728 promise actors \u4e2d\u5efa\u6a21\u6b65\u9aa4\\n- [\u53ef\u8def\u7531\u72b6\u6001](https://github.com/statelyai/xstate/pull/4184)\uff0c\u7528\u4e8e\u5728\u4efb\u4f55\u65f6\u5019\u663e\u5f0f\u5efa\u6a21\u76f4\u63a5\u8f6c\u6362\u5230\u7279\u5b9a\u72b6\u6001\uff08\u5bf9\u8def\u7531\u5f88\u6709\u7528\uff09\\n- Typestates\uff0c\u7528\u4e8e\u5728\u7279\u5b9a\u72b6\u6001\u4e0b\u7ea6\u675f `context` \u7c7b\u578b"},{"id":"2023-11-28-koordinates-and-stately-case-study","metadata":{"permalink":"/xstate-zh/blog/2023-11-28-koordinates-and-stately-case-study","editUrl":"https://github.com/statelyai/docs/edit/main/blog/2023-11-28-koordinates-and-stately-case-study/index.mdx","source":"@site/blog/2023-11-28-koordinates-and-stately-case-study/index.mdx","title":"Koordinates x Stately: geospatial data management case study","description":"Making geographic information systems accessible and collaborative. A Stately and Koordinates case study.","date":"2023-11-28T00:00:00.000Z","formattedDate":"November 28, 2023","tags":[{"label":"case study","permalink":"/xstate-zh/blog/tags/case-study"},{"label":"study","permalink":"/xstate-zh/blog/tags/study"},{"label":"koordinates","permalink":"/xstate-zh/blog/tags/koordinates"},{"label":"stately","permalink":"/xstate-zh/blog/tags/stately"},{"label":"state machines","permalink":"/xstate-zh/blog/tags/state-machines"},{"label":"machines","permalink":"/xstate-zh/blog/tags/machines"},{"label":"gis","permalink":"/xstate-zh/blog/tags/gis"},{"label":"geospatial","permalink":"/xstate-zh/blog/tags/geospatial"}],"readingTime":5.375,"hasTruncateMarker":true,"authors":[{"name":"Gavin Bauman","title":"Stately Team","url":"https://github.com/gavination","imageURL":"https://ascelcgzufjyvdzuplwo.supabase.co/storage/v1/object/public/avatars/gavin.png","key":"gavin"}],"frontMatter":{"title":"Koordinates x Stately: geospatial data management case study","description":"Making geographic information systems accessible and collaborative. A Stately and Koordinates case study.","authors":["gavin"],"tags":["case study","study","koordinates","stately","state machines","machines","gis","geospatial"],"date":"2023-11-28T00:00:00.000Z","slug":"2023-11-28-koordinates-and-stately-case-study","image":"/blog/2023-11-28-koordinates-and-stately-case-study.png"},"unlisted":false,"prevItem":{"title":"XState v5 \u53d1\u5e03\u4e86","permalink":"/xstate-zh/blog/2023-12-01-xstate-v5"},"nextItem":{"title":"Changelog for our biggest release yet","permalink":"/xstate-zh/blog/2023-11-23-stately-studio-2-0-changelog"}},"content":"When it came to navigating the complexities of business context and application state, Koordinates found their solution in Stately\'s tools, reshaping their coding practices and ensuring a seamless user experience.\\n{/* truncate */}\\n\\n\\n\\nFor more than 15 years, the team at [Koordinates](https://koordinates.com/) has been hard at work reimagining and building streamlined and equitable ways for customers to manage geospatial data. Koordinates have built a massively scaled GIS (Geographic Information Systems) platform for users to upload their own data, query over 18,000 open datasets, and securely merge openly available data with proprietary information.\\nUnlike competing products that require vendor lock-in and lack compatibility across the entire GIS stack, Koordinates\u2019 offerings are modular: users may use as much or as little of the tooling as they like, and the tooling is interoperable with existing GIS environments.\\n\\n<p>\\n  <ThemedImage\\n    alt=\\"Koordinates logo\\"\\n    sources={{\\n      light: \'/blog/2023-11-28-koordinates-and-stately-case-study/koordinates_logo_black.png\',\\n      dark: \'/blog/2023-11-28-koordinates-and-stately-case-study/koordinates_logo_white.png\',\\n    }}\\n  />\\n</p>\\n\\n## UI state management\\n\\nKoordinates provide their users with both a web app, named Koordinates Cloud, as well as an Electron-based desktop app. In order to filter through and query such large datasets, the team naturally needed to expose a lot of controls for end-user functionality. The frontends for the apps allow end users to accomplish complex tasks, like:\\n\\n- **searching** for the right data via the Browser\\n- **visualizing** relevant geospatial information in the Map Viewer\\n- **automating** data management with workflows in the Data Manager\\n\\nManaging context and application state was a core concern for the team, and for determining the best framework to manage complex state, they turned to XState.\\n\\n## Repository state management\\n\\nThe desktop app Koordinates provides also ships with **[Kart](https://github.com/koordinates/kart),** an open source version control platform built specifically for large geospatial datasets. Being built on top of Git, Kart provides a familiar user experience for developers used to the version control system. Specifically, Kart allows users to:\\n\\n- **clone** geospatial data to users\u2019 local machines\\n- **manage** branches for their datasets - creating, merging, and deleting them\\n- **roll back** branches to previous commits, preserving changes made over time\\n\\nIn the case of Kart, many of these operations can be long-running and have several edge cases, making Stately\u2019s tooling to visualize, understand, and execute logic from stateful diagrams a massive benefit.\\n\\n## Breaking complex UI\u2019s into manageable components\\n\\nIn the case of both their products, Koordinates was able to use Stately\u2019s tooling to break their \u201cbig\u201d problems down into several, distinct smaller ones. Taylor Lodge, an engineer on the core team, explained that with Sta tely\u2019s visual editor and simulation tooling, they were able to break their application logic into several small, testable state machines. For example, the UI for Koordinates Cloud has several components, but the logic for loading elements in their list view is represented rather succinctly in this state machine: \\n\\n\\n<EmbedMachine\\n  name=\\"Koordinates List View Machine\\"\\n  embedURL=\\"https://stately.ai/registry/editor/embed/1b48bbf1-6f7a-4847-b1e0-47ee5c283371?machineId=68b835cc-49fc-4b9c-972e-a63c01465c1f\\"/>\\n\\nThere are several potential events that _can_ happen, but the core states are relatively few to model this behavior. Instead of representing their entire app state in a monolith, the team decided to go with a more modular approach, making use of the [actor model](https://en.wikipedia.org/wiki/Actor_model). This makes maintaining and testing individual components much easier, and it allows for extensibility down the line as project complexity grows.\\n\\nHandling several logical components does come with some considerations, however. Taylor noted that now that the team had several small components, they needed a way to orchestrate and communicate between them in a cohesive manner. Thankfully, the [XState](https://github.com/statelyai/xstate) framework for composing machines is open source, and the team used it as their base for [`xstate-tree`, an open source framework](https://github.com/koordinates/xstate-tree) for modeling complex UIs as a tree of XState machines. `xstate-tree` couples React views with state machines and composes them as actors in \u201cslots\u201d, allowing them to be exposed to their respective React views. Learn more about all the features `xstate-tree` provides in their [well-documented GitHub repo](https://github.com/koordinates/xstate-tree).\\n\\nWhile there are other state management platforms for developers, the team at Koordinates also wanted the ability to co-locate their implementation logic alongside their machines\u2019 definitions, or \u201cblueprints\u201d. This reduces the surface area developers when revisions need to made to their machines. From Taylor: \\n\\n> \u201cI love the first class support in XState for side effects. That the side effects can be co-located with my code that triggers it and uses it, instead of having to put them _somewhere else_ like with Redux\u201d\\n\\n\\n## Handling complex, long-running tasks and edge cases\\n\\nBeing a source control solution for complex datasets, Kart has a naturally complex set of problems to solve as well. Merging, cloning, and loading data all have plenty of considerations, edge cases, and possible failure scenarios, so the team had to take care to address all of them. The ability to map this logic using the Stately Editor proved to be extremely useful.\\n\\n<EmbedMachine\\n  name=\\"Koordinates List View Machine\\"\\n  embedURL=\\"https://stately.ai/registry/editor/embed/1b48bbf1-6f7a-4847-b1e0-47ee5c283371?machineId=afa23e5f-11c7-460d-bd98-ff7de694a41d\\"/>\\n\\nStately tooling isn\u2019t just for managing UI state. In fact, the logic representing Kart repos is all managed using an XState actor. That actor then watches the filesystem to execute Kart-specific commands and update its own in-memory state. \\n\\nTaylor and the team love Stately\u2019s visual editor. Even without domain knowledge of their core product, the logic is still human readable and understandable. Questions like \u201cwhat happens when a user cancels a clone operation?\u201d and \u201cwhen is the data model for branches updated?\u201d are easily answered by reading the diagram. Diagramming logic in this way ensured the team was able to build Kart\u2019s functionality in a way that is inherently less prone to bugs and plan for potential errors where possible without wasting time over-engineering for cases that could never occur.\\n\\n## Moving forward with Stately\\n\\nBy building with Stately\u2019s tooling, the Koordinates team not only simplified their UI and repository state management, but they in turn gave back to the technical community with `xstate-tree`, allowing React developers to better wrangle hosts of machines. Koordinates and Stately are aligned on many core goals: enhancing productivity for their users, strongly committing to open source, and facilitating team collaboration. Naturally, the Stately team was eager for feedback and have committed to the development of features that enhance collaboration without compromise. This includes GitHub synchronization to maintain the repo as the authoritative source and system-wide statechart visualization to facilitate deeper interdisciplinary communication and understanding. \\n\\nKoordinates saw a significant leap in efficiency and team collaboration with Stately\'s tools. [Book a demo with us today](https://calendly.com/d/yc8-3hq-rpc/request-a-demo) to learn how Stately can empower your team to build better software, faster."},{"id":"2023-11-23-stately-studio-2-0-changelog","metadata":{"permalink":"/xstate-zh/blog/2023-11-23-stately-studio-2-0-changelog","editUrl":"https://github.com/statelyai/docs/edit/main/blog/2023-11-23-stately-studio-2-0-changelog/index.mdx","source":"@site/blog/2023-11-23-stately-studio-2-0-changelog/index.mdx","title":"Changelog for our biggest release yet","description":"This week has seen us introduce some of our biggest features yet and plenty of small updates to improve your Stately experience.","date":"2023-11-23T00:00:00.000Z","formattedDate":"November 23, 2023","tags":[{"label":"changelog","permalink":"/xstate-zh/blog/tags/changelog"},{"label":"new","permalink":"/xstate-zh/blog/tags/new"}],"readingTime":5.03,"hasTruncateMarker":true,"authors":[{"name":"Laura Kalbag","title":"Stately Team","url":"https://github.com/laurakalbag","imageURL":"https://ascelcgzufjyvdzuplwo.supabase.co/storage/v1/object/public/avatars/laura.png","key":"laura"}],"frontMatter":{"title":"Changelog for our biggest release yet","description":"This week has seen us introduce some of our biggest features yet and plenty of small updates to improve your Stately experience.","authors":["laura"],"tags":["changelog","new"],"date":"2023-11-23T00:00:00.000Z","slug":"2023-11-23-stately-studio-2-0-changelog","image":"/blog/2023-11-23-stately-studio-2-0-changelog.png"},"unlisted":false,"prevItem":{"title":"Koordinates x Stately: geospatial data management case study","permalink":"/xstate-zh/blog/2023-11-28-koordinates-and-stately-case-study"},"nextItem":{"title":"Stately Studio 2.0","permalink":"/xstate-zh/blog/2023-11-20-stately-studio-2-0"}},"content":"This week has seen us introduce some of our biggest features yet and plenty of small updates to improve your Stately experience. Do you want to learn more about our vision for this release? Find out more in [David\u2019s latest blog post on Stately Studio 2.0](/blog/2023-11-20-stately-studio-2-0).\\n\\n{/* truncate */}\\n\\n## Stately Sky\\n\\nStately Sky is our new serverless platform for running workflows within the Studio. With Sky, you can now run your statecharts as live machines in minutes, complete with XState v5 actors and multiplayer support. Deploy your state machine as a workflow from the Deploy button in the editor\u2019s top bar. [Read more about Stately Sky in Gavin\u2019s blog post](/blog/2023-11-13-introducing-stately-sky).\\n\\n## Generate React app\\n\\nYou can also now generate a React app from your state machine. In the **Code** panel, use Generate React app to go from logic to prototype in seconds. Want a working React UI? Read on\u2026\\n\\n## Stately AI\\n\\nWe\u2019ve also added a whole host of features as part of Stately AI. You could already generate flows from text descriptions, and this is now faster and produces even better results with improved AI generation. You can now **Import** from XState, Redux, Redux Toolkit, and Zustand. Just paste your code into the import area, and Stately will import your XState state machine or convert and import your reducers and stores to get the benefits of state machines in non-state-machine code.\\n\\nAs well as now generating a React app from your state machine, you can enhance the UI using Stately AI for a working React UI. Once you\u2019ve generated your React app, use\xa0**Enhance UI**\xa0and choose your favorite from three generated UIs.\\n\\nAre you ready to share your state machine in your documentation? You can generate a summary for your machine with AI from the machine\xa0**Details**\xa0panel. Using the\xa0**Generate summary**\xa0button will create a summary you can use in your docs to quickly explain your logic to teammates or even as alternative text for images of the machine.\\n\\nOur Stately AI features are available to our Stately Pro users, but everyone gets a few free generations to try before upgrading.\\n\\n## Assets!\\n\\nWe\u2019ve supported images in state descriptions using markdown and links for a while. Now, you can drag to add multiple assets to any state. The first asset is shown on the canvas. Further assets are accessible from the state details panel, where you can also drag to reorder the assets. Once your asset is uploaded to your state, you can choose to display it in SM small, medium MD, large LG, or extra large XL sizes.\\n\\n## Targetless transitions\\n\\nAs a part of our improved support for XState in the Stately editor, the editor now supports targetless transitions. Targetless transitions are helpful when you want a transition on your root state but don\u2019t want to keep resetting your machine to the initial state. They also allow multiple target state support in the future, which is handy if you want to transition to simultaneous parallel states.\\n\\n## Zoom to selection\\n\\nYou can now\xa0**zoom to selected**\xa0to re-center the canvas from the zoom menu, machine structure list, or the right-click menu. You can also zoom to selected with the `Shift` + `2` keyboard shortcut. This zoom is particularly helpful when working with large machines and demoing your machines to others, enabling you to jump to a different canvas area swiftly.\\n\\n## Improved UI\\n\\nStately Studio 2.0 comes with an improved UI, making it easier to access tools and information about your machine with minimal clicks.\\n\\nOne of the first big changes you\u2019ll notice is that the **Code** panel is now on the left side of the canvas, alongside the **Structure** panel. This means you can now have the **Code** and right panels open simultaneously.\\n\\nIn the header, you will now find **Save** and **Clear** buttons on starter machines to help you swiftly accomplish these common tasks. And the **Simulate** button is now in the top right corner, alongside Stately Sky\u2019s Deploy button. When a machine is locked, its locked status will now be displayed in the top middle of the header, and you can quickly unlock it from there. (If you need to lock the machine again, you can do so from the machine Details panel.)\\n\\nYour project\u2019s name is now listed in the header along with the machine name, and clicking the project name will open and close the Project\u2019s machines list in the left sidebar. You can now reach **My Projects** from this sidebar or the editor menu.\\n\\nYour user avatar menu is now simplified and can be found at the top of the project\'s sidebar. The menu options previously located in the user avatar menu can now be found in the editor menu:\\n\\n- The dark mode/light mode and translucency options are under the **Preferences** section.\\n- The account settings (including **My profile**, **Billing**, **Settings** and **Sign out**) are now under **Account**\\n- The **Changelog** is now found under Help.\\n\\nThe quick access menu that appears when you select a state or event now has one-click buttons to add actions on events and actions and invoked actors on states. You can also now right-click any state action to toggle it between an entry and an exit action.\\n\\nThere are now canvas mode buttons at the bottom of the editor. These buttons give you quick access to generating flows from AI, selecting canvas objects, panning the canvas, and quickly adding new states or notes to the canvas.\\n\\nThis is an excellent time to mention that annotations are now called notes! Notes behave exactly like annotations, just with a simpler new name!\\n\\nIn the machine\u2019s bottom bar, you can now find undo/redo, zoom options and the help button on the bottom right. And managing machine versions, including switching and creating new versions, can now be done from the bottom left. While viewing a version, the buttons for restoring or duplicating the machine are still in the top bar.\\n\\nWhen you import code into the editor without a project, We\u2019ll now automatically create a new project for you."},{"id":"2023-11-20-stately-studio-2-0","metadata":{"permalink":"/xstate-zh/blog/2023-11-20-stately-studio-2-0","editUrl":"https://github.com/statelyai/docs/edit/main/blog/2023-11-20-stately-studio-2-0/index.mdx","source":"@site/blog/2023-11-20-stately-studio-2-0/index.mdx","title":"Stately Studio 2.0","description":"We\u2019re so excited to release Stately Studio 2.0, which aims to meet developers where they are, no matter which libraries, frameworks, or even languages they use.","date":"2023-11-20T00:00:00.000Z","formattedDate":"November 20, 2023","tags":[{"label":"new","permalink":"/xstate-zh/blog/tags/new"},{"label":"Stately","permalink":"/xstate-zh/blog/tags/stately"},{"label":"AI","permalink":"/xstate-zh/blog/tags/ai"},{"label":"Sky","permalink":"/xstate-zh/blog/tags/sky"},{"label":"XState","permalink":"/xstate-zh/blog/tags/x-state"},{"label":"Redux","permalink":"/xstate-zh/blog/tags/redux"},{"label":"Zustand","permalink":"/xstate-zh/blog/tags/zustand"},{"label":"generate","permalink":"/xstate-zh/blog/tags/generate"},{"label":"React","permalink":"/xstate-zh/blog/tags/react"}],"readingTime":11.64,"hasTruncateMarker":true,"authors":[{"name":"David Khourshid","title":"Stately Team","url":"https://github.com/davidkpiano","imageURL":"https://ascelcgzufjyvdzuplwo.supabase.co/storage/v1/object/public/avatars/david.png","key":"david"}],"frontMatter":{"title":"Stately Studio 2.0","description":"We\u2019re so excited to release Stately Studio 2.0, which aims to meet developers where they are, no matter which libraries, frameworks, or even languages they use.","authors":["david"],"tags":["new","Stately","AI","Sky","XState","Redux","Zustand","generate","React"],"date":"2023-11-20T00:00:00.000Z","slug":"2023-11-20-stately-studio-2-0","image":"/blog/2023-11-20-stately-studio-2-0.png"},"unlisted":false,"prevItem":{"title":"Changelog for our biggest release yet","permalink":"/xstate-zh/blog/2023-11-23-stately-studio-2-0-changelog"},"nextItem":{"title":"Introducing Stately Sky","permalink":"/xstate-zh/blog/2023-11-13-introducing-stately-sky"}},"content":"It\u2019s been about a year since we\u2019ve released [Stately Studio 1.0](https://stately.ai/blog/2022-10-18-introducing-stately-studio-1-0), and a lot has happened. [Stately Studio](https://stately.ai/editor) is essentially a visual software modeling tool that strives to make it easy to create, manage, and use state machines, no matter how complex they may get. Primarily, it served as a powerful set of devtools for [XState](https://github.com/statelyai/xstate) (an open-source library for creating state machines, statecharts and actors in JavaScript and TypeScript). You could import XState code to a state diagram, modify it visually in an intuitive drag-and-drop canvas, and export to XState. Eventually, we added more export options: JSON, Markdown, Mermaid diagrams, and stories.\\n\\nBut Stately Studio has bigger ambitions than just being a suite of devtools for XState. We\u2019ve frequently heard that these state diagrams are an important **source of truth** for critical app logic, serving as documentation for the entire team that stays up-to-date with your code. But a reliable source of truth for app logic is a need for **all** apps, not just those that use state machines directly.\\n\\nThat\u2019s why we\u2019re so excited to release Stately Studio 2.0, which aims to **meet developers where they are**, no matter which libraries, frameworks, or even languages they use. There are many benefits to modeling app logic with state diagrams and the actor model, and we want to enable developers to take advantage of those benefits to build more robust, feature-rich, and maintainable app logic faster.\\n\\n{/* truncate */}\\n\\n<p>\\n  <ThemedImage\\n    alt=\\"A state machine, called \'Source of truth\', helps manage the different stages of a project. It starts in the \'Create\' state, where you can import existing code, generate new code using AI, design with a drag-and-drop interface, or convert from other state management libraries. Once you\'re done creating, you transition to the \'Use\' state. Here, you can export your code and documentation, deploy live workflows, generate tests, React apps, and schemas, and simulate your project to preview and share.\\"\\n    sources={{\\n      light: \'/blog/2023-11-20-stately-studio-2-0/source.png\',\\n      dark: \'/blog/2023-11-20-stately-studio-2-0/source-dm.png\',\\n    }}\\n  />\\n</p>\\n\\nStately Studio 2.0 is an intelligent software modeling platform for working with app logic at all stages of the software development lifecycle. With its specialized graph algorithms for analyzing state machines, version 1 of the Studio was already well-equipped to handle the deterministic tasks. Now, Studio 2.0 comes paired with AI LLMs (large language models) and more to handle the not-so-deterministic tasks, such as generation & modification from natural language, [Stately Studio](https://stately.ai/) is an essential tool for any development team working on complex app logic.\\n\\nLet\u2019s go over some of the entry actions to our ambitious transition.\\n\\n## Import from XState, Redux, Zustand, and more\\n\\nIn the front end, there are many popular state machine libraries, all with different focuses and tradeoffs. We\u2019ve frequently said that developers are always writing state machines, whether they know it (explicit) or not (implicit). So, we want to make it easy to visualize app logic from any code as a state machine, starting with commonly used front-end state management libraries.\\n\\nHere\u2019s how it works:\\n\\n1. Choose **Import from code** when creating a new machine, or use the **Import** option in the **Code** panel.\\n2. Copy and paste your XState, Zustand, Redux, or Redux Toolkit code into the code area.\\n3. Hit **Convert and import**.\\n4. Stately AI will create a state diagram that matches your provided code.\\n\\nOur Import and convert feature brings the benefits of state machines to existing non-state-machine code:\\n\\n- Generate up-to-date diagrams & customizable documentation for your logic.\\n- Easily detect logical errors in your app logic.\\n- Quickly generate test cases.\\n\\nThis feature is still experimental, but we\u2019re excited for you to try it out. The conversion is made possible with a mixture of AST (Abstract syntax tree) analysis and complex, state-machine-powered LLM logic. And this is just the start; we have many plans for features coming soon:\\n\\n- **Import _and_ export** to and from Redux, Zustand, and more libraries in the future. Of course, this has limitations; statecharts have many features beyond simple state management!\\n- **Bidirectional** editing of your code: edit the diagram, see the code update; edit the code, see the diagram update.\\n- Go further than libraries: import and **export custom workflow [DSL](https://en.wikipedia.org/wiki/Domain-specific_language)s** and even other languages.\\n\\nWe also want to hear your ideas! [Request features and upvote suggestions](https://feedback.stately.ai) on our feedback board.\\n\\n:::info\\n\\nYou can now get limited free generations for our features using Stately AI. [Try them out today and upgrade to a Pro account](https://stately.ai/pricing) to get many more generations a month.\\n\\n:::\\n\\n## Generate UI prototypes\\n\\nModeling flows as state machines for apps is useful, and bringing those state machines to life can make those flows more understandable. With Studio 2.0, you can now generate React user interfaces from the state diagrams you create (or generate) in Stately Studio.\\n\\nHere\u2019s how it works:\\n\\n1. Open the **Code** panel.\\n2. Hit **Generate React app**.\\n3. Stately will near-instantly generate a React app from your state machine (there\u2019s zero AI used here!)\\n\\n<p>\\n  <ThemedImage\\n    alt=\\"Split view with state machine for a sensor reading app on the left, and a generated UI for the sensor readings on the right. The generated UI has a title, the current sensor readings, and buttons to log new readings. On top of the split view is a Generate React app button.\\"\\n    sources={{\\n      light: \'/blog/2023-11-20-stately-studio-2-0/generate.png\',\\n      dark: \'/blog/2023-11-20-stately-studio-2-0/generate-dm.png\',\\n    }}\\n  />\\n</p>\\n\\nYou can open the React app in CodeSandbox to view the working React app built on top of your state machine. Whether you\u2019re making a working prototype or creating a baseline for a functioning app, we want to make it easy to generate UI code from your state machines. We\u2019ll also support StackBlitz in the future.\\n\\nOf course, if you want to make the React prototype a little more lively, you can use our new **Enhance UI** button, which will use Stately AI to fill in more UI details. Enhance UI is an experimental feature, so it may not give perfect results, but it should provide a great starting point you can easily use for prototyping or even building out full apps.\\n\\n## Drag-and-drop state assets\\n\\nA source of truth doesn\u2019t really tell the whole truth if it\u2019s just text, especially for applications with user interfaces. For a long time, our states have had descriptions that support markdown, including images from URLs, but we wanted to make that easier. If you\'re a Stately Pro user, you can now drag and drop images directly onto states, and they will be uploaded and displayed in the state. You can adjust the image size and even upload multiple assets to a single state, arranging which asset is shown on the canvas from the state details panel.\\n\\n<p>\\n  <ThemedImage\\n    alt=\\"State machine for a color picker where an image of an expanded color picker is being dragged into the open state.\\"\\n    sources={{\\n      light: \'/blog/2023-11-20-stately-studio-2-0/drag-assets.png\',\\n      dark: \'/blog/2023-11-20-stately-studio-2-0/drag-assets-dm.png\',\\n    }}\\n  />\\n</p>\\n\\nWhen it comes to documenting your app logic, states and transitions aren\u2019t the whole story. You often want to include use cases, features, workflows, and more. One of our most frequent requests is from teams who want to tie their logic to real-life user interfaces. Assets provide a way to connect user interface design to logic in a way your whole team can understand.\\n\\nIn the future, you\u2019ll have the option to incorporate your assets into the generated UI code. Stately AI will help summarize and improve your state machines based on the contextual information in the assets you\u2019ve provided.\\n\\nAre you an enterprise team looking to store your assets on your own cloud or servers? [Contact us](mailto:support@stately.ai) for more information about Stately Enterprise.\\n\\n## Stately Sky\\n\\nAt [Stately.ai](http://stately.ai/), we want to help you and your team use state machines to improve every aspect of your software development process, from design to development to testing to deployment to monitoring. Last week, we launched **Stately Sky** for our Pro users; if you use state machines for workflows, you can now use Stately Sky to deploy your state machines to the cloud and get all the benefits of serverless computing.\\n\\n<p>\\n  <ThemedImage\\n    alt=\\"State machine for a color picker where an image of an expanded color picker is being dragged into the open state.\\"\\n    sources={{\\n      light: \'/blog/2023-11-20-stately-studio-2-0/sky.png\',\\n      dark: \'/blog/2023-11-20-stately-studio-2-0/sky-dm.png\',\\n    }}\\n  />\\n</p>\\n\\nWith Stately AI and Stately Sky together, you can go from an idea to a deployed workflow in minutes. The Stately editor helps you create much more flexible workflows than other workflow tools\u2014you can use these workflows on the front end, back end, or both. Perfect for onboarding flows, collaborative apps, games, AI agents, and more. Stately Sky is also backed by Cloudflare Workers so that you can run your state machines in 200+ locations worldwide, with low latency and high availability.\\n\\nYou can [read more about Stately Sky in Gavin\u2019s blog post](https://stately.ai/blog/2023-11-13-introducing-stately-sky) and [how PartyKit orchestrates Stately\u2019s machines in the Sky on the PartyKit blog](https://blog.partykit.io/posts/partykit-orchestrates-stately).\\n\\n## Enhanced Stately editor\\n\\nAmong all these huge new features, we have updated the Stately editor\u2019s UI. We want [Stately.ai](http://stately.ai/) to feel as natural as a white-boarding or diagramming tool, while giving you the power to create robust state machines at any level of complexity.\\n\\nThese updates significantly improve the editor\u2019s performance, especially when working with large machines. We\u2019ve also streamlined the editor with reorganized panels and a redesigned header and footer. The new design makes accessing the tools you need faster while also providing information about your machine, including its locked status, project visibility, and current version. We also added new quick-access canvas buttons so you can quickly generate flows, add states or notes, and switch between selecting and panning across the canvas.\\n\\n### Targetless transitions\\n\\nAs a part of our improved support for XState in the Stately editor, the editor now supports targetless transitions. Targetless transitions are useful when you want to trigger an action without a change of state. For example, if you want a transition on your root state but don\u2019t want to keep resetting your machine to the initial state. They also open up the possibility for multiple target state support in the future, which is handy if you want to transition to simultaneous parallel states.\\n\\n### Zoom to selection\\n\\nYou can now **zoom to selected** to re-center the canvas from the zoom menu or the right-click menu. This zoom is particularly helpful when working with large machines and demoing your machines to others, enabling you to jump to a different canvas area swiftly.\\n\\n### Generate summary\\n\\nAs part of our Stately AI toolset for our Pro users, we now have an experimental **Get summary** option in the machine details panel. You can use this to create a summary of your state machine to make it even more understandable to non-technical stakeholders. We\u2019ve also found it helpful in generating alternative text for images of our state machines. This feature could explain and summarize specific paths throughout the machine in the future, representing different use cases or edge cases.\\n\\n<p>\\n  <ThemedImage\\n    alt=\\"Our room readings state machine with the machine details panel open. Below a Get Summary button is the summary text for this machine that reads \'This state machine is called Accumulate room readings. Its purpose is to collect temperature and humidity readings from loT sensors and generate a report every hour. The state machine starts in the ConsumeReadings state, where it initializes the temperature and humidity values as null. It then waits for temperature and humidity events to be logged. Whenever a temperature or humidity event is received, the state machine updates the respective value. After one hour (3600000 milliseconds), the state machine transitions to the GenerateReport state. In this state, it invokes a separate machine called produceReport to generate the report/ Once the report is generated, it\u2026\'\\"\\n    sources={{\\n      light: \'/blog/2023-11-20-stately-studio-2-0/summary.png\',\\n      dark: \'/blog/2023-11-20-stately-studio-2-0/summary-dm.png\',\\n    }}\\n  />\\n</p>\\n\\n## Pricing updates\\n\\nWe\u2019re also simplifying our pricing model. Individual developers can get a Stately Pro subscription for $39/month or $399/year. Teams can get a Stately Team subscription for $199/month or $1999/year for up to 10 users, which includes the full Stately Pro features as well as collaborative features for everyone on the team. We also have an Enterprise plan for larger teams and organizations. You can [read more about our pricing plans here](https://stately.ai/pricing).\\n\\n## What\u2019s coming next\\n\\nAnd soon, there will be even more! We have designed many updates to the Stately editor to support even more capabilities that are on the way. Including:\\n\\n- Multiplayer editing\\n- GitHub Sync\\n- Inspection capabilities\\n- Bidirectional editing\\n- System views and sequence diagrams for actors\\n- Stately Sky analytics\\n- XState version 5\\n- Updated VS Code extension\\n\\n## Intelligent software modeling is the future\\n\\nSoftware modeling is an extremely important yet neglected part of the software development process. When going from ideas to code, having a visual model of how the software should work greatly reduces the cost of maintenance.\\n\\nRight now, everyone is talking about how AI can help us work faster and smarter. LLMs can significantly accelerate state machine creation, modification, optimization, and explanation. Likewise, state machines can serve as essential guardrails for LLMs, helping them to avoid making mistakes by setting predetermined paths (state transitions) for them to follow. We even have open-source tooling that enables these guardrails for all developers, and we\u2019ll release it soon.\\n\\nWe\u2019re also using LLMs to help power the AI in [Stately Studio](http://stately.ai/), but our core technology and the end result are still good old-fashioned state machines, statecharts, and the actor model.\\n\\nIf you have any ideas for features that would benefit your team, [share your feature request on our feedback board](https://feedback.stately.ai). We want to make it as easy as possible for your application logic to always stay up-to-date and be understood by the entire team.\\n\\nWe\u2019re excited for you to try all our new features, so take advantage of our [free trial for Stately Pro features](https://stately.ai/pricing). And we\u2019d love to hear your feedback on Stately Studio 2.0; you can talk to the team on [Discord](https://discord.stately.ai), [Twitter/X](https://twitter.com/statelyai), [LinkedIn](https://www.linkedin.com/company/statelyai/), [Mastodon](https://social.stately.ai/@stately), and [Instagram](https://instagram.com/statelyai)."},{"id":"2023-11-13-introducing-stately-sky","metadata":{"permalink":"/xstate-zh/blog/2023-11-13-introducing-stately-sky","editUrl":"https://github.com/statelyai/docs/edit/main/blog/2023-11-13-introducing-stately-sky/index.mdx","source":"@site/blog/2023-11-13-introducing-stately-sky/index.mdx","title":"Introducing Stately Sky","description":"Announcing Stately Sky, the new way to run your state machines in the cloud.","date":"2023-11-13T00:00:00.000Z","formattedDate":"November 13, 2023","tags":[{"label":"new","permalink":"/xstate-zh/blog/tags/new"},{"label":"sky","permalink":"/xstate-zh/blog/tags/sky"},{"label":"serverless","permalink":"/xstate-zh/blog/tags/serverless"},{"label":"cloud","permalink":"/xstate-zh/blog/tags/cloud"},{"label":"run","permalink":"/xstate-zh/blog/tags/run"},{"label":"machines","permalink":"/xstate-zh/blog/tags/machines"},{"label":"state","permalink":"/xstate-zh/blog/tags/state"},{"label":"stately","permalink":"/xstate-zh/blog/tags/stately"}],"readingTime":4.265,"hasTruncateMarker":true,"authors":[{"name":"Gavin Bauman","title":"Stately Team","url":"https://github.com/gavination","imageURL":"https://ascelcgzufjyvdzuplwo.supabase.co/storage/v1/object/public/avatars/gavin.png","key":"gavin"}],"frontMatter":{"title":"Introducing Stately Sky","description":"Announcing Stately Sky, the new way to run your state machines in the cloud.","authors":["gavin"],"tags":["new","sky","serverless","cloud","run","machines","state","stately"],"date":"2023-11-13T00:00:00.000Z","slug":"2023-11-13-introducing-stately-sky","image":"/blog/2023-11-13-introducing-stately-sky.png"},"unlisted":false,"prevItem":{"title":"Stately Studio 2.0","permalink":"/xstate-zh/blog/2023-11-20-stately-studio-2-0"},"nextItem":{"title":"Generate test paths and create machines faster than ever before","permalink":"/xstate-zh/blog/2023-11-03-generate-test-paths-and-create-machines-faster"}},"content":"The Stately team is very excited to announce a new feature we\u2019ve been working on for quite some time! Join us in welcoming Stately Sky to the Studio. Lovingly built with [PartyKit](https://www.partykit.io/), Sky is our new serverless platform for running workflows within the Studio. With Sky, users may now run their statecharts as live machines in minutes, complete with XState v5 actors and multiplayer support.\\n\\n{/* truncate */}\\n\\n## Why Sky: a seamless developer experience without the lock-in\\n\\nWe know that state machines are extremely powerful for defining app logic, and Sky supercharges the Studio by allowing developers to **_build and deploy_** workflows to the edge, all defined as state machines! Typically, when we think of building workflows or long running processes, we typically think of two possible paths:\\n\\n- coding against large cloud services with cumbersome development environments, tons of boilerplate, and painful deployment processes\\n- relying on low-code or no-code platforms that tend to be inflexible and require vendor lock-in\\n\\nSky aims to remove the barriers on both ends of the spectrum. We\u2019ve always allowed developers to export their diagrams in the Studio as code, as JSON, and [more recently, as stories](https://stately.ai/docs/export-as-code#export-formats). There is no vendor lock-in from the Studio. Additionally, deploying workflows couldn\u2019t be easier. Once the user has built and tested their machines in the Studio, they need only to generate an API key and click deploy.\\n\\n![GIF demonstrating flow generation process](./generateFlow.gif)\\n\\nAfter that, developers can interact with their \u201clive actor\u201d in the same way they\u2019ve been able to work with other XState machines. There is an SDK for Sky-based actors, but the syntax is virtually the same, save for the initial connection and configuration:\\n\\n```tsx\\nconst actor = actorFromStately(\\n  {\\n    url: \'url of the running actor\',\\n    sessionId: \'unique session id for multiplayer\',\\n  },\\n  skyConfig, //provided after initializing sky in your local dev environment\\n);\\n```\\n\\nThe snippet above is all that\u2019s needed in code to connect an application to the live running actor in Stately Sky. For details on all the configuration steps, check out the [\u201cGetting Started\u201d guide](https://stately.ai/docs/stately-sky-getting-started) that walks through the full setup.\\n\\n## Multiplayer: batteries included\\n\\nSky removes the complexity of spinning up a running web server in a cloud platform or hosting it on premise. Thanks to [PartyKit](https://docs.partykit.io/), real-time communication and multiplayer come built-in for the developer. Users don\u2019t have to concern themselves with wrangling and scaling concurrent live connections in Sky. If a client needs to interact with a live actor, they need only the `sessionId` and the rest is handled for them. Both Sky and PartyKit are built using CloudFlare, allowing us to scale with the needs of the user.\\n\\n## What can you do with Sky?\\n\\nSince Sky actors are built using the same tools, the good news is that everything users can build in the editor can work with Sky The developer experience is exactly the same. After connecting to their live actors, users can inspect and send events just like they can with any other XState machine.\\n\\n### Use cases\\n\\nThere are several instances where users would benefit from a live actor, particularly one that can accept requests from multiple sources. Running state machines as actors in Sky gives developers the readability of statecharts with the durability and fault tolerance of cloud compute. For example, long-running workflows where time is a serious constraint can be easily implemented and maintained within Sky. Workflows like:\\n\\n- Multiplayer-collaboration sessions, like whiteboarding, document editing, and gaming.\\n- Asynchronous workflows, like fetching large amounts of data in the background\\n- Long-running backend processes like medical patient onboarding flows or inventory management\\n\\n### How does it work?\\n\\n![Diagram showing Stately Sky at the top, which communicates with the Sky SDK inside the user app. Stately Sky also communicates with PartyKit\u2019s state orchestator which in turn talks to the PartyKit Scheduler for delayed transitions and to \u201cmachineHub\u201d, which is built on Cloudflare Workers for platforms for stateless compute.](./componentDiagram.png)\\n\\nSky makes use of Cloudflare and PartyKit to handle the webserver lifecycle, orchestration, and compute. All those details are abstracted away from the user. Sky\u2019s role is to consume user-defined statecharts and publish them as live actors. So, whenever it is time to interact with that live actor, the user would do so with the Sky SDK. That component is the \u201ctie-in\u201d between the live actor and the rest of the user application. The Sky SDK exposes the live actor to receive events no different from a standard XState actor.\\n\\n## See Sky in action\\n\\nFeel free to check out the [Stately Sky Starter app for interactive demos built on Sky](https://sky-starter.stately.ai/?page=trafficlight). They also serve as a great starting point for building your own Sky actors. Our very own Laura Kalbag also built [an interactive collaborative sleep demo built with Sky](https://laurakalbag.github.io/collaborative-sleep-sky/). Be sure to try the demo with multiple tabs open to simulate different users!\\n\\n## Resources\\n\\nCheck out the resources put together by the team, including our office hours call where we show a preview of Sky in action. For a step-by-step primer, check out the [\u201cGetting Started\u201d guide](https://stately.ai/docs/stately-sky-getting-started) that walks through the full setup.\\n\\n<YouTube id=\\"_iTjIWq6M1g\\" />"},{"id":"2023-11-03-generate-test-paths-and-create-machines-faster","metadata":{"permalink":"/xstate-zh/blog/2023-11-03-generate-test-paths-and-create-machines-faster","editUrl":"https://github.com/statelyai/docs/edit/main/blog/2023-11-03-generate-test-paths-and-create-machines-faster/index.mdx","source":"@site/blog/2023-11-03-generate-test-paths-and-create-machines-faster/index.mdx","title":"Generate test paths and create machines faster than ever before","description":"It\u2019s been a while since our last changelog update, so let\u2019s get right to it!","date":"2023-11-03T00:00:00.000Z","formattedDate":"November 3, 2023","tags":[{"label":"changelog","permalink":"/xstate-zh/blog/tags/changelog"},{"label":"new","permalink":"/xstate-zh/blog/tags/new"},{"label":"improved","permalink":"/xstate-zh/blog/tags/improved"},{"label":"fixed","permalink":"/xstate-zh/blog/tags/fixed"}],"readingTime":4.115,"hasTruncateMarker":true,"authors":[{"name":"Laura Kalbag","title":"Stately Team","url":"https://github.com/laurakalbag","imageURL":"https://ascelcgzufjyvdzuplwo.supabase.co/storage/v1/object/public/avatars/laura.png","key":"laura"}],"frontMatter":{"title":"Generate test paths and create machines faster than ever before","description":"It\u2019s been a while since our last changelog update, so let\u2019s get right to it!","authors":["laura"],"tags":["changelog","new","improved","fixed"],"date":"2023-11-03T00:00:00.000Z","slug":"2023-11-03-generate-test-paths-and-create-machines-faster","image":"/blog/2023-11-03-generate-test-paths-and-create-machines-faster.png"},"unlisted":false,"prevItem":{"title":"Introducing Stately Sky","permalink":"/xstate-zh/blog/2023-11-13-introducing-stately-sky"}},"content":"It\u2019s been a while since our last changelog update, so let\u2019s get right to it!\\n\\n{/* truncate */}\\n\\n## Generate test path code from your machines\\n\\nYou can now generate test path code for your state machines, which you can use to implement tests:\\n\\n- Choose between the shortest or simplest path generation strategies\\n- Choose between default and Playwright test code templates (more to come, including Puppeteer, Cypress, and even other languages)\\n- Optional AI-generated test titles and descriptions\\n- Optional transition coverage\\n\\nThis feature is in beta, and we\u2019d love to get your feedback on [our Discord server](https://discord.stately.ai).\\n\\n![The test generation panel showing options of shortest paths and normal paths, a custom testing framework and toggles selected for deduplicate paths and prefer transition coverage.](test-generation.png)\\n\\n## Editor UI improvements\\n\\nAs shown in the preview above, we\u2019ve started improving the editor UI, and this is just the first phase! We\u2019ve added a secondary header and bottom status bar where you\u2019ll now find the version history. The left and right panels are now adjustable full-height panels. You can now find the machine in the new **Project** panel on the left. We\u2019ve also moved the **Events** schema into a panel in the right toolbox and the context schema into the **Context** toolbox panel.\\n\\n## Creating new machines is easier than ever!\\n\\nNow, when you add a new machine, you can quickly create a machine from a blank canvas, the starter template, import from code, or generate with AI.\\n\\n![Modal saying How would you like to start? With options for a blank canvas, starter template, import code, and generate from AI.](create-machine.png)\\n\\n## Improvements to internal and external transitions\\n\\nTransitions in the editor now have three values:\\n\\n- Internal\\n- External\\n- Auto\\n\\nYou can set internal or external explicitly or leave them as auto. In the future, we\u2019ll provide smarter options for how XState behaves for auto values.\\n\\nWhen exporting to code, we only include the internal property on transitions you have explicitly set to internal. Transitions set to auto ones will be omitted and fall back to default XState behavior in the run time.\\n\\n## Improvements\\n\\nRecently we\u2019ve been focusing a lot on performance, especially for large machines with more than 100 states and events. We\u2019ve made it easier to interact with states and events in these large machines, especially when you\u2019re zoomed in.\\n\\nWe now persist some of your editor preferences on your local device, including:\\n\\n- Show/hide UI\\n- Show metadata on canvas\\n- Show grid\\n- Show left panel\\n- Your last used code panel settings\\n\\nAnd there\u2019s more!\\n\\n- When team-owned machines are auto-saved, we now show the user\u2019s avatar instead of the Bot avatar.\\n- The code editor is now improved for better usability and performance.\\n- Long machine names now overflow more gracefully.\\n- You can now give your new machine a name when forking an existing machine.\\n- We have improved the heuristics for showing paths in large machines.\\n- You can now import code even if you are not logged into Stately.\\n- We now prevent you from accidentally deleting used events from the event schema.\\n- Pro users can now select individual files and folders to import when importing a project from GitHub. You can also modify those selections at a later time.\\n- You can now save a new machine to a project from the Code panel before exporting your machine as code.\\n- The name of the machine you\u2019re saving is now shown in the Save machine modal when saving from the top bar or the right-side code panel.\\n- You can now provide your own GitHub token for authentication.\\n- We have improved the color of draglines in light mode to make them easier to see.\\n\\n## Bug fixes\\n\\n- Fit to content now works again in embed mode.\\n- We\u2019ve brought back the control buttons in embed mode.\\n- States and events will now correctly focus when created.\\n- Draglines now show even when you\u2019re panned far away.\\n- Zooming in now works when your zoom level is less than 10%.\\n- We\u2019ve added the option to add colors from the right-click menu for Pro users again.\\n- We fixed an issue where sometimes clicking on a button on the canvas didn\u2019t register.\\n- The context property is now correctly validated in the context schema.\\n- We fixed a bug in exporting expressions.\\n- We fixed a bug where creating a new machine from AI generation overwrote the current machine.\\n\\n## Services\\n\\nYou might have also spotted a new **Services** option on our Billing page. Don\u2019t hesitate to [get in touch with us by email](mailto:support@stately.ai) if you\u2019re interested in any of the following:\\n\\n- Consultancy on state management and/or using XState in your team\\n- Workshops for XState V4 and XState V5 beta\\n- Custom solutions for state machine logic and model-based testing\\n- Priority support\\n\\nWe\u2019d love to hear from you!"}]}')}}]);