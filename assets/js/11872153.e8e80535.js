"use strict";(self.webpackChunkstately_docs=self.webpackChunkstately_docs||[]).push([[6480],{61293:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>r,default:()=>p,frontMatter:()=>i,metadata:()=>o,toc:()=>d});var s=n(85893),a=n(11151);const i={title:"Tags"},r=void 0,o={id:"tags",title:"Tags",description:'State nodes can have tags, which are string terms that help group or categorize the state node. For example, you can signify which state nodes represent states in which data is being loaded by using a "loading" tag, and determine if a state contains those tagged state nodes with state.hasTag(tag):',source:"@site/docs/tags.mdx",sourceDirName:".",slug:"/tags",permalink:"/xstate-zh/docs/tags",draft:!1,unlisted:!1,editUrl:"https://github.com/statelyai/docs/tree/main/docs/tags.mdx",tags:[],version:"current",frontMatter:{title:"Tags"},sidebar:"tutorialSidebar",previous:{title:"Persistence",permalink:"/xstate-zh/docs/persistence"},next:{title:"Event emitter",permalink:"/xstate-zh/docs/event-emitter"}},c={},d=[{value:"Tags and TypeScript",id:"tags-and-typescript",level:2}];function h(e){const t={a:"a",admonition:"admonition",code:"code",h2:"h2",p:"p",pre:"pre",strong:"strong",...(0,a.a)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsxs)(t.p,{children:["State nodes can have ",(0,s.jsx)(t.strong,{children:"tags"}),', which are string terms that help group or categorize the state node. For example, you can signify which state nodes represent states in which data is being loaded by using a "loading" tag, and determine if a state contains those tagged state nodes with ',(0,s.jsx)(t.code,{children:"state.hasTag(tag)"}),":"]}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-ts",children:"const feedbackMachine = createMachine({\n  id: 'feedback',\n  initial: 'prompt',\n  states: {\n    prompt: {\n      tags: ['visible'],\n      // ...\n    },\n    form: {\n      tags: ['visible'],\n      // ...\n    },\n    thanks: {\n      tags: ['visible', 'confetti'],\n      // ...\n    },\n    closed: {\n      tags: ['hidden'],\n    },\n  },\n});\n\nconst feedbackActor = createActor(feedbackMachine).start();\n\nconsole.log(feedbackActor..getSnapshot().hasTag('visible'));\n// logs true\n"})}),"\n",(0,s.jsx)(t.h2,{id:"tags-and-typescript",children:"Tags and TypeScript"}),"\n",(0,s.jsxs)(t.admonition,{type:"typescript",children:[(0,s.jsx)(t.p,{children:(0,s.jsx)(t.strong,{children:"XState v5 requires TypeScript version 5.0 or greater."})}),(0,s.jsxs)(t.p,{children:["For best results, use the latest TypeScript version. ",(0,s.jsx)(t.a,{href:"/xstate-zh/docs/typescript",children:"Read more about XState and TypeScript"})]})]}),"\n",(0,s.jsxs)(t.p,{children:["You can strongly type the ",(0,s.jsx)(t.code,{children:"tags"})," of your machine in the ",(0,s.jsx)(t.code,{children:"types.tags"})," property of the machine setup."]}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-ts",children:"import { setup } from 'xstate';\n\nconst machine = setup({\n  types: {\n    // highlight-next-line\n    tags: {} as 'pending' | 'success' | 'error'\n  }\n}).createMachine({\n  // ...\n  states: {\n    loadingUser: {\n      tags: ['pending'], // Strongly-typed\n    },\n  },\n});\n\nconst actor = createActor(machine).start();\n\nactor\n  .getSnapshot()\n  // Autocompleted\n  .hasTag('pending');\n"})})]})}function p(e={}){const{wrapper:t}={...(0,a.a)(),...e.components};return t?(0,s.jsx)(t,{...e,children:(0,s.jsx)(h,{...e})}):h(e)}},11151:(e,t,n)=>{n.d(t,{Z:()=>o,a:()=>r});var s=n(67294);const a={},i=s.createContext(a);function r(e){const t=s.useContext(i);return s.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function o(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:r(e.components),s.createElement(i.Provider,{value:t},e.children)}}}]);