"use strict";(self.webpackChunkstately_docs=self.webpackChunkstately_docs||[]).push([[5621],{88955:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>o,default:()=>h,frontMatter:()=>i,metadata:()=>r,toc:()=>d});var s=t(85893),a=t(11151);const i={title:"State Machines - What\u2019s in a name?",description:"An overview of naming conventions for state machines, including tips and guidlines for naming",tags:["stately","studio","coding conventions","naming","semantics","style","statecharts","state machines","xstate"],authors:["kevin"],date:new Date("2024-01-23T00:00:00.000Z"),slug:"2024-01-23-state-machines-whats-in-a-name",image:"/blog/2024-01-23-state-machines-whats-in-a-name.png"},o=void 0,r={permalink:"/xstate-zh/blog/2024-01-23-state-machines-whats-in-a-name",editUrl:"https://github.com/statelyai/docs/edit/main/blog/2024-01-23-state-machines-whats-in-a-name/index.mdx",source:"@site/blog/2024-01-23-state-machines-whats-in-a-name/index.mdx",title:"State Machines - What\u2019s in a name?",description:"An overview of naming conventions for state machines, including tips and guidlines for naming",date:"2024-01-23T00:00:00.000Z",formattedDate:"January 23, 2024",tags:[{label:"stately",permalink:"/xstate-zh/blog/tags/stately"},{label:"studio",permalink:"/xstate-zh/blog/tags/studio"},{label:"coding conventions",permalink:"/xstate-zh/blog/tags/coding-conventions"},{label:"naming",permalink:"/xstate-zh/blog/tags/naming"},{label:"semantics",permalink:"/xstate-zh/blog/tags/semantics"},{label:"style",permalink:"/xstate-zh/blog/tags/style"},{label:"statecharts",permalink:"/xstate-zh/blog/tags/statecharts"},{label:"state machines",permalink:"/xstate-zh/blog/tags/state-machines"},{label:"xstate",permalink:"/xstate-zh/blog/tags/xstate"}],readingTime:9.055,hasTruncateMarker:!0,authors:[{name:"Kevin Maes",title:"Stately Team",url:"https://github.com/kevinmaes",imageURL:"https://ascelcgzufjyvdzuplwo.supabase.co/storage/v1/object/public/avatars/kevin.png",key:"kevin"}],frontMatter:{title:"State Machines - What\u2019s in a name?",description:"An overview of naming conventions for state machines, including tips and guidlines for naming",tags:["stately","studio","coding conventions","naming","semantics","style","statecharts","state machines","xstate"],authors:["kevin"],date:"2024-01-23T00:00:00.000Z",slug:"2024-01-23-state-machines-whats-in-a-name",image:"/blog/2024-01-23-state-machines-whats-in-a-name.png"},unlisted:!1,prevItem:{title:"Embed Figma designs in Stately",permalink:"/xstate-zh/blog/2024-01-24-embed-figma"},nextItem:{title:"Changelog Week 3 2024",permalink:"/xstate-zh/blog/2024-01-19-changelog"}},c={authorsImageUrls:[void 0]},d=[{value:"What or how should I name this thing?",id:"what-or-how-should-i-name-this-thing",level:2},{value:"Be brief yet specific",id:"be-brief-yet-specific",level:3},{value:"What style should that name be in?",id:"what-style-should-that-name-be-in",level:2},{value:"XState v5 and <code>dot.case</code>",id:"xstate-v5-and-dotcase",level:3},{value:"Other tips",id:"other-tips",level:2},{value:"Improved readability",id:"improved-readability",level:3},{value:"Know your audience",id:"know-your-audience",level:3},{value:"Consistency is Key",id:"consistency-is-key",level:3},{value:"Conventions and maintenance",id:"conventions-and-maintenance",level:3},{value:"Summary",id:"summary",level:3}];function l(e){const n={a:"a",admonition:"admonition",code:"code",h2:"h2",h3:"h3",img:"img",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,a.a)(),...e.components},{EmbedMachine:i}=n;return i||function(e,n){throw new Error("Expected "+(n?"component":"object")+" `"+e+"` to be defined: you likely forgot to import, pass, or provide it.")}("EmbedMachine",!0),(0,s.jsxs)(s.Fragment,{children:[(0,s.jsxs)(n.p,{children:["State machines and visual diagrams are such a powerful way to organize, and convey information. All of those lovely \u201cboxes and arrows\u201d convey meaningful relationships, indicate sequential order, and direct flows in a way that\u2019s easier to understand since it's visual. Add to that the ability to ",(0,s.jsx)(n.a,{href:"https://stately.ai/docs/assets",children:"attach assets to your diagrams"})," and you\u2019re well on your way towards creating truly expressive, executable software diagrams. But there\u2019s still one thing that state machines have that should make them easy to understand. Text."]}),"\n","\n",(0,s.jsxs)(n.p,{children:["When I say text, I\u2019m largely referring to ",(0,s.jsx)(n.strong,{children:"names"}),". States, events, actors, actions, and guards all have names. These are important since they\u2019re included in the executable code or other ",(0,s.jsx)(n.a,{href:"https://stately.ai/docs/export-as-code",children:"formats that are exported from Studio"}),", so they can't be arbitrary or merely decorative. Users often ask us for guidance on naming conventions in ",(0,s.jsx)(n.a,{href:"https://stately.ai/docs/xstate",children:"XState"})," and how to name the parts of their state machines."]}),"\n",(0,s.jsx)(n.p,{children:"We can break down some of these questions into two categories:"}),"\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.a,{href:"#what-or-how-should-i-name-this-thing",children:"What or how should I name this thing"}),"?"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.a,{href:"#what-style-should-that-name-be-in",children:"What style should that name be in"}),"?"]}),"\n"]}),"\n",(0,s.jsx)(i,{name:"A state machine demonstrating a particular naming convention with states using Title Case, events using dot.case, actions and actors using camelCase and guards using lower case.",embedURL:"https://stately.ai/registry/editor/embed/9fa24cc0-3026-41be-bb22-9afc3980fefc?machineId=db0e655e-f16f-4a30-97a7-a0081b73d532"}),"\n",(0,s.jsx)(n.h2,{id:"what-or-how-should-i-name-this-thing",children:"What or how should I name this thing?"}),"\n",(0,s.jsxs)(n.p,{children:["This question is largely about semantics and in this case that means how do the names used in a state machine convey the purpose and meaning of the elements and their role in a state machine? Should a state be named ",(0,s.jsx)(n.strong,{children:(0,s.jsx)(n.code,{children:"Load"})}),", ",(0,s.jsx)(n.strong,{children:(0,s.jsx)(n.code,{children:"Loader"})}),", ",(0,s.jsx)(n.strong,{children:(0,s.jsx)(n.code,{children:"Loading"})}),", or ",(0,s.jsx)(n.strong,{children:(0,s.jsx)(n.code,{children:"Loaded"})}),"? Should an event be named ",(0,s.jsx)(n.strong,{children:(0,s.jsx)(n.code,{children:"Submit"})}),", ",(0,s.jsx)(n.strong,{children:(0,s.jsx)(n.code,{children:"Submit form"})}),", ",(0,s.jsx)(n.strong,{children:(0,s.jsx)(n.code,{children:"Form submitted"})}),", ",(0,s.jsx)(n.strong,{children:(0,s.jsx)(n.code,{children:"On submit"})}),", or ",(0,s.jsx)(n.strong,{children:(0,s.jsx)(n.code,{children:"Form submission"})}),"? There are indeed many options to choose from and there's no one right answer. But there are some guidelines that can help you make the best choice."]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Mapping parts of speech to state machines"})}),"\n",(0,s.jsx)(n.p,{children:"One useful way to think about naming in state machines is to roughly map its elements to various parts of speech. This is what that might look like:"}),"\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"States"}),": typically nouns or adjectives","\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["States represent different conditions or modes of being. Therefore, they are often named with nouns or adjectives that describe the status or quality of the system. For example, ",(0,s.jsx)(n.strong,{children:(0,s.jsx)(n.code,{children:"idle"})}),", ",(0,s.jsx)(n.strong,{children:(0,s.jsx)(n.code,{children:"loading"})}),", ",(0,s.jsx)(n.strong,{children:(0,s.jsx)(n.code,{children:"authenticated"})}),", or ",(0,s.jsx)(n.strong,{children:(0,s.jsx)(n.code,{children:"error"})}),"."]}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Events/transitions"}),": Usually verbs","\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["Events are triggers that cause state transitions. They are actions or occurrences, so they are best named with verbs. Examples include ",(0,s.jsx)(n.strong,{children:(0,s.jsx)(n.code,{children:"submit"})}),", ",(0,s.jsx)(n.strong,{children:(0,s.jsx)(n.code,{children:"cancel"})}),", ",(0,s.jsx)(n.strong,{children:(0,s.jsx)(n.code,{children:"fail"})}),", ",(0,s.jsx)(n.strong,{children:(0,s.jsx)(n.code,{children:"load"})}),", ",(0,s.jsx)(n.strong,{children:(0,s.jsx)(n.code,{children:"sign in"})}),", or ",(0,s.jsx)(n.strong,{children:(0,s.jsx)(n.code,{children:"clear form data"})}),"."]}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Actions"}),": verbs or verb phrases","\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["Actions are operations executed in response to events or state transitions. They should be verbs or verb phrases that describe what action is being taken. For instance, ",(0,s.jsx)(n.strong,{children:(0,s.jsx)(n.code,{children:"sendRequest"})}),", ",(0,s.jsx)(n.strong,{children:(0,s.jsx)(n.code,{children:"displayError"})}),", ",(0,s.jsx)(n.strong,{children:(0,s.jsx)(n.code,{children:"updateData"})}),"."]}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Guards"}),": Often adjectives or past participles","\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["Guards are conditional checks that determine if a transition should occur. They can be named with adjectives or past participles that describe the condition being met. Examples include ",(0,s.jsx)(n.strong,{children:(0,s.jsx)(n.code,{children:"isLoggedIn"})}),", ",(0,s.jsx)(n.strong,{children:(0,s.jsx)(n.code,{children:"hasValidData"})}),", ",(0,s.jsx)(n.strong,{children:(0,s.jsx)(n.code,{children:"isExpired"})}),". You\u2019ll notice these are similar to how you might name boolean variables in code."]}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Parent states"}),": Compound Nouns","\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["For nested states, these can also be nouns like regular states or they could be adjectives indicating a subordinate level of the parent state which is a noun. An example might be a state called ",(0,s.jsx)(n.strong,{children:(0,s.jsx)(n.code,{children:"Viewing Shopping Cart"})})," with child states ",(0,s.jsx)(n.strong,{children:(0,s.jsx)(n.code,{children:"Empty"})})," and ",(0,s.jsx)(n.strong,{children:(0,s.jsx)(n.code,{children:"Populated"})}),"."]}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Invoked Actors"}),": nouns or gerunds","\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["When a state machine invokes a service (like an API call), these are often named with nouns or gerunds (nouns derived from verbs and ending in -ing) that describe the service's function. Examples are ",(0,s.jsx)(n.strong,{children:(0,s.jsx)(n.code,{children:"fetchingData"})}),", ",(0,s.jsx)(n.strong,{children:(0,s.jsx)(n.code,{children:"userAuthentication"})}),"."]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:"By aligning the names in state machines with these parts of speech, the structure and functionality of the state machine becomes more intuitive and easier to understand, facilitating better communication and documentation."}),"\n",(0,s.jsx)(n.h3,{id:"be-brief-yet-specific",children:"Be brief yet specific"}),"\n",(0,s.jsx)(n.p,{children:"Just like with naming anything in code, it\u2019s helpful to pick names that are brief, not generic, yet contain just enough information to be unambiguous. Make names \u201cminimally meaningful\u201d."}),"\n",(0,s.jsx)(n.p,{children:"State name examples:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:(0,s.jsx)(n.code,{children:"Idle"})})," instead of ",(0,s.jsx)(n.strong,{children:(0,s.jsx)(n.code,{children:"State1"})})]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:(0,s.jsx)(n.code,{children:"Door Closed"})})," instead of ",(0,s.jsx)(n.strong,{children:(0,s.jsx)(n.code,{children:"Closed"})})]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:(0,s.jsx)(n.code,{children:"Payment Processing"})})," instead of ",(0,s.jsx)(n.strong,{children:(0,s.jsx)(n.code,{children:"State_Awaiting_Payment"})})]}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:"Event name examples:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:(0,s.jsx)(n.code,{children:"Submit"})})," or ",(0,s.jsx)(n.strong,{children:(0,s.jsx)(n.code,{children:"submit"})})," instead of ",(0,s.jsx)(n.strong,{children:(0,s.jsx)(n.code,{children:"Event1"})})]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:(0,s.jsx)(n.code,{children:"Receive payment"})})," instead of ",(0,s.jsx)(n.strong,{children:(0,s.jsx)(n.code,{children:"Event_Payment_Received"})})]}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"what-style-should-that-name-be-in",children:"What style should that name be in?"}),"\n",(0,s.jsxs)(n.p,{children:["When statecharts were first introduced in ",(0,s.jsx)(n.a,{href:"https://www.inf.ed.ac.uk/teaching/courses/seoc/2005_2006/resources/statecharts.pdf",children:"\u201cStatecharts: A visual formalism for complex systems\u201d (Harel, 1987)"}),", there was relatively little discussion of naming conventions and many of the diagrams used letters and numbers to represent states and events. The innovations that statecharts introduced were focused on visually representing relationships needed to support real world software use cases such as hierarchy, parallelism, history states, etc."]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.img,{alt:"An example of parallel states taken from Statecharts: A visual formalism for complex systems by David Harel.",src:t(75723).Z+"",width:"1000",height:"645"})}),"\n",(0,s.jsxs)(n.p,{children:["Some of the examples later in the paper did demonstrate the use of state and event labels but these were usually single words or short phrases without attention paid to style. Interestingly enough, this example makes use of a ",(0,s.jsx)(n.strong,{children:(0,s.jsx)(n.code,{children:"dot.case"})})," style for event names which you can ",(0,s.jsx)(n.a,{href:"#xstate-v5-and-dotcase",children:"jump ahead and read about here"}),"."]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.img,{alt:"An example of states and events from a statechart depicting the alarm on a Citizen Quartz watch.",src:t(65297).Z+"",width:"1000",height:"446"})}),"\n",(0,s.jsxs)(n.p,{children:['By the time the book, "Constructing the User Interface with Statecharts" (Horrocks, 1999) was published, more descriptive state and event labels were present in elaborate examples of statecharts used to model hardware and software systems. This example of a CD player (remember those?) is rather detailed and also quite clear in its use of names and text annotations on the statechart. You can ',(0,s.jsx)(n.a,{href:"https://stately.ai/registry/editor/9fa24cc0-3026-41be-bb22-9afc3980fefc?machineId=5b186011-088e-4c1c-be95-9a489a126b13",children:"view this state machine inspired by this example"})," or ",(0,s.jsx)(n.a,{href:"https://stately.ai/registry/editor/9fa24cc0-3026-41be-bb22-9afc3980fefc?machineId=24adba0d-a6ac-4e79-836c-e0d91bb7ab85",children:"see the full example"})," borrowed from the book."]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.img,{alt:"Part of a statechart for a physical CD player including states for when the CD is playing, stopped, paused, and events transitioning the machine from state to state.",src:t(82898).Z+"",width:"1000",height:"941"})}),"\n",(0,s.jsx)(n.p,{children:"Over the decades since those early writings on statecharts, the emergence of nearly all of the major programming languages in use today have popularized a number of naming conventions for code. Here are some of the most common styles you can choose from when naming states, events, actions, and guards in XState:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.strong,{children:(0,s.jsx)(n.code,{children:"Title Case"})})}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.strong,{children:(0,s.jsx)(n.code,{children:"Sentence case"})})}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.strong,{children:(0,s.jsx)(n.code,{children:"lower case"})})}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.strong,{children:(0,s.jsx)(n.code,{children:"UPPER CASE"})})}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.strong,{children:(0,s.jsx)(n.code,{children:"PascalCase"})})}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.strong,{children:(0,s.jsx)(n.code,{children:"camelCase"})})}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.strong,{children:(0,s.jsx)(n.code,{children:"snake_case"})})}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.strong,{children:(0,s.jsx)(n.code,{children:"kebab-case"})})}),"\n"]}),"\n",(0,s.jsxs)(n.p,{children:["When XState was released in 2016, many of the early examples demonstrated use of ",(0,s.jsx)(n.strong,{children:(0,s.jsx)(n.code,{children:"UPPER_CASE"})})," for event names (also in fashion for Redux action types) and ",(0,s.jsx)(n.strong,{children:(0,s.jsx)(n.code,{children:"camelCase"})})," for nearly everything else like states, actions, guards, etc. But ",(0,s.jsx)(n.a,{href:"https://stately.ai/docs/xstate",children:"XState"})," doesn't enforce any particular convention and it's up to you to decide what works best for you and your team. Space-separated styles like ",(0,s.jsx)(n.strong,{children:(0,s.jsx)(n.code,{children:"Title Case"})}),", ",(0,s.jsx)(n.strong,{children:(0,s.jsx)(n.code,{children:"Sentence case"})}),", and ",(0,s.jsx)(n.strong,{children:(0,s.jsx)(n.code,{children:"lower case"})})," are valid options you can wrap them in quotes to use as JavaScript or TypeScript XState object keys. ",(0,s.jsx)(n.a,{href:"https://stately.ai/docs/export-as-code",children:"Stately Studio will export code"})," with your names in quotes as well."]}),"\n",(0,s.jsxs)(n.h3,{id:"xstate-v5-and-dotcase",children:["XState v5 and ",(0,s.jsx)(n.code,{children:"dot.case"})]}),"\n",(0,s.jsxs)(n.p,{children:["Fast forward to 2024, with the ",(0,s.jsx)(n.a,{href:"https://stately.ai/blog/2023-12-01-xstate-v5",children:"recent release of XState v5"}),", one particular style convention for event names is strongly encouraged and that's ",(0,s.jsx)(n.strong,{children:(0,s.jsx)(n.code,{children:"dot.case"})}),". If you recall in the image of the Quartz watch, above, there were events similar to ",(0,s.jsx)(n.strong,{children:(0,s.jsx)(n.code,{children:"battery.inserted"})}),", ",(0,s.jsx)(n.strong,{children:(0,s.jsx)(n.code,{children:"battery.removed"})}),", and ",(0,s.jsx)(n.strong,{children:(0,s.jsx)(n.code,{children:"weak battery.dies"})}),". This style allows for a ",(0,s.jsx)(n.a,{href:"https://stately.ai/docs/transitions#wildcard-transitions",children:"new feature in XState v5 called wildcard transitions"}),". For example, if you had an action called ",(0,s.jsx)(n.code,{children:"logBatteryStatus"})," you could register that action with any number of events matching ",(0,s.jsx)(n.strong,{children:(0,s.jsx)(n.code,{children:"battery.*"})}),", a wildcard transition:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-typescript",children:"states: {\n  Running: {\n    on: {\n      'battery.*': {\n        actions: 'logBatteryStatus',\n      },\n    },\n  }\n}\n"})}),"\n",(0,s.jsxs)(n.p,{children:["I personally like this convention for events because it visually distinguishes them from other name in the state machine and its lack of heavy capitalization make it look more ",(0,s.jsx)(n.strong,{children:(0,s.jsx)(n.code,{children:"streamlined.for.action"})}),", like events should be!"]}),"\n",(0,s.jsx)(n.admonition,{type:"warning",children:(0,s.jsxs)(n.p,{children:["Unlike for event names, it is currently not possible to include a ",(0,s.jsx)(n.code,{children:"."})," when naming states or machines. Please do not do this."]})}),"\n",(0,s.jsx)(n.h2,{id:"other-tips",children:"Other tips"}),"\n",(0,s.jsx)(n.p,{children:"Here are some additional considerations to think about when choosing a naming style for use with XState to make your state machines more readable and easier to understand."}),"\n",(0,s.jsx)(n.h3,{id:"improved-readability",children:"Improved readability"}),"\n",(0,s.jsxs)(n.p,{children:["One of my favorite tips for state machine naming is to use contrasting styles. Contrast is a key ingredient for many things we love from food to color, art, and music. The readability of state machines can also benefit from contrast. If you use ",(0,s.jsx)(n.strong,{children:(0,s.jsx)(n.code,{children:"SHOUTY_UPPERCASE"})})," event names then please don\u2019t also use that case for state names or\u2026 anything else in the same machine really. At the same time, don\u2019t just name every state, event, and action in ",(0,s.jsx)(n.strong,{children:(0,s.jsx)(n.code,{children:"plain old lower case"})})," unless you want your state machine to be read like the equivalent of a bored teen with \u201cvocal fry\u201d. Differentiation can help readers distinguish certain elements of the state machine from others and this applies to readability on the editor canvas as well as in code."]}),"\n",(0,s.jsx)(n.h3,{id:"know-your-audience",children:"Know your audience"}),"\n",(0,s.jsxs)(n.p,{children:["The fact that Statey Studio can turn these executable diagrams into code is certainly powerful but what if much of your intended audience is less technical and will be viewing your state machines in the Studio? Some viewers may be more accustomed to reading some of the naming styles more than others, for example, ",(0,s.jsx)(n.strong,{children:(0,s.jsx)(n.code,{children:"Sentence case"})})," as opposed to ",(0,s.jsx)(n.strong,{children:(0,s.jsx)(n.code,{children:"snake_case"})}),". Users on the ",(0,s.jsx)(n.a,{href:"https://stately.ai/docs/studio-pro-plan",children:"Studio Pro Plan"})," can make use of ",(0,s.jsx)(n.a,{href:"https://stately.ai/docs/versions",children:"Version History"})," to create differently styled version of the same state machines and share them with different audiences either by ",(0,s.jsx)(n.a,{href:"https://stately.ai/docs/url#copy-the-url-from-the-browser-address-bar",children:"sharing the URL to a specific machine version"})," or by ",(0,s.jsx)(n.a,{href:"https://stately.ai/docs/export-as-code",children:"exporting to markdown, Stories, tests, etc"}),"."]}),"\n",(0,s.jsx)(n.h3,{id:"consistency-is-key",children:"Consistency is Key"}),"\n",(0,s.jsxs)(n.p,{children:["Choose whatever you want but try to be consistent. Readers will hopefully understand your chosen naming convention and will come to rely on it. If you name states ",(0,s.jsx)(n.strong,{children:(0,s.jsx)(n.code,{children:"Waiting"})}),", ",(0,s.jsx)(n.strong,{children:(0,s.jsx)(n.code,{children:"Downloading"})}),", ",(0,s.jsx)(n.strong,{children:(0,s.jsx)(n.code,{children:"Synchronizing"})})," then when they see another word ending in ",(0,s.jsx)(n.strong,{children:(0,s.jsx)(n.code,{children:"ing"})})," they\u2019ll probably assume it\u2019s also a state as opposed to an event. Similarly, if you name actions using ",(0,s.jsx)(n.strong,{children:(0,s.jsx)(n.code,{children:"camelCase"})}),", you might consider naming all actions in that way, whether they\u2019re entry/exit actions on states or actions on transitions. So remember, consistency is key here."]}),"\n",(0,s.jsx)(n.h3,{id:"conventions-and-maintenance",children:"Conventions and maintenance"}),"\n",(0,s.jsx)(n.p,{children:"From consistency, conventions often emerge. These could be conventions adhered to across a state machine, an entire project or across all of the projects of a particular user or team. This makes the work easier to understand and easier to maintain, thereby facilitating collaboration."}),"\n",(0,s.jsx)(n.h3,{id:"summary",children:"Summary"}),"\n",(0,s.jsx)(n.p,{children:"Naming conventions and namings styles are a matter of taste but also an opportunity for customization and personalization at the individual or team level. The most important thing is readability, consistency and using naming to convey meaning."}),"\n",(0,s.jsx)(i,{name:"A state machine for part of the CD player example showing states for when the CD is loaded and the CD is stopped, playing, and paused.",embedURL:"https://stately.ai/studio/editor/embed/9fa24cc0-3026-41be-bb22-9afc3980fefc?mode=design&machineId=5b186011-088e-4c1c-be95-9a489a126b13"}),"\n",(0,s.jsx)(n.p,{children:"Sometimes putting attention into the little details goes a long way towards ensuring that machines not only look good but are as understandable as possible. And remember, when your state machines look good, you look good too!"})]})}function h(e={}){const{wrapper:n}={...(0,a.a)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(l,{...e})}):l(e)}},82898:(e,n,t)=>{t.d(n,{Z:()=>s});const s=t.p+"assets/images/horrocks-cd-c03fecea0d9b3d854e8f17bf429f8c11.png"},75723:(e,n,t)=>{t.d(n,{Z:()=>s});const s=t.p+"assets/images/orthogonality-a8b2be3e9745e05cc6351ce3be31bf33.png"},65297:(e,n,t)=>{t.d(n,{Z:()=>s});const s=t.p+"assets/images/watch-batteries-e2bc9d67fda2bab196f62dce083508a4.png"},11151:(e,n,t)=>{t.d(n,{Z:()=>r,a:()=>o});var s=t(67294);const a={},i=s.createContext(a);function o(e){const n=s.useContext(i);return s.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function r(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:o(e.components),s.createElement(i.Provider,{value:n},e.children)}}}]);